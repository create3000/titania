#X3D V3.3 utf8 Titania

PROTO RoundedRectangle2D [
  inputOutput    SFFloat cornerRadius 1
  inputOutput    SFVec2f size 2 2
  initializeOnly SFBool  solid TRUE
]
{
  DEF Geometry IndexedFaceSet {
    solid IS solid
    coord Coordinate { }
  }

  DEF RoundedRectangle2D Script {
    inputOutput    SFFloat cornerRadius IS cornerRadius
    inputOutput    SFVec2f size IS size
    initializeOnly SFFloat cornerDimension 10
    initializeOnly SFNode  geometry USE Geometry

    url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var radius = Math .min (Math .min (cornerRadius, size .x / 2), size .y / 2);

	var point         = new SFVec3f (radius, 0, 0);
	var startRotation = new SFRotation (0, 0, 1, 0);
	var endRotation   = new SFRotation (0, 0, 1, Math .PI / 2);
	var corner        = new MFVec3f ();
	var coordIndex    = new MFInt32 ();
	var points        = new MFVec3f ();

	for (var i = 0; i < cornerDimension * 4; ++ i)
		coordIndex [coordIndex .length] = i;

	for (var i = 0; i < cornerDimension; ++i)
		corner [i] = startRotation .slerp (endRotation, i / (cornerDimension - 1)) .multVec (point);
	
	var translation = new SFVec3f (size .x / 2 - radius, size .y / 2 - radius, 0);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = corner [i] .add (translation);

	var translation = new SFVec3f (-size .x / 2 + radius, size .y / 2 - radius, 0);
	var rotation    = new SFRotation (0, 0, 1, Math .PI * 0.5);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = rotation .multVec (corner [i]) .add (translation);

	var translation = new SFVec3f (-size .x / 2 + radius, -size .y / 2 + radius, 0);
	var rotation    = new SFRotation (0, 0, 1, Math .PI);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = rotation .multVec (corner [i]) .add (translation);

	var translation = new SFVec3f (size .x / 2 - radius, -size .y / 2 + radius, 0);
	var rotation    = new SFRotation (0, 0, 1, Math .PI * 1.5);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = rotation .multVec (corner [i]) .add (translation);

	geometry .coord .point = points;	
	geometry .coordIndex   = coordIndex;
}
"
    directOutput TRUE
  }
}

