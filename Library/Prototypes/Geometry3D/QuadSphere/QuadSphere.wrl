#VRML V2.0 utf8

PROTO QuadSphere [
  exposedField SFInt32 uDimension 20
  exposedField SFInt32 vDimension 10
  exposedField SFFloat radius 1
  field        SFBool  solid TRUE
  field        SFBool  ccw TRUE
  field        SFFloat creaseAngle 3.14159
]
{
  PROTO Fields [
    exposedField SFInt32 uDimension 20
    exposedField SFInt32 vDimension 10
    exposedField SFFloat radius 1
  ]
  {
    Group { }
  }

  DEF Geometry IndexedFaceSet {
    solid IS solid
    ccw IS ccw
    creaseAngle IS creaseAngle
    texCoord TextureCoordinate { }
    coord Coordinate { }
  }

  DEF QuadSphere Script {
    field SFNode geometry USE Geometry
    field SFNode fields Fields {
      uDimension IS uDimension
      vDimension IS vDimension
      radius IS radius
    }

    url "vrmlscript:
function initialize ()
{
	geometry .set_texCoordIndex = texCoordIndex ();
	geometry .texCoord .point   = texCoord ();
	
	geometry .set_coordIndex    = coordIndex ();
	geometry .coord .point      = points ();
}

function texCoordIndex ()
{
	var texIndices = new MFInt32 ();
	
	var i = 0;
	
	// North pole
	
	for (var u = 0; u < fields .uDimension - 1; ++ u)
	{
		texIndices [i ++] = u;
		texIndices [i ++] = u + fields .uDimension - 1;
		texIndices [i ++] = u + fields .uDimension;
		texIndices [i ++] = -1;
	}

	// Sphere segments
	
	for (var p = fields .uDimension - 1, v = 0; v < fields .vDimension - 3; ++ v, ++ p)
	{
		for (var u = 0; u < fields .uDimension - 1; ++ u, ++ p)
		{
			texIndices [i ++] = p;
			texIndices [i ++] = p + fields .uDimension;
			texIndices [i ++] = p + fields .uDimension + 1;
			texIndices [i ++] = p + 1;
			texIndices [i ++] = -1;
		}
	}
	
	// South pole

	var p = (fields .vDimension - 2) * fields .uDimension - 1;

	for (var u = 0; u < fields .uDimension - 1; ++ u, ++ p)
	{
		texIndices [i ++] = p + fields .uDimension;
		texIndices [i ++] = p + 1;
		texIndices [i ++] = p;
		texIndices [i ++] = -1;
	}

	return texIndices;
}

function texCoord ()
{
	var texCoord = new MFVec2f ();

	var i = 0;

	// North pole
	
	for (var u = 1; u < fields .uDimension; ++ u)
	{
		var x = u / fields .uDimension + 0.5;
		
		texCoord [i ++] = new SFVec2f (x, 1);
	}

	// Sphere segments
	
	for (var v = 1; v < fields .vDimension - 1; ++ v)
	{
		var y = 1 - v / (fields .vDimension - 1);
		
		for (var u = 0; u < fields .uDimension; ++ u)
		{
			var x = u / (fields .uDimension - 1) + 0.5;
			
			texCoord [i ++] = new SFVec2f (x, y);
		}
	}

	// South pole
	
	for (var u = 1; u < fields .uDimension; ++ u)
	{
		var x = u / fields .uDimension + 0.5;
		
		texCoord [i ++] = new SFVec2f (x, 0);
	}

	return texCoord;
}

function coordIndex ()
{
	var index = new MFInt32 ();
	
	var i = 0;

	// North pole
	
	for (var u = 1; u < fields .uDimension - 1; ++ u)
	{
		index [i ++]     = 0;
		index [i ++] = u;
		index [i ++] = u + 1;
		index [i ++] = -1;
	}
	index [i ++] = 0;
	index [i ++] = u;
	index [i ++] = 1;
	index [i ++] = -1;

	// Sphere segments
	
	var p = 1;
	for (var v = 0; v < fields .vDimension - 3; ++ v, ++ p)
	{
		for (var u = 0; u < fields .uDimension - 2; ++ u, ++ p)
		{
			index [i ++] = p;
			index [i ++] = p + fields .uDimension - 1;
			index [i ++] = p + fields .uDimension;
			index [i ++] = p + 1;
			index [i ++] = -1;
		}
		index [i ++] = p;
		index [i ++] = p + fields .uDimension - 1;
		index [i ++] = p + 1;
		index [i ++] = p - fields .uDimension + 2;
		index [i ++] = -1;
	}

	// South pole
	
	var last = p + fields .uDimension - 1;
	for (var u = 0; u < fields .uDimension - 2; ++ u, ++ p)
	{
		index [i ++] = last;
		index [i ++] = p + 1;
		index [i ++] = p;
		index [i ++] = -1;
	}
	index [i ++] = last;
	index [i ++] = last - fields .uDimension + 1;
	index [i ++] = p;
	index [i ++] = -1;

	return index;
}

function points ()
{
	var point = new MFVec3f ();
	
	// North pole
	
	point [0] = new SFVec3f (0, 1, 0) .multiply (fields .radius);

	// Sphere segments
	
	var i = point .length;

	for (var v = 1; v < fields .vDimension - 1; ++ v)
	{
		var y = Math .cos (Math .PI * (v / (fields .vDimension - 1)));
		var r = Math .sin (Math .PI * (v / (fields .vDimension - 1)));
		
		for (u = 0; u < fields .uDimension - 1; ++ u)
		{
			var x = Math .sin ((2 * Math .PI) * (u / (fields .uDimension - 1))) * r;
			var z = Math .cos ((2 * Math .PI) * (u / (fields .uDimension - 1))) * r;

			point [i ++] = new SFVec3f (x, y, z) .multiply (fields .radius);
		}
	}
		
	// South pole

	point [point .length] = new SFVec3f (0, -1, 0) .multiply (fields .radius);

	return point;
}
"
    directOutput TRUE
  }
}

