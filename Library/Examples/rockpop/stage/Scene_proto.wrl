#VRML V2.0 utf8

PROTO Scene [
  exposedField  SFBool    enabled   FALSE
  exposedField  MFString  url		""
  eventOut      SFBool    isActive		
  eventOut      SFTime    enterTime		
  exposedField  MFNode    parameter		[ ]
  exposedField  MFNode    gateway		[ ]
  exposedField  MFNode    children		[ ]
]
{
  PROTO Data [
    exposedField  SFBool    enabled   FALSE
    exposedField  MFString  url		""
    exposedField  MFNode    parameter		[ ]
    exposedField  MFNode    gateway		[ ]
    exposedField  SFInt32   whichChoice		0
    exposedField  MFNode    children		[ ]
    exposedField  MFNode    inline		[ ]
  ]
  {
    Switch { 
	  whichChoice IS whichChoice
      choice [
		  Group { children [Group { children IS gateway }, Group { children IS children }] }
		  Group { children IS inline }
	  ]
    }
  }

  DEF Data Data { 
      enabled IS enabled
      url IS url
      parameter IS parameter
	  gateway IS gateway
	  children IS  children
  }

  DEF _scene Script { 
    eventOut  SFBool    isActive IS isActive
    eventOut  SFTime    enterTime IS enterTime
    eventIn   SFBool    set_enabled
    eventIn   MFNode    set_children
    eventIn   MFString  set_url
    field     SFNode    self USE _scene
    field     SFNode    data USE Data
    field     SFNode    gateway NULL
    url "vrmlscript:
function findNode (name, nodes) {
	// search first 2 level for node;
	for (i=0; i<nodes.length; ++i) {
		if (nodes[i] == name + ' { }') return nodes[i];
		if (nodes[i] == 'Transform { }' || nodes[i] == 'Group { }') {
			for (c=0; c<nodes[i].children.length; ++c) {
				if (nodes[i].children[c] == name + ' { }') return nodes[i].children[c];
			}
		}
	}
	return FALSE;
}

function connect(nodes) {
	node = findNode('Gateway', nodes);
	if (node && data.gateway) {
		gateway = node;
		Browser.addRoute(gateway, 'enabled_changed', data.gateway[0], 'set_enabled');
		Browser.addRoute(data.gateway[0], 'enabled_changed', gateway, 'set_enabled');
		if (data.gateway.length) {
			for (i = 0; i < data.gateway[0].children.length; i++) {
				Browser.addRoute(gateway.children[i], 'keyValue_changed', data.gateway[0].children[i], 'set_keyValue');
				Browser.addRoute(data.gateway[0].children[i], 'keyValue_changed', gateway.children[i], 'set_keyValue');
			}
		}
	}
}

function query() {
	q = '';
	for (i = 0; i < data.parameter.length; i++) {
		q += ';' + data.parameter[i].name;
		if (data.parameter[i].value.length) {
			q += '=' + data.parameter[i].value[0];
		}
	}
	if (q.length > 1) return q.substring(1, q.length);
	return '';
}

function url() {
	q = query();
	u = new MFString();
	u.length = data.url.length;

	if (q == '') return data.url;
	for (i = 0; i < u.length; i++) {
		u[i] = data.url[i] + (data.url[i].indexOf('?') > -1 ? (data.url[i].indexOf('?') == data.url[i].length-1  ? '' : (q.length ? (data.url[i].indexOf(';') == data.url[i].length-1  ? '' : ';') : '') ) : '?') + q;
	}
	return u;
}

function loadUrl() {
	if (Browser.getName() != 'Cosmo Player' && Browser.getVersion() != 1.1) {
		if (!data.enabled) return;
		if (data.url.length) {
			isActive = FALSE;
			data.whichChoice = 0;
			Browser.createVrmlFromURL(url(), self, \"set_children\");
		}
	} else {
		for (url = '', i=0; i<data.url.length; ++i)
			if (data.url[i].indexOf('/') == 0) url = '\"' + data.url[i] +'\"';
		data.inline = new MFNode(new SFNode('Inline{url ['+url+ ']}'));
		data.whichChoice = 1;
	}
}

function set_url(value, time) { loadUrl(); }
function set_enabled(value, time) { if (value) loadUrl(); }

function set_children(value, time) {
	if(!isActive){
		if (value == \"Group { }\")
			data.children = value[0].children;
		else data.children = value;
		connect(data.children);
		isActive = TRUE;
		enterTime = time;
	}
}
function initialize() { loadUrl(); }
    "
    directOutput TRUE
    mustEvaluate TRUE
  }

  ROUTE Data.url_changed TO _scene.set_url
  ROUTE Data.enabled_changed TO _scene.set_enabled
}
