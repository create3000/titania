#VRML V2.0 utf8

PROTO AutoViewpoint [
	    exposedField SFTime startTime 0
	    eventIn      SFBool set_isActive 
	    field        SFNode proximitySensor ProximitySensor { }
	    field        SFNode timeSensor TimeSensor { }
	    field        SFNode positionInterpolator PositionInterpolator { }
	    field        SFNode orientationInterpolator OrientationInterpolator { }
	    field        SFNode scalarInterpolator ScalarInterpolator { }
	    field        SFNode autoViewpoint Viewpoint { }
	    field        SFNode viewpoint Viewpoint { }
	  ]
{
  PROTO Data [
		exposedField SFTime startTime 0
  ] { Group{} }

  Group {
    children DEF avp Script {
      eventIn      SFTime      set_startTime
      eventIn      SFBool      set_isActive IS set_isActive
      field      SFNode      proximitySensor IS proximitySensor
      field      SFNode      timeSensor IS timeSensor
      field      SFNode      positionInterpolator IS positionInterpolator
      field      SFNode      orientationInterpolator IS orientationInterpolator
      field      SFNode      scalarInterpolator IS scalarInterpolator
      field      SFNode      autoViewpoint IS autoViewpoint
      field      SFNode      viewpoint IS viewpoint
      field      SFNode      data DEF Data Data {
	  	startTime IS startTime
	  }
      url	"vrmlscript:
function initialize()
{
	timeSensor.enabled  = FALSE;
	timeSensor.stopTime = 0;

	if (positionInterpolator) {
		positionInterpolator.key      = new MFFloat(0, 1);
		positionInterpolator.keyValue = new MFVec3f(
			new SFVec3f(0, 0, 0),
			viewpoint.position
		);
	}

	if (orientationInterpolator) {
		orientationInterpolator.key      = new MFFloat(0, 1);
		orientationInterpolator.keyValue = new MFRotation(
			new SFRotation(0, 0, 1, 0),
			viewpoint.orientation
		);
	}

	if (scalarInterpolator) {
		scalarInterpolator.key		= new MFFloat(0, 1);
		scalarInterpolator.keyValue = new MFFloat(
			autoViewpoint.fieldOfView,
			viewpoint.fieldOfView
		);
	}
	autoViewpoint.jump = FALSE;
}

function set_startTime(value, time)
{
	if (timeSensor.isActive) return;

	timeSensor.enabled = TRUE;

	autoViewpoint.position    = proximitySensor.position_changed;
	autoViewpoint.orientation = proximitySensor.orientation_changed;

	if (positionInterpolator)    positionInterpolator.keyValue[0]    = autoViewpoint.position;
	if (orientationInterpolator) orientationInterpolator.keyValue[0] = autoViewpoint.orientation;

	autoViewpoint.set_bind = TRUE;
	timeSensor.startTime   = time;
}

function set_isActive(value, time)
{
	if (!value) {
		timeSensor.enabled = FALSE;
		if (autoViewpoint.isBound) {
			autoViewpoint.set_bind = FALSE;
			viewpoint.set_bind = TRUE;
		}
	}
}
"
      directOutput	TRUE
	  mustEvaluate	TRUE
    }
  }
ROUTE Data.startTime_changed TO avp.set_startTime
}
