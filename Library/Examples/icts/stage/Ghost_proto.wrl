#VRML V2.0 utf8

PROTO Ghost [
	    exposedField SFVec2f startPosition 0 0
	    exposedField SFVec2f step 0 0
	    exposedField SFFloat visibilityLimit 40
	    exposedField SFTime cycleInterval 1.5
	    exposedField SFBool freeze FALSE
	    exposedField SFTime startTime 0
	    exposedField SFTime stopTime 0
	    eventOut     SFBool isActive 
	    eventOut     SFVec3f translation_changed 
	    exposedField SFNode matrix NULL
	    exposedField SFNode proximitySensor NULL
	  ]
{
  PROTO Data [
	      exposedField SFVec2f startPosition 0 0
	      exposedField SFVec2f step 0 0
	      exposedField SFFloat visibilityLimit 0
	      exposedField SFBool freeze FALSE
	      exposedField SFTime startTime 0
	      exposedField SFTime stopTime 0
	      exposedField SFNode matrix NULL

	      exposedField SFNode proximitySensor NULL

	    ]
  {
    Group {
      children	[
      ]
    }
  }
  DEF _ghost_0 Script {
    eventOut    SFVec3f    translation_changed IS translation_changed
    eventOut    SFBool    isActive IS isActive
    eventIn    SFTime    set_startTime
    eventIn    SFTime    set_stopTime
    eventIn    SFBool    set_freeze
    eventIn    SFBool    go
    field    SFInt32    position	0
    field    SFInt32    lastPosition	0
    field    SFVec2f    lastDirection	0 0
    field    SFVec2f    rd	0 0
    field    SFVec3f    v	0 0 0
    field    SFNode    data	DEF _1 Data {
      startPosition IS startPosition
      step IS step
      visibilityLimit IS visibilityLimit
      freeze IS freeze
      startTime IS startTime
      stopTime IS stopTime
      matrix IS matrix
      proximitySensor IS proximitySensor
    }

    field    SFNode    timeSensor	DEF _2 TimeSensor {
      cycleInterval IS cycleInterval
    }

    field    SFNode    translationInterpolator	DEF _3 PositionInterpolator {
      key	[ 0, 1 ]
      keyValue	[ 0 0 0,
	        0 0 0 ]
      value_changed IS translation_changed
    }

    url	"vrmlscript:
function random(value)
{
	return Math.round(Math.random() * value);
}

function getTranslation(value)
{
	y = Math.floor(value / data.matrix.size.x);
	x = value - (y * data.matrix.size.x);
	return new SFVec3f(x * data.step.x, 0, y * data.step.y);
}

function randomPosition()
{
	i = random(data.matrix.size.x * data.matrix.size.y - 1);
	while (!data.matrix.matrix[i]) {
		i = random(data.matrix.size.x * data.matrix.size.y - 1);
	}
	return i;
}

function randomDirection()
{
	d = new SFVec2f(0, 0);

	if (Math.random() > 0.5) d.x = Math.random() > 0.5 ? 1 : -1;
	else d.y = Math.random() > 0.5 ? 1 : -1;

	return d;
}

function aimDirection(value)
{
	direction = new SFVec2f(0, 0);
	v = translationInterpolator.keyValue[1].add(data.proximitySensor.position_changed.negate());
	if (data.proximitySensor.isActive && v.length() < data.visibilityLimit) {
		x = Math.abs(v.x);
		y = Math.abs(v.z);
		if (value) {
			if (x < y) direction.x = -(v.x / x);
			else direction.y = v.z / y;
		} else {
			if (x > y) direction.x = -(v.x / x);
			else direction.y = v.z / y;
		}
	} else {
			if (value) direction = new SFVec2f(-rd.y, -rd.x);
			else {
				rd = randomDirection();
				direction = rd;
			}
	}
	return direction;
}

function newPosition()
{
	ways = data.matrix.matrix[position];
	if (ways > 2) {
		direction = aimDirection(0);
		p = (position + direction.x) + direction.y * data.matrix.size.x;
		if (!data.matrix.matrix[p] || p == lastPosition) {
			d = direction;
			direction = aimDirection(1);
			p = (position + direction.x) + direction.y * data.matrix.size.x;
			if (!data.matrix.matrix[p] || p == lastPosition) {
				direction = direction.negate();
				p = (position + direction.x) + direction.y * data.matrix.size.x;
				if (!data.matrix.matrix[p]) {
					direction = d.negate();
					p = (position + direction.x) + direction.y * data.matrix.size.x;
				}
			}
		} else if (Math.random() < 0.5) {
			d = aimDirection(1);
			pr = (position + d.x) + d.y * data.matrix.size.x;
			if (data.matrix.matrix[pr] && pr != lastPosition) {
				direction = d;
				p = pr;
			}
		}
	} else if (ways > 1) {
		direction = lastDirection;
		p = (position + direction.x) + direction.y * data.matrix.size.x;
		if (!data.matrix.matrix[p]) {
			direction = aimDirection(0);
			p = (position + direction.x) + direction.y * data.matrix.size.x;
			if (!data.matrix.matrix[p]) {
				d = direction;
				direction = aimDirection(1);
				p = (position + direction.x) + direction.y * data.matrix.size.x;
				if (!data.matrix.matrix[p]) {
					direction = direction.negate();
					p = (position + direction.x) + direction.y * data.matrix.size.x;
					if (!data.matrix.matrix[p]) {
						direction = d.negate();
						p = (position + direction.x) + direction.y * data.matrix.size.x;
					}
				}
			}
		}
	} else {
		direction = lastDirection.negate();
		p = lastPosition;
	}
	lastDirection = direction;
	lastPosition = position;
	position = p;
	return p;
}

function go(value, time)
{
	if (!value) {
//		if (v.length() < data.step.length()) collideTime = time;
		if (!data.freeze) {
			translationInterpolator.keyValue[0] = translationInterpolator.keyValue[1];
			p = newPosition();
			translationInterpolator.keyValue[1] = getTranslation(p);
			timeSensor.startTime = time;
		}
	}
}

function set_freeze(value, time)
{
	if (!value && !timeSensor.isActive && isActive) go(FALSE, time);
}

function set_startTime(value, time)
{
	isActive = TRUE;
	timeSensor.enabled = TRUE;
	if(data.startPosition.length()) {
		position = data.startPosition.x + data.startPosition.y * data.matrix.size.x;
	} else {
		position = randomPosition();
	}
	translation_changed = getTranslation(position);

	v = new SFVec3f(data.step.x, 0, data.step.y);
	translationInterpolator.keyValue[1] = translation_changed;
	go(FALSE, value + 0.1);
}

function set_stopTime(value, time)
{
	timeSensor.enabled = FALSE;
	isActive = FALSE;
}
"
    directOutput	TRUE
  }
  ROUTE _2.fraction_changed TO _3.set_fraction
  ROUTE _1.startTime_changed TO _ghost_0.set_startTime
  ROUTE _1.stopTime_changed TO _ghost_0.set_stopTime
  ROUTE _1.freeze_changed TO _ghost_0.set_freeze
  ROUTE _2.isActive TO _ghost_0.go
}
