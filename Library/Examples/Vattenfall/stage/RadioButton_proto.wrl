#VRML V2.0 utf8

PROTO RadioButton [
  exposedField  SFBool    enabled		TRUE
  eventOut      SFTime    touchTime		
  exposedField  SFInt32   whichChoice		0
  exposedField  MFNode    choice		[ ]
]
{
  PROTO Data [
    exposedField  SFBool    enabled		TRUE
    exposedField  SFInt32   whichChoice		0
    exposedField  MFNode    children		[ ]
  ]
  {
    Group { 
      children IS children
    }
  }

  DEF Data Data { 
      enabled IS enabled
      whichChoice IS whichChoice
      children IS choice
  }

  DEF _radioButton Script { 
    eventOut  SFTime    touchTime IS touchTime
    eventIn   SFTime    set_touchTime
    eventIn   SFInt32   set_whichChoice
    eventIn   MFNode    set_children
    field     SFInt32   whichChoice -1
    field     MFNode    children [ ]
    field     SFNode    self USE _radioButton
    field     SFNode    data USE Data
    url "vrmlscript:
function set_touchTime (value, time) {
	if (!data.enabled) return;
	for (i=0; i<children.length; ++i) {
		if (children[i].touchTime == value) {
			touchTime = time;
			data.whichChoice = i;
			break;
		}
	}
}
function set_whichChoice (value, time) {
	if (whichChoice >= 0 && whichChoice < children.length)
		children[whichChoice].on = FALSE;
	whichChoice = value;
	if (touchTime != time)
		if (whichChoice >= 0 && whichChoice < children.length && !children[whichChoice].whichChoice)
			children[whichChoice].on = TRUE;
}
function set_children (value, time) {
	for (i=0; i<children.length; ++i)
		Browser.deleteRoute(children[i], 'touchTime', self, 'set_touchTime');
	children = value;
	for (i=0; i<children.length; ++i) {
		children[i].on = FALSE;
		Browser.addRoute(children[i], 'touchTime', self, 'set_touchTime');
	}
	if (whichChoice >= 0 && whichChoice < children.length)
		children[whichChoice].on = TRUE;
}
function initialize() {
	whichChoice = data.whichChoice;
	set_children(data.children, 0);
}
"
    directOutput TRUE
  }

  ROUTE Data.children_changed TO _radioButton.set_children
  ROUTE Data.whichChoice_changed TO _radioButton.set_whichChoice
}

