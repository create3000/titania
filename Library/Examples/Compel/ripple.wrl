#VRML V2.0 utf8 CosmoWorlds V1.0

Group {
  children	  Transform {
    children	[
      DEF _0 WorldInfo {
	info	[ "Created in CosmoWorlds",
		  "Packaged by CosmoPackage",
		  "Packaged by CosmoPackage" ]
      }
      DEF TickTock TimeSensor {
	cycleInterval	3.2
	loop	TRUE
	startTime	0
	stopTime	1
      }
      DEF Rippler Script {
	eventOut	MFInt32	coordIndicesOut
	eventOut	SFFloat	debug
	eventOut	SFTime	debugTime
	eventIn	SFTime	init
	eventIn	SFTime	rippleNow
	eventIn	SFTime	clicked
	eventIn	SFVec3f	set_mousePos
	field	MFInt32	coordIndices	[  ]
	field	SFVec3f	mousePos	0 0 0
	field	SFTime	hitTime	0
	field	SFVec3f	hitPoint	0.75 0.75 0
	field	MFFloat	dists	[  ]
	field	MFVec3f	tempMF	0 0 0
	field	SFInt32	width	10
	field	SFInt32	height	10
	field	SFFloat	deltaX	0.1
	field	SFFloat	deltaY	0.1
	field	SFNode	coords	DEF theCoords_3 Coordinate {
	  point	[ -1.1325 -0.5 0,
		    1.1325 -0.5 0,
		    1.1325 0.5 0,
		    -1.1325 0.5 0 ]
	}

	field	SFNode	timeSensor	USE TickTock

	field	SFVec3f	vec3f	0 0 0
	url	"vrmlscript:
function getIndex( x, y )
{
	return (x*width) + y;
}

function distByXY( x, y )
{
   dx = hitPoint[0] - x*deltaX;
   dy = hitPoint[1] - y*deltaY;
   return Math.sqrt( dx*dx + dy*dy );
}

function cacheDists()
{
   for( x=0; x < width; x++ ) {
      for( y=0; y < height; y++ ) {
	 index = getIndex(x,y);
	 dists[index] = distByXY( x, y );
      }
   }
}

function genSurf()
{
	deltaX = (1 / (width-1)) * 1.5;
	deltaY = 1 / (height-1);

	for( x=0; x < width; x++ ) {
		for( y=0; y < height; y++ ) {
			index = getIndex(x,y);
			vec3f[0] = x * deltaX;
			vec3f[1] = y * deltaY;
			vec3f[2] = 0;
//			coords.point[index] = vec3f;
			tempMF[index]          = vec3f;
		}
	}
	coords.set_point = tempMF;

	polyIndex = 0;
	for( x=0; x < width-1; x++ ) {
		for( y=0; y < height-1; y++ ) {
			coordIndices[polyIndex++] = getIndex(x,  y  );
			coordIndices[polyIndex++] = getIndex(x,  y+1);
			coordIndices[polyIndex++] = getIndex(x+1,y  );
			coordIndices[polyIndex++] = -1;
			coordIndices[polyIndex++] = getIndex(x,  y+1);
			coordIndices[polyIndex++] = getIndex(x+1,y+1);
			coordIndices[polyIndex++] = getIndex(x+1,y  );
			coordIndices[polyIndex++] = -1;
		}
	}

	coordIndicesOut = coordIndices;

   cacheDists();
}

function rippleSurf( time )
{
   dTime     = (time-hitTime); // /10;
   //dTime     = dTime - Math.floor(dTime/3.14)*3.14;

   dampByTime  = (3.14-dTime) / 3.14;
   if ( dTime > 3.14 ) {
     dampByTime = 0;
   }
   damp = dampByTime;

   waveback  = .1 + dTime;
   wavefront = .3 + dTime;

   for( x=0; x < width; x++ ) {
      for( y=0; y < height; y++ ) {
	 index = (x*width) + y;
	 dist = dists[ index ];
	 if ( dist > waveback ) {
	    if ( dist <= wavefront ) {
	       damp = dampByTime * 1 - 5*(dist-waveback);
	    }
	    else {
	       damp = 0;
	    }
	 }
	 else {
	    damp = dampByTime;
	 }
	 tempMF[index][2] = damp * .2 * Math.sin( 12*(dTime - dist) );
      }
   }

   coords.point = tempMF;
}

function rippleNow(value, time)
{
	rippleSurf( time );
}


function set_mousePos(value, time)
{
   mousePos = value;
}

function clicked( value, time )
{
   hitTime = time;
   hitPoint = mousePos;

   // does not work -- loop true or false
   //timeSensor.stopTime  = time;
   //timeSensor.startTime = time + 1;
   //

   //
   timeSensor.stopTime  = time + 3.2;
   timeSensor.startTime = time;
   //

   cacheDists();
}

function init(value, time)
{
   hitTime = time;
   genSurf();
}
"
	directOutput	TRUE
      }
      DEF Nav NavigationInfo {
	headlight	FALSE
	type	"NONE"
      }
      DEF enterWorldTimeSensor TimeSensor {
	cycleInterval	1
	enabled	TRUE
	loop	TRUE
	startTime	1
	stopTime	0
      }
      DEF enterWorldScript Script {
	eventOut	SFTime	startTime
	eventOut	SFBool	firstTime
	eventIn	SFTime	triggerIn
	url	"vrmlscript:function triggerIn(value, time) {
                                                                        
         // fire off a single round                                     
         startTime = value;                                             
         firstTime = FALSE;                                             
       }"
      }
      Group {
	children	[
	  Transform {
	    children	Collision {
	      children		      Transform {
		children	[
		  DEF touchSensorTrigger_7 TouchSensor {
		  }
		  Shape {
		    appearance	Appearance {
		      material	Material {
		      }

		      texture	ImageTexture {
			url	"water.jpg"
		      }

		      textureTransform	TextureTransform {
			translation	0 0.13
			rotation	0
			scale	1 1.3
			center	0.5 0.33
		      }

		    }

		    geometry	DEF theIFS_8 IndexedFaceSet {
		      coord	USE theCoords_3

		      color	NULL

		      coordIndex	[ 0, 1, 2, 3, -1 ]
		      normal	NULL

		      texCoord	NULL

		      ccw	FALSE
		      solid	TRUE
		      creaseAngle	3
		    }

		  }
		]
		translation	-0.225858 -1.0243 -3.50008
		rotation	1 0 0  1.5708
		scale	1 1 1
	      }

	      collide	TRUE
	      proxy	NULL

	    }

	    translation	0 0 0
	  }
	  DEF VP1 Viewpoint {
	    position	0.53 -2.6 -3
	    orientation	1 0 0  1.5708
	    fieldOfView	0.785398
	    description	"Watch"
	  }
	  DEF Light1 DirectionalLight {
	    direction	0.613714 0.705321 0.354789
	  }
	  DEF Sound1 Sound {
	    source	DEF sploit AudioClip {
	      url	"drip2.wav"
	      startTime	0
	    }

	  }
	]
      }
    ]
  }

}
ROUTE enterWorldScript.startTime TO Rippler.init
ROUTE TickTock.time TO Rippler.rippleNow
ROUTE touchSensorTrigger_7.touchTime TO Rippler.clicked
ROUTE touchSensorTrigger_7.hitPoint_changed TO Rippler.set_mousePos
ROUTE enterWorldScript.firstTime TO enterWorldTimeSensor.set_enabled
ROUTE enterWorldTimeSensor.time TO enterWorldScript.triggerIn
ROUTE Rippler.coordIndicesOut TO theIFS_8.set_coordIndex
ROUTE touchSensorTrigger_7.touchTime TO sploit.set_startTime
