#X3D V3.0 utf8 Titania V0.6.8

META "comment" "World of Titania"
META "created" "Thu, 08 May 2014 13:51:27 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.6.8, http://titania.create3000.de"
META "modified" "Sun, 11 May 2014 11:52:02 GMT"

PROTO Rotor [
  inputOutput SFNode     metadata MetadataString { }
  inputOutput SFBool     enabled TRUE
  inputOutput SFTime     cycleInterval 1
  inputOutput SFVec3f    axis 0 0 1
  inputOutput SFFloat    angle 0
  inputOutput SFBool     loop FALSE
  inputOutput SFTime     startTime 0
  inputOutput SFTime     stopTime 0
  outputOnly  SFRotation value_changed
]
{
  PROTO Fields [
    inputOutput SFVec3f axis 0 0 1
    inputOutput SFFloat angle 0
  ]
  {
    Group { }
  }

  DEF Timer TimeSensor {
    enabled IS enabled
    cycleInterval IS cycleInterval
    loop IS loop
    startTime IS startTime
    stopTime IS stopTime
  }

  DEF Interpolator OrientationInterpolator {
    key [
      0,
      0.25,
      0.5,
      0.75,
      1
    ]
    keyValue [
      0 0 1 0,
      0 0 1 1.5708,
      0 0 1 3.14159,
      0 0 1 4.71239,
      0 0 1 0
    ]
    value_changed IS value_changed
  }

  DEF Rotor Script {
    inputOnly      SFVec3f set_axis
    inputOnly      SFFloat set_angle
    initializeOnly SFNode  interpolator USE Interpolator
    initializeOnly SFNode  fields DEF Fields Fields {
      axis IS axis
      angle IS angle
    }

    url "vrmlscript:

function initialize ()
{
	eventsProcessed ();
}

function set_axis ()
{ }

function set_angle ()
{ }

function eventsProcessed ()
{
	var keyValue = interpolator .keyValue;

	for (var i = 0; i < 4; ++ i)
		keyValue [i] = new SFRotation (fields .axis, fields .angle + 2 * Math .PI / 4 * i);
	
	keyValue [4] = keyValue [0];
}
"
  }

  ROUTE Timer.fraction_changed TO Interpolator.set_fraction
  ROUTE Fields.axis_changed TO Rotor.set_axis
  ROUTE Fields.angle_changed TO Rotor.set_angle
}

DEF Export1 Transform {
  translation 0 1.23317 0
  children Shape {
    appearance Appearance {
      material Material { }
    }
    geometry Text {
      string "EXPORT statement 1"
      fontStyle FontStyle {
        justify [
          "MIDDLE",
          "MIDDLE"
        ]
      }
    }
  }
}

DEF Export2 Transform {
  children Shape {
    appearance Appearance {
      material Material { }
    }
    geometry Text {
      string "EXPORT statement 2"
      fontStyle FontStyle {
        justify [
          "MIDDLE",
          "MIDDLE"
        ]
      }
    }
  }
}

DEF Export3 Transform {
  translation 0 -1.25334 0
  children Shape {
    appearance Appearance {
      material Material { }
    }
    geometry Text {
      string "EXPORT statement 3"
      fontStyle FontStyle {
        justify [
          "MIDDLE",
          "MIDDLE"
        ]
      }
    }
  }
}

EXPORT Export1 AS A
EXPORT Export1 AS B
EXPORT Export1
EXPORT Export2
EXPORT Export3
