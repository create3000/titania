#X3D V3.0 utf8 Titania

Viewpoint {
  position 0 0 20
}

Shape {
  appearance Appearance {
    material Material {
      diffuseColor 0.8 0.1 0
    }
  }
  geometry DEF Gear IndexedFaceSet {
    coordIndex [ 0, 1, 2, 4, 3, -1, 3, 4, 5, 7, 6, -1, 6, 7, 8, 10, 9, -1, 9, 10, 11, 13, 12, -1, 12, 13, 14, 16, 15, -1, 15, 16, 17, 19, 18, -1, 18, 19, 20, 22, 21, -1, 21, 22, 23, 25, 24, -1, 24, 25, 26, 28, 27, -1, 27, 28, 29, 31, 30, -1, 30, 31, 32, 34, 33, -1, 33, 34, 35, 37, 36, -1, 41, 42, 43, 44, -1, 45, 46, 47, 48, -1, 49, 50, 51, 52, -1, 53, 54, 55, 56, -1, 57, 58, 59, 60, -1, 61, 62, 63, 64, -1, 65, 66, 67, 68, -1, 69, 70, 71, 72, -1, 73, 74, 75, 76, -1, 77, 78, 79, 80, -1, 81, 82, 83, 84, -1, 85, 86, 87, 88, -1, 89, 92, 93, 91, 90, -1, 92, 95, 96, 94, 93, -1, 95, 98, 99, 97, 96, -1, 98, 101, 102, 100, 99, -1, 101, 104, 105, 103, 102, -1, 104, 107, 108, 106, 105, -1, 107, 110, 111, 109, 108, -1, 110, 113, 114, 112, 111, -1, 113, 116, 117, 115, 114, -1, 116, 119, 120, 118, 117, -1, 119, 122, 123, 121, 120, -1, 122, 125, 126, 124, 123, -1, 127, 128, 129, 130, -1, 131, 132, 133, 134, -1, 135, 136, 137, 138, -1, 139, 140, 141, 142, -1, 143, 144, 145, 146, -1, 147, 148, 149, 150, -1, 151, 152, 153, 154, -1, 155, 156, 157, 158, -1, 159, 160, 161, 162, -1, 163, 164, 165, 166, -1, 167, 168, 169, 170, -1, 171, 172, 173, 174, -1, 175, 176, 178, 177, -1, 177, 178, 180, 179, -1, 179, 180, 182, 181, -1, 181, 182, 184, 183, -1, 183, 184, 186, 185, -1, 185, 186, 188, 187, -1, 187, 188, 190, 189, -1, 189, 190, 192, 191, -1, 191, 192, 194, 193, -1, 193, 194, 196, 195, -1, 195, 196, 198, 197, -1, 197, 198, 200, 199, -1, 199, 200, 202, 201, -1, 201, 202, 204, 203, -1, 203, 204, 206, 205, -1, 205, 206, 208, 207, -1, 207, 208, 210, 209, -1, 209, 210, 212, 211, -1, 211, 212, 214, 213, -1, 213, 214, 216, 215, -1, 215, 216, 218, 217, -1, 217, 218, 220, 219, -1, 219, 220, 222, 221, -1, 221, 222, 224, 223, -1, 223, 224, 226, 225, -1, 225, 226, 228, 227, -1, 227, 228, 230, 229, -1, 229, 230, 232, 231, -1, 231, 232, 234, 233, -1, 233, 234, 236, 235, -1, 235, 236, 238, 237, -1, 237, 238, 240, 239, -1, 239, 240, 242, 241, -1, 241, 242, 244, 243, -1, 243, 244, 246, 245, -1, 245, 246, 248, 247, -1, 247, 248, 250, 249, -1, 249, 250, 252, 251, -1, 251, 252, 254, 253, -1, 253, 254, 256, 255, -1, 255, 256, 258, 257, -1, 257, 258, 260, 259, -1, 259, 260, 262, 261, -1, 261, 262, 264, 263, -1, 263, 264, 266, 265, -1, 265, 266, 268, 267, -1, 267, 268, 270, 269, -1, 269, 270, 176, 175, -1, 271, 272, 274, 273, -1, 273, 274, 276, 275, -1, 275, 276, 278, 277, -1, 277, 278, 280, 279, -1, 279, 280, 282, 281, -1, 281, 282, 284, 283, -1, 283, 284, 286, 285, -1, 285, 286, 288, 287, -1, 287, 288, 290, 289, -1, 289, 290, 292, 291, -1, 291, 292, 294, 293, -1, 293, 294, 272, 271, -1 ]
    coord Coordinate {
      point [ 1 0 0.5, 3 0 0.5, 2.77164 1.14805 0.5, 0.866025 0.5 0.5, 2.59808 1.5 0.5, 1.82628 2.38006 0.5, 0.5 0.866025 0.5, 1.5 2.59808 0.5, 0.391579 2.97433 0.5, 6.12323e-17 1 0.5, 1.83697e-16 3 0.5, -1.14805 2.77164 0.5, -0.5 0.866025 0.5, -1.5 2.59808 0.5, -2.38006 1.82628 0.5, -0.866025 0.5 0.5, -2.59808 1.5 0.5, -2.97433 0.391579 0.5, -1 1.22465e-16 0.5, -3 3.67394e-16 0.5, -2.77164 -1.14805 0.5, -0.866025 -0.5 0.5, -2.59808 -1.5 0.5, -1.82628 -2.38006 0.5, -0.5 -0.866025 0.5, -1.5 -2.59808 0.5, -0.391579 -2.97433 0.5, -1.83697e-16 -1 0.5, -5.51091e-16 -3 0.5, 1.14805 -2.77164 0.5, 0.5 -0.866025 0.5, 1.5 -2.59808 0.5, 2.38006 -1.82628 0.5, 0.866025 -0.5 0.5, 2.59808 -1.5 0.5, 2.97433 -0.391579 0.5, 1 -2.44929e-16 0.5, 3 -7.34788e-16 0.5, 0 0 0, 0 0 0, 0 0 0, 3 0 0.5, 4.95722 0.652631 0.5, 4.82963 1.2941 0.5, 2.77164 1.14805 0.5, 2.59808 1.5 0.5, 3.96677 3.04381 0.5, 3.53553 3.53553 0.5, 1.82628 2.38006 0.5, 1.5 2.59808 0.5, 1.91342 4.6194 0.5, 1.2941 4.82963 0.5, 0.391579 2.97433 0.5, 1.83697e-16 3 0.5, -0.652631 4.95722 0.5, -1.2941 4.82963 0.5, -1.14805 2.77164 0.5, -1.5 2.59808 0.5, -3.04381 3.96677 0.5, -3.53553 3.53553 0.5, -2.38006 1.82628 0.5, -2.59808 1.5 0.5, -4.6194 1.91342 0.5, -4.82963 1.2941 0.5, -2.97433 0.391579 0.5, -3 3.67394e-16 0.5, -4.95722 -0.652631 0.5, -4.82963 -1.2941 0.5, -2.77164 -1.14805 0.5, -2.59808 -1.5 0.5, -3.96677 -3.04381 0.5, -3.53553 -3.53553 0.5, -1.82628 -2.38006 0.5, -1.5 -2.59808 0.5, -1.91342 -4.6194 0.5, -1.2941 -4.82963 0.5, -0.391579 -2.97433 0.5, -5.51091e-16 -3 0.5, 0.652631 -4.95722 0.5, 1.2941 -4.82963 0.5, 1.14805 -2.77164 0.5, 1.5 -2.59808 0.5, 3.04381 -3.96677 0.5, 3.53553 -3.53553 0.5, 2.38006 -1.82628 0.5, 2.59808 -1.5 0.5, 4.6194 -1.91342 0.5, 4.82963 -1.2941 0.5, 2.97433 -0.391579 0.5, 1 0 -0.5, 3 0 -0.5, 2.77164 1.14805 -0.5, 0.866025 0.5 -0.5, 2.59808 1.5 -0.5, 1.82628 2.38006 -0.5, 0.5 0.866025 -0.5, 1.5 2.59808 -0.5, 0.391579 2.97433 -0.5, 6.12323e-17 1 -0.5, 1.83697e-16 3 -0.5, -1.14805 2.77164 -0.5, -0.5 0.866025 -0.5, -1.5 2.59808 -0.5, -2.38006 1.82628 -0.5, -0.866025 0.5 -0.5, -2.59808 1.5 -0.5, -2.97433 0.391579 -0.5, -1 1.22465e-16 -0.5, -3 3.67394e-16 -0.5, -2.77164 -1.14805 -0.5, -0.866025 -0.5 -0.5, -2.59808 -1.5 -0.5, -1.82628 -2.38006 -0.5, -0.5 -0.866025 -0.5, -1.5 -2.59808 -0.5, -0.391579 -2.97433 -0.5, -1.83697e-16 -1 -0.5, -5.51091e-16 -3 -0.5, 1.14805 -2.77164 -0.5, 0.5 -0.866025 -0.5, 1.5 -2.59808 -0.5, 2.38006 -1.82628 -0.5, 0.866025 -0.5 -0.5, 2.59808 -1.5 -0.5, 2.97433 -0.391579 -0.5, 1 -2.44929e-16 -0.5, 3 -7.34788e-16 -0.5, 2.77164 1.14805 -0.5, 4.82963 1.2941 -0.5, 4.95722 0.652631 -0.5, 3 0 -0.5, 1.82628 2.38006 -0.5, 3.53553 3.53553 -0.5, 3.96677 3.04381 -0.5, 2.59808 1.5 -0.5, 0.391579 2.97433 -0.5, 1.2941 4.82963 -0.5, 1.91342 4.6194 -0.5, 1.5 2.59808 -0.5, -1.14805 2.77164 -0.5, -1.2941 4.82963 -0.5, -0.652631 4.95722 -0.5, 1.83697e-16 3 -0.5, -2.38006 1.82628 -0.5, -3.53553 3.53553 -0.5, -3.04381 3.96677 -0.5, -1.5 2.59808 -0.5, -2.97433 0.391579 -0.5, -4.82963 1.2941 -0.5, -4.6194 1.91342 -0.5, -2.59808 1.5 -0.5, -2.77164 -1.14805 -0.5, -4.82963 -1.2941 -0.5, -4.95722 -0.652631 -0.5, -3 3.67394e-16 -0.5, -1.82628 -2.38006 -0.5, -3.53553 -3.53553 -0.5, -3.96677 -3.04381 -0.5, -2.59808 -1.5 -0.5, -0.391579 -2.97433 -0.5, -1.2941 -4.82963 -0.5, -1.91342 -4.6194 -0.5, -1.5 -2.59808 -0.5, 1.14805 -2.77164 -0.5, 1.2941 -4.82963 -0.5, 0.652631 -4.95722 -0.5, -5.51091e-16 -3 -0.5, 2.38006 -1.82628 -0.5, 3.53553 -3.53553 -0.5, 3.04381 -3.96677 -0.5, 1.5 -2.59808 -0.5, 2.97433 -0.391579 -0.5, 4.82963 -1.2941 -0.5, 4.6194 -1.91342 -0.5, 2.59808 -1.5 -0.5, 3 0 0.5, 3 0 -0.5, 4.95722 0.652631 0.5, 4.95722 0.652631 -0.5, 4.82963 1.2941 0.5, 4.82963 1.2941 -0.5, 2.77164 1.14805 0.5, 2.77164 1.14805 -0.5, 2.59808 1.5 0.5, 2.59808 1.5 -0.5, 3.96677 3.04381 0.5, 3.96677 3.04381 -0.5, 3.53553 3.53553 0.5, 3.53553 3.53553 -0.5, 1.82628 2.38006 0.5, 1.82628 2.38006 -0.5, 1.5 2.59808 0.5, 1.5 2.59808 -0.5, 1.91342 4.6194 0.5, 1.91342 4.6194 -0.5, 1.2941 4.82963 0.5, 1.2941 4.82963 -0.5, 0.391579 2.97433 0.5, 0.391579 2.97433 -0.5, 1.83697e-16 3 0.5, 1.83697e-16 3 -0.5, -0.652631 4.95722 0.5, -0.652631 4.95722 -0.5, -1.2941 4.82963 0.5, -1.2941 4.82963 -0.5, -1.14805 2.77164 0.5, -1.14805 2.77164 -0.5, -1.5 2.59808 0.5, -1.5 2.59808 -0.5, -3.04381 3.96677 0.5, -3.04381 3.96677 -0.5, -3.53553 3.53553 0.5, -3.53553 3.53553 -0.5, -2.38006 1.82628 0.5, -2.38006 1.82628 -0.5, -2.59808 1.5 0.5, -2.59808 1.5 -0.5, -4.6194 1.91342 0.5, -4.6194 1.91342 -0.5, -4.82963 1.2941 0.5, -4.82963 1.2941 -0.5, -2.97433 0.391579 0.5, -2.97433 0.391579 -0.5, -3 3.67394e-16 0.5, -3 3.67394e-16 -0.5, -4.95722 -0.652631 0.5, -4.95722 -0.652631 -0.5, -4.82963 -1.2941 0.5, -4.82963 -1.2941 -0.5, -2.77164 -1.14805 0.5, -2.77164 -1.14805 -0.5, -2.59808 -1.5 0.5, -2.59808 -1.5 -0.5, -3.96677 -3.04381 0.5, -3.96677 -3.04381 -0.5, -3.53553 -3.53553 0.5, -3.53553 -3.53553 -0.5, -1.82628 -2.38006 0.5, -1.82628 -2.38006 -0.5, -1.5 -2.59808 0.5, -1.5 -2.59808 -0.5, -1.91342 -4.6194 0.5, -1.91342 -4.6194 -0.5, -1.2941 -4.82963 0.5, -1.2941 -4.82963 -0.5, -0.391579 -2.97433 0.5, -0.391579 -2.97433 -0.5, -5.51091e-16 -3 0.5, -5.51091e-16 -3 -0.5, 0.652631 -4.95722 0.5, 0.652631 -4.95722 -0.5, 1.2941 -4.82963 0.5, 1.2941 -4.82963 -0.5, 1.14805 -2.77164 0.5, 1.14805 -2.77164 -0.5, 1.5 -2.59808 0.5, 1.5 -2.59808 -0.5, 3.04381 -3.96677 0.5, 3.04381 -3.96677 -0.5, 3.53553 -3.53553 0.5, 3.53553 -3.53553 -0.5, 2.38006 -1.82628 0.5, 2.38006 -1.82628 -0.5, 2.59808 -1.5 0.5, 2.59808 -1.5 -0.5, 4.6194 -1.91342 0.5, 4.6194 -1.91342 -0.5, 4.82963 -1.2941 0.5, 4.82963 -1.2941 -0.5, 2.97433 -0.391579 0.5, 2.97433 -0.391579 -0.5, 1 0 -0.5, 1 0 0.5, 0.866025 0.5 -0.5, 0.866025 0.5 0.5, 0.5 0.866025 -0.5, 0.5 0.866025 0.5, 6.12323e-17 1 -0.5, 6.12323e-17 1 0.5, -0.5 0.866025 -0.5, -0.5 0.866025 0.5, -0.866025 0.5 -0.5, -0.866025 0.5 0.5, -1 1.22465e-16 -0.5, -1 1.22465e-16 0.5, -0.866025 -0.5 -0.5, -0.866025 -0.5 0.5, -0.5 -0.866025 -0.5, -0.5 -0.866025 0.5, -1.83697e-16 -1 -0.5, -1.83697e-16 -1 0.5, 0.5 -0.866025 -0.5, 0.5 -0.866025 0.5, 0.866025 -0.5 -0.5, 0.866025 -0.5 0.5, 1 -2.44929e-16 -0.5, 1 -2.44929e-16 0.5 ]
    }
  }
}

Script {
  inputOutput    SFFloat teeth 12
  inputOutput    SFFloat toothDepth 2
  inputOutput    SFFloat innerRadius 1
  inputOutput    SFFloat outerRadius 4
  inputOutput    SFFloat width 1
  initializeOnly SFNode  gear USE Gear

  url "vrmlscript:

function initialize ()
{
	print ('### Generating gear ...');

	var indices = new MFInt32 ();
	var points  = new MFVec3f ();

	var cos = Math .cos;
	var sin = Math .sin;

	var r0 = innerRadius;
	var r1 = outerRadius - toothDepth / 2;
	var r2 = outerRadius + toothDepth / 2;
	var da = 2 * Math .PI / teeth / 4;


	// Generate front face indices
	
	for (var i = 0; i < teeth; ++ i)
	{
		var index = i * 3;
	
		indices [indices .length] = index;
		indices [indices .length] = index + 1;
		indices [indices .length] = index + 2;
		indices [indices .length] = index + 4;
		indices [indices .length] = index + 3;
		indices [indices .length] = -1;
	}

	// Generate front face points
	
	for (var i = 0; i < teeth + 1; ++ i)
	{
		var angle = i * 2 * Math .PI / teeth;

		points [points .length] = new SFVec3f (r0 * cos (angle), r0 * sin (angle), width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle), r1 * sin (angle), width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle + 3 * da), r1 * sin (angle + 3 * da), width * 0.5);
	}
	
	points .length = points .length - 1;
	
	points [points .length] = new SFVec3f ();
	points [points .length] = new SFVec3f ();
	points [points .length] = new SFVec3f ();


	// Generate front sides of teeth indices

	for (var i = 0; i < teeth; ++ i)
	{
		var index = i * 4;
	
		indices [indices .length] = points .length + index;
		indices [indices .length] = points .length + index + 1;
		indices [indices .length] = points .length + index + 2;
		indices [indices .length] = points .length + index + 3;
		indices [indices .length] = -1;
	}

	// Generate front sides of teeth points

	for (var i = 0; i < teeth; ++ i)
	{
		var angle = i * 2 * Math .PI / teeth;
		
		points [points .length] = new SFVec3f (r1 * cos (angle),          r1 * sin (angle),          width * 0.5);
		points [points .length] = new SFVec3f (r2 * cos (angle + da),     r2 * sin (angle + da),     width * 0.5);
		points [points .length] = new SFVec3f (r2 * cos (angle + 2 * da), r2 * sin (angle + 2 * da), width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle + 3 * da), r1 * sin (angle + 3 * da), width * 0.5);
	}


	// Generate back face indices
	
	for (var i = 0; i < teeth; ++ i)
	{
		var index = i * 3;
	
		indices [indices .length] = points .length + index;
		indices [indices .length] = points .length + index + 3;
		indices [indices .length] = points .length + index + 4;
		indices [indices .length] = points .length + index + 2;
		indices [indices .length] = points .length + index + 1;
		indices [indices .length] = -1;
	}

	// Generate back face points
	
	for (var i = 0; i < teeth + 1; ++ i)
	{
		var angle = i * 2 * Math .PI / teeth;

		points [points .length] = new SFVec3f (r0 * cos (angle), r0 * sin (angle), -width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle), r1 * sin (angle), -width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle + 3 * da), r1 * sin (angle + 3 * da), -width * 0.5);
	}

	points .length = points .length - 1;


	// Generate back sides of teeth indices

	for (var i = 0; i < teeth; ++ i)
	{
		var index = i * 4;
	
		indices [indices .length] = points .length + index;
		indices [indices .length] = points .length + index + 1;
		indices [indices .length] = points .length + index + 2;
		indices [indices .length] = points .length + index + 3;
		indices [indices .length] = -1;
	}

	// Generate front sides of teeth points

	for (var i = 0; i < teeth; ++ i)
	{
		var angle = i * 2 * Math .PI / teeth;
		
		points [points .length] = new SFVec3f (r1 * cos (angle + 3 * da), r1 * sin (angle + 3 * da), -width * 0.5);
		points [points .length] = new SFVec3f (r2 * cos (angle + 2 * da), r2 * sin (angle + 2 * da), -width * 0.5);
		points [points .length] = new SFVec3f (r2 * cos (angle + da),     r2 * sin (angle + da),     -width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle),          r1 * sin (angle),          -width * 0.5);	
	}


	// Generate outward faces of teeth indices

	for (var i = 0; i < teeth * 4; ++ i)
	{
		var index = i * 2;
	
		indices [indices .length] = points .length + index;
		indices [indices .length] = points .length + index + 1;
		indices [indices .length] = points .length + index + 3;
		indices [indices .length] = points .length + index + 2;
		indices [indices .length] = -1;
	}

	indices [indices .length - 3] = points .length + 1;
	indices [indices .length - 2] = points .length;
	
	// Generate outward faces of teeth points
	
	for (var i = 0; i < teeth; ++ i)
	{
	   var angle = i * 2 * Math .PI / teeth;
	   
		points [points .length] = new SFVec3f (r1 * cos (angle), r1 * sin (angle),  width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle), r1 * sin (angle), -width * 0.5);

		points [points .length] = new SFVec3f (r2 * cos (angle + da),   r2 * sin (angle + da),   width * 0.5);
		points [points .length] = new SFVec3f (r2 * cos (angle + da),   r2 * sin (angle + da),  -width * 0.5);

		points [points .length] = new SFVec3f (r2 * cos (angle + 2 * da), r2 * sin (angle + 2 * da),  width * 0.5);
		points [points .length] = new SFVec3f (r2 * cos (angle + 2 * da), r2 * sin (angle + 2 * da), -width * 0.5);

		points [points .length] = new SFVec3f (r1 * cos (angle + 3 * da), r1 * sin (angle + 3 * da),  width * 0.5);
		points [points .length] = new SFVec3f (r1 * cos (angle + 3 * da), r1 * sin (angle + 3 * da), -width * 0.5);
	}


	// Generate inside radius cylinder points
	
	for (var i = 0; i < teeth; ++ i)
	{
		var index = i * 2;
	
		indices [indices .length] = points .length + index;
		indices [indices .length] = points .length + index + 1;
		indices [indices .length] = points .length + index + 3;
		indices [indices .length] = points .length + index + 2;
		indices [indices .length] = -1;
	}
	
	indices [indices .length - 3] = points .length + 1;
	indices [indices .length - 2] = points .length;
		
	// Generate inside radius cylinder indices
	
	for (var i = 0; i < teeth + 1; ++ i)
	{
		var angle = i * 2 * Math .PI / teeth;
		points [points .length] = new SFVec3f (r0 * cos (angle), r0 * sin (angle), -width * 0.5);
		points [points .length] = new SFVec3f (r0 * cos (angle), r0 * sin (angle),  width * 0.5);
	}

	gear .set_coordIndex = indices;
	gear .coord .point   = points;

	print ('### Generating gear done.');
}
"
}
