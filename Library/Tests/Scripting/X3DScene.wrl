#VRML V2.0 utf8

PROFILE Interchange

COMPONENT PointingDeviceSensor : 1
COMPONENT Scripting : 1

META "title" "Scene"
META "generator" "Titania X3D Browser"
META "generator" "x3dtidy"

EXTERNPROTO ExternProto []
"ExternProto.wrl"

PROTO Test [
	field SFBool name TRUE
]
{
  Group { }
}

DEF Touch TouchSensor { }

Shape {
  appearance Appearance {
    material Material { }
  }
  geometry Box { }
}

DEF A Transform { }
DEF B Group { }

DEF Debug Script {
  eventIn SFTime set_time

  url "vrmlscript:

function set_time (value, time)
{
	print ();
	print ('+ Scene +++++++++++++++++++++++++++++++++++++++++++++++');	
	print ('+++++++++++++++++++++++++++++++++++++++++++++++++++++++');

	var scene = Browser .currentScene;

	print ();
	print (scene);

	print ();
	print ('specificationVersion: ' + scene .specificationVersion);	
	print ('encoding:             ' + scene .encoding);	
	print ('worldURL:             ' + scene .worldURL);

	print ('profile:              ' + scene .profile);
	print ('components:           ' + scene .components);

	for (var i in scene .components)
		print ('\t' + scene .components [i] .name);

	print ('externprotos:         ' + scene .externprotos);

	var externprotos = scene .externprotos;

	for (var i in externprotos)
	{
		print ('\t' + 'name:           ' + externprotos [i] .name);
		print ('\t' + 'fields:         ' + externprotos [i] .fields);
		
		var fields = externprotos [i] .fields;
		
		for (var f in fields)
		{
			print ('\t\t' + 'name:       ' + fields [f] .name);
			print ('\t\t' + 'accessType: ' + fields [f] .accessType);
			print ('\t\t' + 'dataType:   ' + fields [f] .dataType);
		}
		
		print ('\t' + 'urls:           ' + externprotos [i] .urls);
		print ('\t' + 'isExternProto:  ' + externprotos [i] .isExternProto);
		print ('\t' + 'loadState:      ' + externprotos [i] .loadState);
		
		externprotos [i] .loadNow ();

		print ('\t' + 'loadState:      ' + externprotos [i] .loadState);
		print ('\t' + 'createInstance: ' + externprotos [i] .newInstance ());
	}

	print ('protos:              ' + scene .protos);

	var protos = scene .protos;

	for (var i in protos)
	{
		print ('\t' + 'name:           ' + protos [i] .name);
		print ('\t' + 'fields:         ' + protos [i] .fields);
		
		var fields = protos [i] .fields;
		
		for (var f in fields)
		{
			print ('\t\t' + 'name:       ' + fields [f] .name);
			print ('\t\t' + 'accessType: ' + fields [f] .accessType);
			print ('\t\t' + 'dataType:   ' + fields [f] .dataType);
		}
		
		print ('\t' + 'isExternProto:  ' + protos [i] .isExternProto);
		print ('\t' + 'createInstance: ' + protos [i] .newInstance ());
	}

	print ('routes:              ' + scene .routes);

	var routes = scene .routes;

	for (var i in routes)
	{
		print ('\t' + 'sourceNode:       ' + routes [i] .sourceNode .getNodeName ());
		print ('\t' + 'sourceField:      ' + routes [i] .sourceField);
		print ('\t' + 'destinationNode:  ' + routes [i] .destinationNode .getNodeName ());
		print ('\t' + 'destinationField: ' + routes [i] .destinationField);
	}

	print ();
	print ('createNode:           ' + scene .createNode ('Transform'));
	print ('createProto:          ' + scene .createProto ('Test'));

	print ();
	print ('+ Metadata handling +++++++++++++++++++++++++++++++++');
	
	print ('title: ' + scene .getMetaData ('title'));
	print ('title: ' + scene .getMetaData ('generator'));

	scene .setMetaData ('time', time);

	print ('time:  ' + scene .getMetaData ('time'));

	print ();
	print ('+ Named node handling +++++++++++++++++++++++++++++++++');	

	print ();
	print ('getNamedNode: ' + scene .getNamedNode ('A'));
	print ('getNamedNode: ' + scene .getNamedNode ('B'));
	
	try
	{
		print ('getNamedNode: ' + scene .getNamedNode ('C'));
	}
	catch (error)
	{
		print (error);
	}
	
	var a = scene .getNamedNode ('A');

	print ();
	print ('getNamedNode: ' + a);
	
	scene .updateNamedNode ('C', a);
	print ('updateNamedNode: ' + a .getNodeName ());

	print ();
	print ('+ Route handling ++++++++++++++++++++++++++++++++++++++');	
	
	var route = scene .addRoute (scene .getNamedNode ('C'), 'children', scene .getNamedNode ('B'), 'children');

	print ();
	print ('addRoute:             ' + route);

	var routes = scene .routes;

	for (var i in routes)
	{
		print ();
		print ('\t' + 'sourceNode:       ' + routes [i] .sourceNode .getNodeName ());
		print ('\t' + 'sourceField:      ' + routes [i] .sourceField);
		print ('\t' + 'destinationNode:  ' + routes [i] .destinationNode .getNodeName ());
		print ('\t' + 'destinationField: ' + routes [i] .destinationField);
	}
	
	scene .deleteRoute (route);
	print ('deleteRoute:             ' + route);

	var routes = scene .routes;

	for (var i in routes)
	{
		print ();
		print ('\t' + 'sourceNode:       ' + routes [i] .sourceNode .getNodeName ());
		print ('\t' + 'sourceField:      ' + routes [i] .sourceField);
		print ('\t' + 'destinationNode:  ' + routes [i] .destinationNode .getNodeName ());
		print ('\t' + 'destinationField: ' + routes [i] .destinationField);
	}

	print ('+++++++++++++++++++++++++++++++++++++++++++++++++++++++');
	
}
"
}

ROUTE Touch.touchTime TO Debug.set_time
