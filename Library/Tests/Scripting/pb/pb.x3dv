#X3D V3.3 utf8 Titania V0.7.6

META "comment" "World of Titania"
META "created" "Sun, 01 Jun 2014 03:00:06 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.6, http://titania.create3000.de"
META "modified" "Wed, 31 Dec 2014 07:42:19 GMT"

DEF Sunset Background {
  skyAngle [
    0.8,
    1.2,
    1.5,
    1.55,
    1.5708
  ]
  skyColor [
    0.0196078 0.0196078 0.0196078,
    0.054902 0.0705882 0.0862745,
    0.203922 0.243137 0.313726,
    0.541176 0.462745 0.435294,
    0.745098 0.541176 0.376471,
    0.890196 0.537255 0.172549
  ]
  groundColor 0 0 0
}

Transform {
  children [
    DEF _1 TouchSensor {
      description "Peaseblossom"
    }
    Transform {
      translation -1.64145 0.0135657 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

Transform {
  children [
    DEF _2 TouchSensor {
      description "Spidermonkey"
    }
    Transform {
      translation 1.37013 0 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

DEF Script1 Script {
  inputOnly SFTime set_time

    url [
#     "peaseblossom:
#print ('this: ', this);
#    "
#
#
 "peaseblossom:

function fibonacci_recursive (value)
{
	if (value === 0)
		return 0;

	if (value === 1)
		return 1;

	return fibonacci_recursive (value - 1) + fibonacci_recursive (value - 2);
}

function fibonacci_iterative (value)
{
	// 5.14 s

	print ('fibonacci_iterative: ');
	print ('fibonacci_iterative: value: ', value);

	if (value === 0)
		return 0;

	if (value === 1)
		return 1;

	var
		result,
		h1 = 0,
		h2 = 1;

	for (var i = 1; i < value; ++ i)
	{
		result = h1 + h2;
		h1     = h2;
		h2     = result;
	}

	return result;
}

function fibonacci_iterative1 (o, value)
{
	print ('fibonacci_iterative1: ');
	print ('fibonacci_iterative1: value: ', value);

	if (value === 0)
		return 0;

	if (value === 1)
		return 1;

	o .h1 = 0;
	o .h2 = 1;

	for (var i = 1; i < value; i += 1)
	{
		o .result = o .h1 + o .h2;
		o .h1     = o .h2;
		o .h2     = o .result;
	}

	return o .result;
}

function set_time (value, time)
{
	print ();
	print ('set_time:');
	print ('set_time: value: ', value);
	print ('set_time: time:  ', time);
	print ('set_time: now:   ', Date .now () / 1000);

	var f = 1;

	var t0 = Date .now ();
	print ();
	print ('fibonacci_iterative: ', fibonacci_iterative (800 * f));
	print ('fibonacci_iterative: ', fibonacci_iterative (8000000 * f));
	print ('time: ',                (Date .now () - t0) / 1000);

	var t0 = Date .now ();
	print ();
	print ('fibonacci_iterative1: ', fibonacci_iterative1 ({ }, 800 * f));
	print ('fibonacci_iterative1: ', fibonacci_iterative1 ({ }, 800000 * f));
	print ('time: ',                 (Date .now () - t0) / 1000);

	var t0 = Date .now ();
	print ();
	print ('fibonacci_recursive: ', fibonacci_recursive (24));
	print ('calls: ',               fibonacci_iterative (24 + 2) + 1);
	print ('time: ',                (Date .now () - t0) / 1000);
}
"
"peaseblossom:"
]
  directOutput TRUE
}

DEF Script2 Script {
  inputOnly SFTime   set_time

  url "javascript:
function fibonacci_recursive (value)
{
	if (value === 0)
		return 0;

	if (value === 1)
		return 1;

	return fibonacci_recursive (value - 1) + fibonacci_recursive (value - 2);
}
 
function fibonacci_iterative (o, value)
{
	if (value === 0)
		return 0;

	if (value === 1)
		return 1;

	o .h1 = 0;
	o .h2 = 1;

	for (var i = 1; i < value; ++ i)
	{
		o .result = o .h1 + o .h2;
		o .h1     = o .h2;
		o .h2     = o .result;
	}

	return o .result;
}

function set_time (value, time)
{
	var t0 = Date .now ();
	print ();
	print ('fibonacci_iterative: ', fibonacci_iterative ({ }, 800));
	print ('fibonacci_iterative: ', fibonacci_iterative ({ }, 8000000));
	print ('time: ', (Date .now () - t0) / 1000);

	var t0 = Date .now ();
	print ();
	print ('fibonacci_recursive: ', fibonacci_recursive (24));
	print ('fibonacci_recursive: ', fibonacci_iterative ({ }, 24 + 2) + 1);
	print ('time: ', (Date .now () - t0) / 1000);
}
"
  directOutput TRUE
}

ROUTE _2.touchTime TO Script2.set_time
ROUTE _1.touchTime TO Script1.set_time
