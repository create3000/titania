#X3D V3.3 utf8 Titania V0.7.0

META "comment" "World of Titania"
META "created" "Sun, 01 Jun 2014 03:00:06 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.0, http://titania.create3000.de"
META "modified" "Sat, 14 Jun 2014 15:13:24 GMT"

DEF Sunset Background {
  skyAngle [
    0.8,
    1.2,
    1.5,
    1.55,
    1.5708
  ]
  skyColor [
    0.0196078 0.0196078 0.0196078,
    0.054902 0.0705882 0.0862745,
    0.203922 0.243137 0.313726,
    0.541176 0.462745 0.435294,
    0.745098 0.541176 0.376471,
    0.890196 0.537255 0.172549
  ]
  groundColor 0 0 0
}

Transform {
  children [
    DEF _1 TouchSensor {
      description "Script 1"
    }
    Transform {
      translation -1.64145 0.0135657 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

Transform {
  children [
    DEF _2 TouchSensor {
      description "Script 2"
    }
    Transform {
      translation 1.37013 0 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

DEF Script1 Script {
  inputOnly SFTime set_time

  url [
#   "peaseblossom:
#'';
#"
    "peaseblossom:
/*
function initialize ()
{
	//print ('test1: ', test1 ());
}

function test1 ()
{
	// single line comment

	;
	print (true);
	print (false);
	print (null);

	print ();
	print (1234.56789);
	print (0xabcdef);
	print (0o1234567);
	print (0b1010101);

	print ();
	print ('// Global object');

	print ();
	print (this);
	print (NaN);
	print (Infinity);
	print (undefined);

	var a, b, c, d;

	print ();
	print (a - (b * (c + d)));
	print (0 - 1 + 2 * 3 % 4);
	print (0 - 1 + 2 * 3 % 4 || (true && false) | 4 & 5 ^ 5 < 6 > 7 <= 8 >= 9 === 1 !== 2 == 3 != 5
	? true
	: false);

	print ();
	print (0 instanceof 0);
	print (0 in 0);
	print (a = a + b, ' : ', a += b);
	print (0 / 0);
	print (1 / 0);
	print (-1 / 0);

	print ();
	'// String';

	print ();
	print ('\\'single quoted string\\'');
	print (\"\\\"double quoted string\\\"\");

	print ();
	print ('// ObjectLiteral');

	print ({ p: 123, get p () { }, set p (value) { }, 1: 123, '': 'abc', });

	print ();
	print ('// CallExpression');

	print ();
	print (isNaN (undefined));

	function f (value, time)
	{ 'in function f'; }

	print (f ());

	//f () [1 + 2] .name .name () .name () [f () .index];
	object .name .name [1] .name [2] .name;

	print ();
	var a = 1, b = 31;

	print ();
	print ('// UnaryExpression');
	print ();
	print (delete a);
	print (void b);
	print (typeof b);
	print (++ b);
	print (-- b);
	print (+ b);
	print (- b);
	print (~ b);
	print (! b);

	print ();
	print ('// BinaryExpression');

	print ();
	print ('// MultiplicativeExpression');

	print ();
	print (a * b);
	print (a / b);
	print (a % b);
	print ('5' * 2);

	print ();
	print ('// AdditiveExpression');

	print ();

	print ('a' + 'b');
	print (a + b);
	print (a - b);

	print ();
	print ('// ShiftExpression');

	print ();
	print (a << b);
	print (a >> b);
	print (a >>> b);

	print ();
	print ('// RelationalExpression');

	print ();
	print (a < b);
	print (a > b);
	print (a <= b);
	print (a >= b);
	print (a instanceof b);
	print (a in b);

	print ();
	print ('// EqualityExpression');

	print ();
	print (a == b);
	print (a != b);

	print ();
	print ('// StrictEqual');
	
	print (undefined === undefined);
	print (false     === false);
	print (true      === true);
	print (null      === null);
	print (1         === 1);
	print (''        === '');
	print (this      === this);

	print (a !== b);
	print ();

	print ('// BitwiseExpression');

	print ();
	print (a & b);
	print (a ^ b);
	print (a | b);

	print ();
	print ('// LogicalExpression');

	print ();
	print (a && b);
	print (a || b);
	print (a ? b : c);

	print ();
	var Browser;

	print ();
	a = function () { 1 + 2; };

	print ();
	set_time;


	function set_time (value, time)
	{
		1 + 2 * 3 / 4;
		5 + 6 * 7 / 8;
	}


	var a;
	var a = set_time;
	var
		a = set_time,
		a = 1;
	print ();
	set_time;
	print ();
	var
		PI   = 3.14159,
		PI_2 = 2 * PI;
		

	'// VRMLScript';

	print (NULL);
	print (FALSE);
	print (TRUE);
	print (print);

	print ('Hellö Wöld!');

	print ((12345678901234567) << 0, ' : ', 1 / 7 + a * 1 / 3 + b * 1 / 2);

	return PI_2;
}
*/

function set_time (value, time)
{
	function i ()
	{
		var b = 0;
		
		f ();

		function f ()
		{
			return b += 1;
		};

		return f;
	}


	var f1 = i ();
	var f2 = i ();

	print (f1 === f2);
	print (f1 ());
	print (f2 ());
}
"
  ]
  directOutput TRUE
}

DEF Script2 Script {
  inputOnly SFTime set_time

  url "javascript:

function set_time (value, time)
{
	function f () { return function () { return 1 + 2; }; };

	print (time);
	print (f () === f ());
	print (f () ());
}
"
  directOutput TRUE
}

ROUTE _2.touchTime TO Script2.set_time
ROUTE _1.touchTime TO Script1.set_time
