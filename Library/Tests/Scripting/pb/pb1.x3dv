#X3D V3.3 utf8 Titania V0.7.6

META "comment" "World of Titania"
META "created" "Sun, 01 Jun 2014 03:00:06 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.6, http://titania.create3000.de"
META "modified" "Mon, 26 Jan 2015 06:31:47 GMT"

DEF Sunset Background {
  skyAngle [
    0.8,
    1.2,
    1.5,
    1.55,
    1.5708
  ]
  skyColor [
    0.0196078 0.0196078 0.0196078,
    0.054902 0.0705882 0.0862745,
    0.203922 0.243137 0.313726,
    0.541176 0.462745 0.435294,
    0.745098 0.541176 0.376471,
    0.890196 0.537255 0.172549
  ]
  groundColor 0 0 0
}

DEF PeaseBlossom_1 Transform {
  children [
    DEF _1 TouchSensor {
      description "Peaseblossom"
    }
    Transform {
      translation -1.64145 0.0135657 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

DEF SpiderMonkey_1 Transform {
  children [
    DEF _2 TouchSensor {
      description "Spidermonkey"
    }
    Transform {
      translation 1.37013 0 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

DEF PeaseBlossom Script {
  inputOnly      SFTime  set_time
  initializeOnly SFInt32 size 800000
  initializeOnly SFNode node Viewpoint {}
  initializeOnly MFInt32 array []

  url "peaseblossom:
function initialize ()
{
	array .length = 100;
}

function set_time (value, time)
{
	print ('peaseblossom:');

	var t0 = now ();
	global (8000000);
	print ('global:    ', now () - t0);

	var t0 = now ();
	field (8000000);
	print ('field:     ', now () - t0);

	var t0 = now ();
	construct (800000);
	print ('construct: ', now () - t0);

	var t0 = now ();
	add (800000);
	print ('add:       ', now () - t0);

	var t0 = now ();
	array_test (8000);
	print ('array:     ', now () - t0);
}

function global (value)
{
	for (var i = 1; i < value; ++ i)
		 size;
}

function field (value)
{
	for (var i = 1; i < value; ++ i)
		 node .isBound;
}

function construct (value)
{
	for (var i = 1; i < value; ++ i)
		 new SFVec3f (1,2,3);
}

function add (value)
{
	var v = new SFVec3f (1,2,3)

	for (var i = 1; i < value; ++ i)
		 v .add (v);
}

function array_test (value)
{
	for (var i = 0; i < value; ++ i)
		for (var index = 0, size = array .length; index < size; ++ index)
		   array [index];
}

function enumerate (o)
{
	print (o .constructor .name)

	for (var k in o)
	{
		print (k, ' = ', o [k], ' : ', k in o)
	}

	return o;
}
"
  directOutput TRUE
}

DEF SpiderMonkey Script {
  inputOnly      SFTime  set_time
  initializeOnly SFInt32 size 800000
  initializeOnly SFNode node Viewpoint {}
  initializeOnly MFInt32 array []

  url "javascript:
function initialize ()
{
	array .length = 100;
	
	print (100000000);
}

function set_time (value, time)
{
	print ('spidermonkey:');

	var t0 = Date .now ();
	global (8000000);
	print ('global:    ', (Date .now () - t0) / 1000);

	var t0 = Date .now ();
	field (8000000);
	print ('field:     ', (Date .now () - t0) / 1000);

	var t0 = Date .now ();
	construct (800000);
	print ('construct: ', (Date .now () - t0) / 1000);

	var t0 = Date .now ();
	add (800000);
	print ('add:       ', (Date .now () - t0) / 1000);

	var t0 = Date .now ();
	array_test (8000);
	print ('array:     ', (Date .now () - t0) / 1000);
}

function global (value)
{
	for (var i = 0; i < value; ++ i)
		 size;
}

function field (value)
{
	for (var i = 0; i < value; ++ i)
		 node .isBound;
}

function construct (value)
{
	for (var i = 0; i < value; ++ i)
		 new SFVec3f (1,2,3);
}

function add (value)
{
	var v = new SFVec3f (1,2,3)

	for (var i = 0; i < value; ++ i)
		 v .add (v);
}

function array_test (value)
{
	for (var i = 0; i < value; ++ i)
		for (var index = 0, size = array .length; index < size; ++ index)
		   array [index];
}
"
  directOutput TRUE
}

ROUTE _2.touchTime TO SpiderMonkey.set_time
ROUTE _1.touchTime TO PeaseBlossom.set_time
