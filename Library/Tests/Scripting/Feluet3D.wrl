#X3D V3.0 utf8 Titania 0.1

PROTO Cube [
  inputOutput SFVec3f translation 0 0 0
  inputOutput SFVec3f scale 1 1 1
]
{
  Transform {
    translation IS translation
    scale IS scale
    children Shape {
      appearance Appearance {
        material Material { }
      }
      geometry Box {
        size 1 1 1
      }
    }
  }
}

Viewpoint {
  position 1.11083 1.51093 2.13934
  orientation -0.813416 0.555992 0.170959 0.634033
  centerOfRotation 0.499875 0.499875 0.499875
}

DEF Space Group { }

DEF Timer TimeSensor {
  loop TRUE
}

DEF Felület Script {
  inputOnly      SFTime  set_time
  initializeOnly SFInt32 xDimension 16
  initializeOnly SFInt32 yDimension 16
  initializeOnly SFInt32 zDimension 16
  initializeOnly SFFloat xSpacing 0.001
  initializeOnly SFFloat ySpacing 0.001
  initializeOnly SFFloat zSpacing 0.001
  initializeOnly SFVec3f scale 0.03125 0.03125 0.03125
  initializeOnly MFNode   addChildren [ ]
  initializeOnly MFNode   removeChildren [ ]
  initializeOnly MFNode   children [ ]
  initializeOnly MFInt32  neighbourgs [ ]
  initializeOnly SFNode  space USE Space

  url "vrmlscript:

var indices = { };
var add     = { };
var remove  = { };
var count   = 3;

function initialize ()
{
	print ('*** Initialize Felület3D.');
	
	scale = new SFVec3f (1 / xDimension, 1 / yDimension, 1 / zDimension);
}

function set_time (value, time)
{
	addChildren    .length = 0;
	removeChildren .length = 0;
	
	//print ('set_time: ', value);
	
	randomCubes ();
	
	addCubes ();
	removeCubes ();

	space .addChildren    = addChildren;
	space .removeChildren = removeChildren;
}

function addCubes ()
{
	addToProcess = add;
	add = { };
	
	for (var index in addToProcess)
		addCube (index, addToProcess [index]);
}

function removeCubes ()
{
	var i = 0;

	for (var index in indices)
	{
		++ i;
		if (neighbourgs [index] != count)
			removeCube (index, indices [index]);
	}
	
	print (i);
}

function randomCubes ()
{
	for (var i = 0; i < 200; ++ i)
	{
		var x = 1 + random (xDimension - 3);
		var y = 1 + random (yDimension - 3);
		var z = 1 + random (zDimension - 3);
		
		var index = get_index (x, y, z);

		if (! indices [index])
			addCube (index, [x, y, z]);
	}
}

function addCube (index, point)
{
	var x = point [0];
	var y = point [1];
	var z = point [2];
	
	var cube           = Browser .currentScene .createProto ('Cube');
	children [index]   = cube;
	indices [index]    = point;
	addChildren [addChildren .length] = cube;
	
	cube .translation = new SFVec3f (x / xDimension + xSpacing * x, y / yDimension + ySpacing * y, z / zDimension + zSpacing * z); 
	cube .scale       = scale;
	
	add_neighbours (index, x, y, z, point);
}

function removeCube (index, point)
{
	if (! indices [index])
		return;
	
	var x = point [0];
	var y = point [1];
	var z = point [2];

	delete indices [index];
	
	removeChildren [removeChildren .length] = children [index];
	
	remove_neighbours (x, y, z);
}

function add_neighbours (index, x, y, z, point)
{
	// z - 1 plane
	
	add_neighbour (x - 1, y - 1, z - 1);
	add_neighbour (x,     y - 1, z - 1);
	add_neighbour (x + 1, y - 1, z - 1);
																
	add_neighbour (x - 1, y,     z - 1);
	add_neighbour (x,     y,     z - 1);
	add_neighbour (x + 1, y,     z - 1);
																
	add_neighbour (x - 1, y - 1, z - 1);
	add_neighbour (x,     y - 1, z - 1);
	add_neighbour (x + 1, y - 1, z - 1);
	
	// z plane
	
	add_neighbour (x - 1, y - 1, z);
	add_neighbour (x,     y - 1, z);
	add_neighbour (x + 1, y - 1, z);
								
	add_neighbour (x - 1, y,     z);
	add_neighbour (x + 1, y,     z);
								
	add_neighbour (x - 1, y - 1, z);
	add_neighbour (x,     y - 1, z);
	add_neighbour (x + 1, y - 1, z);
	
	// z + 1 plane
	
	add_neighbour (x - 1, y - 1, z + 1);
	add_neighbour (x,     y - 1, z + 1);
	add_neighbour (x + 1, y - 1, z + 1);
									
	add_neighbour (x - 1, y,     z + 1);
	add_neighbour (x,     y,     z + 1);
	add_neighbour (x + 1, y,     z + 1);
								
	add_neighbour (x - 1, y - 1, z + 1);
	add_neighbour (x,     y - 1, z + 1);
	add_neighbour (x + 1, y - 1, z + 1);
}

function add_neighbour (x, y, z)
{
	var index = get_index (x, y, z);
	
	if (index >= 0 && index < xDimension * yDimension * zDimension)
	{
		if (++ neighbourgs [index] == count)
			add [index] = [x, y, z];
	}
}

function remove_neighbours (x, y, z)
{
	// z - 1 plane
	
	// z - 1 plane
	
	remove_neighbour (x - 1, y - 1, z - 1);
	remove_neighbour (x,     y - 1, z - 1);
	remove_neighbour (x + 1, y - 1, z - 1);
																
	remove_neighbour (x - 1, y,     z - 1);
	remove_neighbour (x,     y,     z - 1);
	remove_neighbour (x + 1, y,     z - 1);
																
	remove_neighbour (x - 1, y - 1, z - 1);
	remove_neighbour (x,     y - 1, z - 1);
	remove_neighbour (x + 1, y - 1, z - 1);
	
	// z plane
	
	remove_neighbour (x - 1, y - 1, z);
	remove_neighbour (x,     y - 1, z);
	remove_neighbour (x + 1, y - 1, z);
								
	remove_neighbour (x - 1, y,     z);
	remove_neighbour (x + 1, y,     z);
								
	remove_neighbour (x - 1, y - 1, z);
	remove_neighbour (x,     y - 1, z);
	remove_neighbour (x + 1, y - 1, z);
	
	// z + 1 plane
	
	remove_neighbour (x - 1, y - 1, z + 1);
	remove_neighbour (x,     y - 1, z + 1);
	remove_neighbour (x + 1, y - 1, z + 1);
									
	remove_neighbour (x - 1, y,     z + 1);
	remove_neighbour (x,     y,     z + 1);
	remove_neighbour (x + 1, y,     z + 1);
								
	remove_neighbour (x - 1, y - 1, z + 1);
	remove_neighbour (x,     y - 1, z + 1);
	remove_neighbour (x + 1, y - 1, z + 1);
}

function remove_neighbour (x, y, z)
{
	var index = get_index (x, y, z);
	
	if (index >= 0 && index < xDimension * yDimension * zDimension)
	{
		-- neighbourgs [index];
	}
}


function get_index (x, y, z)
{
	return (x * yDimension + y) * zDimension + z;
}

function random (value)
{
	return Math .round (Math .random () * value);
}
  "
}

ROUTE Timer.cycleTime TO Felület.set_time
