#X3D V3.3 utf8 Titania V0.7.6

META "comment" "World of Titania"
META "created" "Sun, 01 Jun 2014 03:00:06 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.6, http://titania.create3000.de"
META "modified" "Mon, 22 Dec 2014 05:29:22 GMT"

Transform {
  children [
    DEF _1 TouchSensor {
      description "Script 1"
    }
    Transform {
      translation -1.64145 0.0135657 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

Transform {
  children [
    DEF _2 TouchSensor {
      description "Script 2"
    }
    Transform {
      translation 1.37013 0 0
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box { }
      }
    }
  ]
}

DEF Script1 Script {
  inputOnly      SFTime  set_time
  initializeOnly SFBool  boolean TRUE
  initializeOnly SFVec3d vector 16 32 48
  initializeOnly SFNode  viewpoint Viewpoint { }
  initializeOnly SFNode  null_ NULL

  url "v8:

function initialize ()
{
	//global ();
	//browser ();
	//fields ();
	//arrays ();
	node ();
}

function global ()
{
	delete NULL;
	delete TRUE;
	delete FALSE;

	NULL  = 0;
	TRUE  = 0;
	FALSE = 0;

	print ('NULL:  ', NULL  === null);
	print ('TRUE:  ', TRUE  === true);
	print ('FALSE: ', FALSE === false);
}

function browser ()
{
	delete Browser;
	Browser = 0;

	print ('Browser:            ', Browser);
	print ('Browser .prototype: ', Browser .prototype);
	print ('Browser .__proto__: ', Browser .__proto__);
	print ('Object .create:     ', Object .create (Browser));

	Browser .setDescription (Browser .name + ' V' + Browser .version);

	for (var p in Browser)
		print ('Browser: ', p, ' = ', Browser [p]);

	print ('getName:     ', Browser .getName ());

	var f = Browser .getVersion;
	print ('f: ', f .call ());
}

function fields ()
{
	var v;
	print ('SFVec4f:             ', SFVec4f);
	print ('SFVec4f .name:       ', SFVec4f .name);
	print ('SFVec4f .prototype:  ', SFVec4f .prototype .toString);
	print ('SFVec4f .__proto__:  ', SFVec4f .__proto__ .toString);
	print ('# SFVec4f .prototype:  ', SFVec4f .prototype === null);
	print ('# SFVec4f .prototype:  ', SFVec4f .prototype instanceof SFVec4f);
	print ('# SFVec4f .prototype:  ', typeof (SFVec4f .prototype));
	print ('# SFVec4f .prototype:  ', SFVec4f .prototype .constructor);
	print ('# SFVec4f .prototype:  ', SFVec4f .prototype .constructor .name);
	print ('SFVec4f .new:        ', v = new SFVec4f ());
	print ('SFVec4f .new:        ', v = new SFVec4f (1, 2, 3, 4));
	print ('SFVec4f .instanceof: ', v instanceof SFVec4f);
	print ('SFVec4f .prototype:  ', v .prototype);
	print ('SFVec4f .__proto__:  ', v .__proto__ .toString);
	print ('# SFVec4f .__proto__:  ', v .__proto__ === SFVec4f .prototype);
	delete v .w;
	print ('SFVec4f .x:          ', v .x);
	print ('SFVec4f .y:          ', v .y);
	print ('SFVec4f .z:          ', v .z);
	print ('SFVec4f .w:          ', v .w);
	print ('SFVec4f .x:          ', 'x' in v);
	print ('SFVec4f .y:          ', 'y' in v);
	print ('SFVec4f .z:          ', 'z' in v);
	print ('SFVec4f .w:          ', 'w' in v);
	print ('SFVec4f .v:          ', 'v' in v);
	print ('SFVec4f .0:          ', v [0]);
	print ('SFVec4f .1:          ', v [1]);
	print ('SFVec4f .2:          ', v [2]);
	print ('SFVec4f .3:          ', v [3]);
	print ('SFVec4f .0:          ', 0 in v);
	print ('SFVec4f .1:          ', 1 in v);
	print ('SFVec4f .2:          ', 2 in v);
	print ('SFVec4f .3:          ', 3 in v);
	print ('SFVec4f .4:          ', 4 in v);
	v .x = 5;
	v .y = 6;
	v .z = 7;
	v .w = 8;
	print ('SFVec4f .getName:     ', v .getName ());
	print ('SFVec4f .getTypeName: ', v .getTypeName ());
	print ('SFVec4f .getType:     ', v .getType ());
	print ('SFVec4f .isReadable:  ', v .isReadable ());
	print ('SFVec4f .isWritable:  ', v .isWritable ());
	print ('SFVec4f .toString:    ', v);
	print ('SFVec4f .negate:      ', v .negate ());
	print ('SFVec4f .add:         ', v .add (v));
	print ('SFVec4f .subtract:    ', v .subtract (v));
	print ('SFVec4f .multiply:    ', v .multiply (2));
	print ('SFVec4f .divide:      ', v .divide (2));
	print ('SFVec4f .normalize:   ', v .normalize ());
	print ('SFVec4f .dot:         ', v .dot (v));
	print ('SFVec4f .length:      ', v .length ());
	print ('SFVec4f .multVec:     ', v .multVec (v));
	print ('SFVec4f .divVec:      ', v .divVec (v));

	print ('Enumerate:');
	for (var i in v)
		print ('SFVec4f [', i, ']: ', v [i]);

	var r = new SFRotation (1, 2, 3, 4);
	print ('SFRotation:           ', r);
	print ('SFRotation:           ', new SFRotation (new SFVec3f (1, 2, 3), 4));
	print ('SFRotation .x:        ', r .x);
	print ('SFRotation .y:        ', r .y);
	print ('SFRotation .z:        ', r .z);
	print ('SFRotation .angle:    ', r .angle);
	print ('SFRotation .getAxis:  ', r .getAxis ());
	print ('SFRotation .inverse:  ', r .inverse ());
	print ('SFRotation .multiply: ', r .multiply (r));
	print ('SFRotation .multVec:  ', r .multVec (new SFVec3f (0, 0, 1)));
	print ('SFRotation .slerp:    ', r .slerp (r, 0.5));

	var c4 = new SFColorRGBA (0.1, 0.2, 0.3, 0.4)
	var hsv = c4 .getHSV ();
	print ('SFColorRGBA:         ', c4);
	print ('SFColorRGBA .r:      ', c4 .r);
	print ('SFColorRGBA .g:      ', c4 .g);
	print ('SFColorRGBA .b:      ', c4 .b);
	print ('SFColorRGBA .a:      ', c4 .a);
	print ('SFColorRGBA .getHSV: ', hsv);

	var c3 = new SFColor (0.1, 0.2, 0.3)
	var hsv = c3 .getHSV ();
	print ('SFColor:         ', c3);
	print ('SFColor .r:      ', c3 .r);
	print ('SFColor .g:      ', c3 .g);
	print ('SFColor .b:      ', c3 .b);
	print ('SFColor .getHSV: ', hsv);

	var m16 = new SFMatrix4f (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
	print ('SFMatrix4f:      ', m16);
	print ('SFMatrix4f [ 0]: ', m16 [ 0]);
	print ('SFMatrix4f [ 1]: ', m16 [ 1]);
	print ('SFMatrix4f [ 2]: ', m16 [ 2]);
	print ('SFMatrix4f [ 3]: ', m16 [ 3]);
	print ('SFMatrix4f [ 4]: ', m16 [ 4]);
	print ('SFMatrix4f [ 5]: ', m16 [ 5]);
	print ('SFMatrix4f [ 6]: ', m16 [ 6]);
	print ('SFMatrix4f [ 7]: ', m16 [ 7]);
	print ('SFMatrix4f [ 8]: ', m16 [ 8]);
	print ('SFMatrix4f [ 9]: ', m16 [ 9]);
	print ('SFMatrix4f [10]: ', m16 [10]);
	print ('SFMatrix4f [11]: ', m16 [11]);
	print ('SFMatrix4f [12]: ', m16 [12]);
	print ('SFMatrix4f [13]: ', m16 [13]);
	print ('SFMatrix4f [14]: ', m16 [14]);
	print ('SFMatrix4f [15]: ', m16 [15]);
	print ('SFMatrix4f .transpose:     ', m16 .transpose ());
	print ('SFMatrix4f .multLeft:      ', m16 .multLeft (m16));
	print ('SFMatrix4f .multRight:     ', m16 .multRight (m16));
	print ('SFMatrix4f .multVecMatrix: ', m16 .multVecMatrix (new SFVec3f (1, 2, 3)));
	print ('SFMatrix4f .multMatrixVec: ', m16 .multMatrixVec (new SFVec3f (1, 2, 3)));
	print ('SFMatrix4f .multDirMatrix: ', m16 .multDirMatrix (new SFVec3f (1, 2, 3)));
	print ('SFMatrix4f .multMatrixDir: ', m16 .multMatrixDir (new SFVec3f (1, 2, 3)));

	var m9 = new SFMatrix3f (1, 2, 3, 4, 5, 6, 7, 8, 9);
	print ('SFMatrix3f:     ', m9);
	print ('SFMatrix3f [0]: ', m9 [0]);
	print ('SFMatrix3f [1]: ', m9 [1]);
	print ('SFMatrix3f [2]: ', m9 [2]);
	print ('SFMatrix3f [3]: ', m9 [3]);
	print ('SFMatrix3f [4]: ', m9 [4]);
	print ('SFMatrix3f [5]: ', m9 [5]);
	print ('SFMatrix3f [6]: ', m9 [6]);
	print ('SFMatrix3f [7]: ', m9 [7]);
	print ('SFMatrix3f [8]: ', m9 [8]);
	print ('SFMatrix3f .transpose:     ', m9 .transpose ());
	print ('SFMatrix3f .multLeft:      ', m9 .multLeft (m9));
	print ('SFMatrix3f .multRight:     ', m9 .multRight (m9));
	print ('SFMatrix3f .multVecMatrix: ', m9 .multVecMatrix (new SFVec2f (1, 2)));
	print ('SFMatrix3f .multMatrixVec: ', m9 .multMatrixVec (new SFVec2f (1, 2)));
	print ('SFMatrix3f .multDirMatrix: ', m9 .multDirMatrix (new SFVec2f (1, 2)));
	print ('SFMatrix3f .multMatrixDir: ', m9 .multMatrixDir (new SFVec2f (1, 2)));

	var t = new SFNode ('DEF T Transform { }');
	var v = new SFNode ('DEF V Viewpoint { }');
	print ('SFNode:               ', new SFNode ());
	print ('SFNode .toVRMLString: ', v .toVRMLString ());
	print ('SFNode .toXMLString:  ', v .toXMLString ());
	print ('SFNode .getNodeName:  ', v .getNodeName ());
	print ('SFNode .getNodeType:  ', v .getNodeType ());
	print ('SFNode .set_bind:     ', 'set_bind' in v);
	print ('SFNode .unknown:      ', 'unknown' in v);

	for (var i in v)
		print ('SFNode [', i, ']: ', v [i]);

	print ('SFImage: ', new SFImage ());

	//var f = v .toString;
	//f .call (Browser);
}

function arrays ()
{
	var a = new MFColor ();
	print ('MFColor:         ', a);
	print ('MFColor .length: ', a .length);

	var a = new MFColor (new SFColor (0.1, 0.2, 0.3), new SFColor (0.2, 0.3, 0.4), false);
	print ('MFColor: ', a);
	print ('MFColor .length: ', a .length);
	print ('MFColor [0]: ', a [0]);
	print ('MFColor [1]: ', a [1]);
	print ('MFColor [2]: ', a [2]);
	print ('MFColor [2]: ', a [2] === a [2]);

	a [2] [0] = 0.3;
	print ('MFColor [2]: ', a [2]);
	
	a .length = 2;
	print ('MFColor: ', a);
	
	var a = new MFBool (true, false, true);
	print ('MFBool: ', a);
	print ('MFBool [0]: ', a [0]);
	print ('MFBool [1]: ', a [1]);
	print ('MFBool [2]: ', a [2]);

	a [1] = true;
	print ('MFBool: ', a);
}

function node ()
{
	var n = new SFNode ();
	var v = new SFNode ('DEF V Viewpoint { }');

	print ('NULL: ', n);
	print ('NULL: ', n instanceof SFNode);

	print ('NULL: ', null_);
	print ('NULL: ', null_ instanceof SFNode);

	print ('Viewpoint: ', v);
	print ('Viewpoint: ', v instanceof SFNode);
	print ('Viewpoint: ', v .getTypeName ());
	print ('Viewpoint ==: ', v == 'Viewpoint { }');
	print ('Viewpoint ==: ', viewpoint == 'Viewpoint { }');
	print ('Viewpoint .position: ', v .position);

	v .position = new SFVec3f (1, 2, 3);
	print ('Viewpoint .position: ', v .position);

	v .position [0] = 2;
	v .position [1] = 3;
	v .position [2] = 4;
	print ('Viewpoint .position: ', v .position);
}

function set_time (value, time)
{
	print ('Script 1. value: ', value);
	print ('Script 1. time:  ', time);
}

//function shutdown () { }
"
  directOutput TRUE
}

DEF Script2 Script {
  inputOnly   SFVec3f  set_hitPoint
  inputOnly   SFTime   set_time
  inputOutput SFBool   b TRUE
  inputOutput SFDouble d 1.23456789012346
  inputOutput SFFloat  f 1.2345
  inputOutput SFInt32  i 1234
  inputOutput SFString s "äöü"
  inputOutput SFTime   t 1.2345
  inputOutput SFRotation r 1 2 3 4
  inputOutput SFVec3d  v3d 1 2 3
  inputOutput SFVec3f  v3f 1 2 3
  inputOutput SFVec4d  v4d 1 2 3 4
  inputOutput SFVec4f  v4f 1 2 3 4
  inputOutput SFNode   n Viewpoint { }

  url "javascript:

print ('Script2: global');
print ('UTF-8: ', 'äüö ', 'äüö' .length);
print ('NULL:  ', NULL);
print ('FALSE: ', FALSE);
print ('TRUE:  ', TRUE);
print ('print: ', print ());

function initialize ()
{
	print ('Script2: initialize');

	print ();
	print ('bool:    ', b);
	print ('double:  ', d);
	print ('float:   ', f);
	print ('int32_t: ', i);
	print ('string:  ', s);
	print ('SFVec4d: ', v4d);
	print ('SFVec4f: ', v4f);

	print ();
	print ('SFVec4d: ', SFVec4d);
	print ('SFVec4f: ', SFVec4f);
	print ('SFVec4d: ', new SFVec4d ());
	print ('SFVec4f: ', new SFVec4f ());
	print ('SFVec4d: ', new SFVec4d (1,2,3,'4'));
	print ('SFVec4f: ', new SFVec4f (1,2,3,'4'));

	print ();
	print ('SFVec4f .getName:     ', v4f .getName ());
	print ('SFVec4f .getTypeName: ', new SFVec4f (1,2,3,'4') .getTypeName ());
	print ('SFVec4f .getType:     ', new SFVec4f (1,2,3,'4') .getType ());
	print ('SFVec4f .isReadable:  ', new SFVec4f (1,2,3,'4') .isReadable ());
	print ('SFVec4f .isWritable:  ', new SFVec4f (1,2,3,'4') .isWritable ());

	var v1 = new SFVec4f (1,2,3,4);
	var v2 = new SFVec4f (2,3,4,5);

	print ();
	print ('SFVec4f .negate:    ', v1 .negate ());
	print ('SFVec4f .add:       ', v1 .add (v2));
	print ('SFVec4f .subtract:  ', v1 .subtract (v2));
	print ('SFVec4f .multiply:  ', v1 .multiply (2));
	print ('SFVec4f .multVec:   ', v1 .multVec (v2));
	print ('SFVec4f .divide:    ', v1 .divide (2));
	print ('SFVec4f .divVec:    ', v1 .divVec (v2));
	print ('SFVec4f .normalize: ', v1 .normalize ());
	print ('SFVec4f .dot:       ', v1 .dot (v2));
	print ('SFVec4f .length:    ', v1 .length ());

	print ();
	print ('SFVec4f .x: ', v1 .x);
	print ('SFVec4f .y: ', v1 .y);
	print ('SFVec4f .z: ', v1 .z);
	print ('SFVec4f .w: ', v1 .w);

	print ();
	print ('SFVec4f .x: ', v1 .x = 2);
	print ('SFVec4f .y: ', v1 .y = 3);
	print ('SFVec4f .z: ', v1 .z = 4);
	print ('SFVec4f .w: ', v1 .w = 5);

	print ();
	print ('SFVec4f .x: ', v1 .x);
	print ('SFVec4f .y: ', v1 .y);
	print ('SFVec4f .z: ', v1 .z);
	print ('SFVec4f .w: ', v1 .w);

	print ();
	print ('SFVec4f: ', v1);

	print ();
	print ('SFVec4f [0]: ', v1 [0]);
	print ('SFVec4f [1]: ', v1 [1]);
	print ('SFVec4f [2]: ', v1 [2]);
	print ('SFVec4f [3]: ', v1 [3]);

	print ();
	print ('SFVec4f [0]: ', v1 [0] = 3);
	print ('SFVec4f [1]: ', v1 [1] = 4);
	print ('SFVec4f [2]: ', v1 [2] = 5);
	print ('SFVec4f [3]: ', v1 [3] = 6);

	print ();
	print ('SFVec4f [0]: ', v1 [0]);
	print ('SFVec4f [1]: ', v1 [1]);
	print ('SFVec4f [2]: ', v1 [2]);
	print ('SFVec4f [3]: ', v1 [3]);

	print ();
	print ('SFVec4f: ', v1);
	
	print ();
	for (var k in v1)
		print ('enumerate: ', k, ' = ', v1 [k]);

	print ();
	for each (var v in v1)
		print ('for each : ', v);

	var c4 = new SFColorRGBA (0.1,0.2,0.3,0.4);
	var hsv = c4 .getHSV ();

	print ();
	print ('SFColorRGBA: ', c4);
	print ('SFColorRGBA. getHSV: ', hsv);
	
	var m4 = new SFMatrix4d ();

	print ();
	for (var k in m4)
		print ('enumerate: ', k, ' = ', m4 [k]);

	set_hitPoint = undefined;
}

function set_hitPoint (value, time)
{
	print ('Script .set_hitPoint: value: ', value);
	print ('Script .set_hitPoint: time:  ', time);
}

function set_time (value, time)
{
	print ('Script 2. set_time: value: ', value);
	print ('Script 2. set_time: time:  ', time);
	
	b = false;
	d = 9876;
	f = 9876;
	i = 9876;
	s = 'üöä';
	r = new SFRotation (4,3,2,1);
	v3d = new SFVec3d (9,8,7);
	v3f = new SFVec3f (9,8,7);
	v4d = new SFVec4d (9,8,7,6);
	v4f = new SFVec4f (9,8,7,6);
}

var eventsProcessed = function ()
{
	print ('*********** Script2: eventsProcessed');
}

var shutdown = function ()
{
	print ('*********** Script2: shutdown');
}
"
  directOutput TRUE
}

ROUTE _2.touchTime TO Script2.set_time
ROUTE _1.touchTime TO Script1.set_time
ROUTE _2.hitPoint_changed TO Script2.set_hitPoint
