#X3D V3.0 utf8

# X3D-to-ClassicVRML XSL translation autogenerated by X3dToVrml97.xslt
# http://www.web3d.org/x3d/content/X3dToVrml97.xslt
# Generated using XSLT processor: SAXON 9.1.0.6 from Saxonica
# [X3D] version=3.0
# [X3D] noNamespaceSchemaLocation=http://www.web3d.org/specifications/x3d-3.0.xsd
# [head]

PROFILE Immersive

COMPONENT NURBS : 4

META "Image" "TrimmingContourExample.png"
META "Image" "TrimmingContourExampleSideView.png"
META "Image" "images/TrimmingContourExampleInstantReality.png"
META "Image" "images/TrimmingContourExampleXj3d.png"
META "contributor" "Don Brutzman"
META "created" "16 October 2005"
META "creator" "Andrew Grieve, Vince Marchetti"
META "description" "Simple example demonstrating NURBS trimming contour content model."
META "generator" "X3D-Edit 3.3, https://savage.nps.edu/X3D-Edit"
META "identifier" "http://www.web3d.org/x3d/content/examples/Basic/NURBS/TrimmingContourExample.x3d"
META "license" "../license.html"
META "modified" "3 August 2013"
META "reference" "http://www.web3d.org/x3d/specifications/ISO-IEC-19775-X3DAbstractSpecification/Part01/components/nurbs.html#NurbsTrimmedSurface"
META "subject" "NURBS trimming contour"
META "title" "TrimmingContourExample.x3d"

# [Scene] ========== ========== ==========
NavigationInfo {
  type "EXAMINE"
}

Background {
  skyColor 1 1 1
}

Transform {
  scale 2 2 2
  children [
    Viewpoint {
      description "Overhead View"
      position 233 1500 -133.81
      orientation -1 -0 -0 1.57
      centerOfRotation 233 0 -135
      fieldOfView 0.16628
    }
    Shape {
      appearance Appearance {
        material Material {
          diffuseColor 1 0 0
          emissiveColor 0 1 0
        }
      }
      geometry NurbsTrimmedSurface {
        solid FALSE
        uOrder 4
        vOrder 4
        uDimension 6
        vDimension 6
        uKnot [ 0.00980377, 0.00980377, 0.00980377, 0.00980377, 0.5, 0.5, 0.990196, 0.990196, 0.990196, 0.990196 ]
        vKnot [ 0.00980377, 0.00980377, 0.00980377, 0.00980377, 0.5, 0.5, 0.990196, 0.990196, 0.990196, 0.990196 ]
        controlPoint Coordinate {
          point [ 123.016 0 -70.2545, 123.016 0 -91.8969, 123.016 30 -113.539, 123.016 40 -156.824, 123.016 20 -178.466, 123.016 0 -200.109, 159.687 0 -70.2545, 159.687 0 -91.8969, 159.687 0 -113.539, 159.687 0 -156.824, 159.687 0 -178.466, 159.687 16 -200.109, 196.359 0 -70.2545, 196.359 0 -91.8969, 196.359 21 -113.539, 196.359 0 -156.824, 196.359 24 -178.466, 196.359 28 -200.109, 269.702 16 -70.2545, 269.702 0 -91.8969, 269.702 0 -113.539, 269.702 0 -156.824, 269.702 0 -178.466, 269.702 0 -200.109, 306.373 0 -70.2545, 306.373 0 -91.8969, 306.373 0 -113.539, 306.373 34 -156.824, 306.373 0 -178.466, 306.373 0 -200.109, 343.044 0 -70.2545, 343.044 0 -91.8969, 343.044 -32 -113.539, 343.044 0 -156.824, 343.044 0 -178.466, 343.044 0 -200.109 ]
        }
        trimmingContour [
          Contour2D {
            children NurbsCurve2D {
              controlPoint [ 0.990196078431372 0.0098039215686275, 0.990196078431372 0.990196078431372, 0.0098039215686275 0.990196078431372, 0.0098039215686275 0.0098039215686275, 0.990196078431372 0.0098039215686275 ]
              knot [ 0, 0, 0.25, 0.5, 0.75, 1, 1 ]
              order 2
            }
          }
          Contour2D {
            children [
              ContourPolyline2D {
                controlPoint [ 0.2 0.2, 0.2 0.6 ]
              }
              NurbsCurve2D {
                controlPoint [ 0.2 0.6, 0.4 0.4, 0.6 0.6 ]
                knot [ 2, 2, 2, 3, 3, 3 ]
              }
              ContourPolyline2D {
                controlPoint [ 0.6 0.6, 0.6 0.2, 0.2 0.2 ]
              }
            ]
          }
          Contour2D {
            children ContourPolyline2D {
              controlPoint [ 0.75 0.75, 0.85 0.85, 0.95 0.75, 0.75 0.75 ]
            }
          }
        ]
      }
    }
  ]
}
