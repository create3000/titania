#VRML V2.0 utf8

META "title" "Text"

PROTO LineRectangle2D [ ]
{
  IndexedLineSet {
    coordIndex [ 0, 1, 2, 3, 0, -1 ]
    coord Coordinate {
      point [ -0.5 -0.5 0, 0.5 -0.5 0, 0.5 0.5 0, -0.5 0.5 0 ]
    }
  }
}

PROTO BBox2 [
  exposedField SFVec3f translation 0 0 0
  exposedField SFVec3f scale 1 1 1
  exposedField SFColor color 1 1 1
]
{
  Transform {
    translation IS translation
    scale IS scale
    children Transform {
      translation 0.5 -0.5 0
      children Shape {
        appearance Appearance {
          material Material {
            emissiveColor IS color
          }
        }
        geometry LineRectangle2D { }
      }
    }
  }
}

Background {
  skyColor 0.2 0.2 0.2
}

Viewpoint {
  description "Viewpoint"
  position 0 -0.0839844 21.8746
  centerOfRotation 0 -0.0839844 0
}

DEF Text_1 Transform {
  children Shape {
    appearance Appearance {
      material Material {
        diffuseColor 1 0 0
      }
    }
    geometry DEF Text Text {
      string [ "Read", "somg", "Text", "today!" ]
      fontStyle FontStyle {
        family [ "SANS", "Ubuntu Mono" ]
        style "BOLDITALIC"
        spacing 2
        horizontal FALSE
        justify [ "END", "BEGIN" ]
      }
    }
  }
}

DEF RedBox Transform {
  translation -0.5 0.5 0
  children Shape {
    appearance Appearance {
      material Material {
        diffuseColor 1 0 0
        transparency 0.5
      }
    }
    geometry Box {
      size 1 1 1
    }
  }
}

DEF GreenBox Transform {
  translation -0.5 -0.5 0
  children Shape {
    appearance Appearance {
      material Material {
        diffuseColor 0 1 0
        transparency 0.5
      }
    }
    geometry Box {
      size 1 1 1
    }
  }
}

DEF BlueBox Transform {
  translation -0.5 -1.5 0
  children Shape {
    appearance Appearance {
      material Material {
        diffuseColor 0 0 1
        transparency 0.5
      }
    }
    geometry Box {
      size 1 1 1
    }
  }
}

DEF YellowBox Transform {
  translation 6 1.5 0
  scale 12 1 1
  children Shape {
    appearance Appearance {
      material Material {
        diffuseColor 1 1 0
        transparency 0.49
      }
    }
    geometry Box {
      size 1 1 1
    }
  }
}

DEF LineBounds Transform {
  translation 0 5.44181 0
  children [
    BBox2 {
      translation 0 -1.97414 0
      scale 1.21122 3.46766 1
      color 1 0 0
    }
    BBox2 {
      translation 1.21122 -1.9537 0
      scale 2 3.48811 1
      color 0 1 0
    }
    BBox2 {
      translation 3.21122 -1.98309 0
      scale 2 3.45872 1
      color 0 0 1
    }
    BBox2 {
      translation 5.21122 0 0
      scale 2 5.44181 1
      color 1 1 0
    }
  ]
}

DEF TextBounds Transform {
  translation 0 5.44181 0
  scale 6.37373 5.44181 1
  children BBox2 { }
}

DEF Bounds Script {
  eventIn  MFVec2f set_lineBounds
  eventIn  SFVec2f set_textBounds
  eventOut SFVec3f translation_changed
  eventOut SFVec3f scale_changed
  field    SFNode  lineBounds USE LineBounds
  field    MFColor color [ 1 0 0, 0 1 0, 0 0 1, 1 1 0, 0 1 1, 1 0 1 ]
  field    SFNode  text USE Text

  url "vrmlscript:

var
	BEGIN  = 0,
	FIRST  = 1,
	MIDDLE = 2,
	END    = 3;

function get_normalizedMajorAlignment (majorAlignment, normal)
{
	if (majorAlignment == 'END')
		return normal ? END : BEGIN;

	if (majorAlignment == 'MIDDLE')
		return MIDDLE;

	return normal ? BEGIN : END;

}

function get_majorAlignment (index)
{
	if (text .fontStyle .horizontal)
	{
		var major = get_normalizedMajorAlignment (text .fontStyle .justify [0], text .fontStyle .leftToRight);
	
		if (major == END)
			return text .textBounds .x - text .lineBounds [index] .x;

		if (major == MIDDLE)
			return (text .textBounds .x - text .lineBounds [index] .x) / 2;

		return 0;
	}

	var major = get_normalizedMajorAlignment (text .fontStyle .justify [0], text .fontStyle .topToBottom);
	
	if (major == END)
		return -text .textBounds .y + text .lineBounds [index] .y;

	if (major == MIDDLE)
		return (-text .textBounds .y + text .lineBounds [index] .y) / 2;

	return 0;
}

function set_lineBounds (value, time)
{
	var transforms = new MFNode ();
	
	var
		x = 0,
		y = 0;
		
	for (var i in value)
	{
		var transform = Browser .currentScene .createProto ('BBox2');
		
		if (text .fontStyle .horizontal)
		{
			transform .translation = new SFVec3f (get_majorAlignment (i),
			                                      text .fontStyle .topToBottom ? y : y - text .textBounds .y,
			                                      0);
		
			y += text .fontStyle .topToBottom ? -value [i] .y : value [i] .y;

			transform .scale = new SFVec3f (value [i] .x,
			                                text .fontStyle .topToBottom ? value [i] .y : -value [i] .y,
			                                1);
		}
		else
		{
			transform .translation = new SFVec3f (text .fontStyle .leftToRight ? x : x + text .textBounds .x,
			                                      get_majorAlignment (i),
			                                      0);
		
			x += text .fontStyle .leftToRight ? value [i] .x : -value [i] .x;

			transform .scale = new SFVec3f (text .fontStyle .leftToRight ? value [i] .x : -value [i] .x,
			                                value [i] .y,
			                                1);
		}

		transform .color = color [i % color .length];

		transforms [transforms .length] = transform;
	}

	lineBounds .children = transforms;
}

function set_textBounds (value, time)
{
	scale_changed = new SFVec3f (value .x, value .y, 1);
}
  "
}

ROUTE Text.origin TO LineBounds.set_translation
ROUTE Text.lineBounds TO Bounds.set_lineBounds
ROUTE Text.textBounds TO Bounds.set_textBounds
ROUTE Text.origin TO TextBounds.set_translation
ROUTE Bounds.scale_changed TO TextBounds.set_scale
