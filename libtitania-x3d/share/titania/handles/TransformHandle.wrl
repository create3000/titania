#VRML V2.0 utf8

PROTO DoubleClick [
  eventIn      SFTime set_time
  exposedField SFTime doubleClickInterval 0.5
  eventOut     SFTime doubleClickTime
]
{
  DEF DoubleClick Script {
    eventIn      SFTime set_time IS set_time
    exposedField SFTime doubleClickInterval IS doubleClickInterval
    eventOut     SFTime doubleClickTime IS doubleClickTime

    url "vrmlscript:

var firstTime = 0;

function set_time (value, time)
{
	if (firstTime == 0)
		firstTime = time;
	
	else if (time - firstTime < doubleClickInterval)
	{
		firstTime = 0;
		doubleClickTime = time;
	}
	else
		firstTime = time;
}
"
  }
}

PROTO TransformHandle [
  # required fields
  exposedField SFMatrix4f cameraSpaceMatrix 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
  exposedField SFMatrix4f modelViewMatrix 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
  exposedField SFVec3f    bboxSize 0 0 0
  exposedField SFVec3f    bboxCenter 0 0 0
  exposedField SFNode     transform NULL
]
{
  Collision {
    collide FALSE
    children [
      Transform {
        translation IS bboxCenter
        scale IS bboxSize
        children [
          DEF BBox Shape {
            geometry IndexedLineSet {
              coordIndex [ 0, 1, 2, 3, 0, -1, 4, 5, 6, 7, 4, -1, 0, 4, -1, 3, 7, -1, 1, 5, -1, 2, 6, -1 ]
              coord Coordinate {
                point [ -0.5 0.5 0.5, -0.5 -0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, -0.5 0.5 -0.5, -0.5 -0.5 -0.5, 0.5 -0.5 -0.5, 0.5 0.5 -0.5 ]
              }
            }
          }
          DEF Axes Shape {
            geometry IndexedLineSet {
              colorPerVertex FALSE
              coordIndex [ 0, 1, -1, 0, 2, -1, 0, 3, -1 ]
              color Color {
                color [ 1 0 0, 0 1 0, 0 0 1 ]
              }
              coord Coordinate {
                point [ 0 0 0, 0.5 0 0, 0 0.5 0, 0 0 0.5, 0 0 0 ]
              }
            }
          }
        ]
      }
      DEF Planes Group {
        children [
          DEF Front Transform {
            children Transform {
              children [
                DEF FrontSensor PlaneSensor { }
                DEF Plane Shape {
                  appearance Appearance {
                    material Material {
                      transparency 1
                    }
                  }
                  geometry Rectangle2D {
                    size 1 1
                  }
                }
              ]
            }
          }
          DEF Right Transform {
            children Transform {
              rotation 0 1 0 1.5708
              children [
                DEF RightSensor PlaneSensor { }
                USE Plane
              ]
            }
          }
          DEF Back Transform {
            children Transform {
              rotation 0 1 0 3.14159
              children [
                DEF BackSensor PlaneSensor { }
                USE Plane
              ]
            }
          }
          DEF Left Transform {
            children Transform {
              rotation 0 -1 0 1.5708
              children [
                DEF LeftSensor PlaneSensor { }
                USE Plane
              ]
            }
          }
          DEF Top Transform {
            children Transform {
              rotation -1 0 0 1.5708
              children [
                DEF TopSensor PlaneSensor { }
                USE Plane
              ]
            }
          }
          DEF Bottom Transform {
            children Transform {
              rotation 1 0 0 1.5708
              children [
                DEF BottomSensor PlaneSensor { }
                USE Plane
              ]
            }
          }
        ]
      }
      Group {
        children [
          DEF ModeTouch TouchSensor { }
          DEF XAxisSensor PlaneSensor {
            maxPosition -1 0
          }
          DEF XRotationSensor SphereSensor {
            enabled FALSE
          }
          DEF X Transform {
            translation IS bboxCenter
            children DEF XHandle Transform {
              children ScreenGroup {
                children Transform {
                  rotation 0 0 -1 1.5708
                  children DEF XSwitch Switch {
                    whichChoice 0
                    choice [
                      Transform {
                        translation 0 10 0
                        children Shape {
                          appearance DEF Red Appearance {
                            material Material {
                              diffuseColor 1 0.3 0.3
                              emissiveColor 1 0 0
                            }
                          }
                          geometry DEF Arrow Cone {
                            height 20
                            bottomRadius 6
                          }
                        }
                      }
                      Transform {
                        translation 0 6 0
                        children Shape {
                          appearance USE Red
                          geometry DEF Sphere Sphere {
                            radius 6
                          }
                        }
                      }
                      Transform {
                        translation 0 5 0
                        children Shape {
                          appearance USE Red
                          geometry DEF Box Box {
                            size 10 10 10
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      }
      Group {
        children [
          USE ModeTouch
          DEF YAxisSensor PlaneSensor {
            maxPosition 0 -1
          }
          DEF YRotationSensor SphereSensor {
            enabled FALSE
          }
          DEF Y Transform {
            translation IS bboxCenter
            children DEF YHandle Transform {
              children ScreenGroup {
                children Transform {
                  children DEF YSwitch Switch {
                    whichChoice 0
                    choice [
                      Transform {
                        translation 0 10 0
                        children Shape {
                          appearance DEF Green Appearance {
                            material Material {
                              diffuseColor 0.3 1 0.3
                              emissiveColor 0 1 0
                            }
                          }
                          geometry USE Arrow
                        }
                      }
                      Transform {
                        translation 0 6 0
                        children Shape {
                          appearance USE Green
                          geometry USE Sphere
                        }
                      }
                      Transform {
                        translation 0 5 0
                        children Shape {
                          appearance USE Green
                          geometry USE Box
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      }
      Group {
        children [
          USE ModeTouch
          DEF ZAxisSensor PlaneSensor {
            axisRotation 0 1 0 1.5708
          }
          DEF ZRotationSensor SphereSensor {
            enabled FALSE
          }
          DEF Z Transform {
            translation IS bboxCenter
            children DEF ZHandle Transform {
              children ScreenGroup {
                children Transform {
                  rotation 1 0 0 1.5708
                  children DEF ZSwitch Switch {
                    whichChoice 0
                    choice [
                      Transform {
                        translation 0 10 0
                        children Shape {
                          appearance DEF Blue Appearance {
                            material Material {
                              diffuseColor 0.3 0.3 1
                              emissiveColor 0 0 1
                            }
                          }
                          geometry USE Arrow
                        }
                      }
                      Transform {
                        translation 0 6 0
                        children Shape {
                          appearance USE Blue
                          geometry USE Sphere
                        }
                      }
                      Transform {
                        translation 0 5 0
                        children Shape {
                          appearance USE Blue
                          geometry USE Box
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      }
    ]
  }

  DEF DoubleClick_1 DoubleClick { }

  DEF ModeScript Script {
    eventIn  SFTime  set_time
    eventOut SFInt32 whichChoice_changed

    url "vrmlscript:
function set_time (value, time)
{
	whichChoice_changed = (whichChoice_changed + 1) % 3;
}
"
  }

  DEF PlanesScript Script {
    exposedField SFMatrix4f cameraSpaceMatrix IS cameraSpaceMatrix
    exposedField SFMatrix4f modelViewMatrix IS modelViewMatrix
    exposedField SFVec3f    bboxSize IS bboxSize
    exposedField SFVec3f    bboxCenter IS bboxCenter
    field        SFFloat    offset 0.01
    field        SFNode     front USE Front
    field        SFNode     right USE Right
    field        SFNode     back USE Back
    field        SFNode     left USE Left
    field        SFNode     top USE Top
    field        SFNode     bottom USE Bottom

    url "vrmlscript:

function eventsProcessed ()
{
	// Position and scale planes

	var scale = new SFVec3f ();
	modelViewMatrix .multRight (cameraSpaceMatrix) .getTransform (null, null, scale);

	var x = offset / scale .x;
	var y = offset / scale .y;
	var z = offset / scale .z;

	front  .translation = bboxCenter .add (new SFVec3f ( 0,  0,  z + bboxSize .z * 0.5));
	right  .translation = bboxCenter .add (new SFVec3f ( x + bboxSize .x * 0.5,  0,  0));
	back   .translation = bboxCenter .add (new SFVec3f ( 0,  0, -z - bboxSize .z * 0.5));
	left   .translation = bboxCenter .add (new SFVec3f (-x - bboxSize .x * 0.5,  0,  0));
	top    .translation = bboxCenter .add (new SFVec3f ( 0,  y + bboxSize .y * 0.5,  0));
	bottom .translation = bboxCenter .add (new SFVec3f ( 0, -y - bboxSize .y * 0.5,  0));
	
	front  .scale = new SFVec3f (bboxSize .x, bboxSize .y, 1);
	right  .scale = new SFVec3f (1, bboxSize .y, bboxSize .z);
	back   .scale = new SFVec3f (bboxSize .x, bboxSize .y, 1);
	left   .scale = new SFVec3f (1, bboxSize .y, bboxSize .z);
	top    .scale = new SFVec3f (bboxSize .x, 1, bboxSize .z);
	bottom .scale = new SFVec3f (bboxSize .x, 1, bboxSize .z);
	
	front  .children [0] .children [0] .enabled = bboxSize .x && bboxSize .y;
	right  .children [0] .children [0] .enabled = bboxSize .y && bboxSize .z;
	back   .children [0] .children [0] .enabled = bboxSize .x && bboxSize .y;
	left   .children [0] .children [0] .enabled = bboxSize .y && bboxSize .z;
	top    .children [0] .children [0] .enabled = bboxSize .x && bboxSize .z;
	bottom .children [0] .children [0] .enabled = bboxSize .x && bboxSize .z;
}
"
    directOutput TRUE
  }

  DEF ArrowsScript Script {
    exposedField SFVec3f    bboxSize IS bboxSize
    field        SFNode     x USE XHandle
    field        SFNode     y USE YHandle
    field        SFNode     z USE ZHandle

    url "vrmlscript:

function eventsProcessed ()
{
	// Position and scale arrows

	x .translation = new SFVec3f (bboxSize .x / 2, 0, 0);
	y .translation = new SFVec3f (0, bboxSize .y / 2, 0);
	z .translation = new SFVec3f (0, 0, bboxSize .z / 2);
}
"
    directOutput TRUE
  }

  DEF Move Script {
    eventIn      SFBool  set_active
    eventIn      SFVec3f set_frontTranslation
    eventIn      SFVec3f set_rightTranslation
    eventIn      SFVec3f set_backTranslation
    eventIn      SFVec3f set_leftTranslation
    eventIn      SFVec3f set_topTranslation
    eventIn      SFVec3f set_bottomTranslation
    eventIn      SFVec3f set_xTranslation
    eventIn      SFVec3f set_yTranslation
    eventIn      SFVec3f set_zTranslation
    exposedField SFVec3f bboxSize IS bboxSize
    exposedField SFNode  transform IS transform
    field        SFVec3f translation 0 0 0
    field        SFNode  frontSensor USE FrontSensor
    field        SFNode  rightSensor USE RightSensor
    field        SFNode  backSensor USE BackSensor
    field        SFNode  leftSensor USE LeftSensor
    field        SFNode  topSensor USE TopSensor
    field        SFNode  bottomSensor USE BottomSensor
    field        SFNode  xSensor USE XAxisSensor
    field        SFNode  ySensor USE YAxisSensor
    field        SFNode  zSensor USE ZAxisSensor

    url "vrmlscript:

var null3f = new SFVec3f ();

function set_active (value)
{
	if (value)
	{
		translation = transform .translation;
	}
	else
	{
		frontSensor  .offset = null3f;
		rightSensor  .offset = null3f;
		backSensor   .offset = null3f;
		leftSensor   .offset = null3f;
		topSensor    .offset = null3f;
		bottomSensor .offset = null3f;

		xSensor .offset = null3f;
		ySensor .offset = null3f;
		zSensor .offset = null3f;
	}
}

function set_frontTranslation (value)
{
	add_with_bbox (new SFVec3f (value .x, value .y, 0));
}

function set_rightTranslation (value)
{
	add_with_bbox (new SFVec3f (0, value .y, -value .x));
}

function set_backTranslation (value)
{
	add_with_bbox (new SFVec3f (-value .x, value .y, 0));
}

function set_leftTranslation (value)
{
	add_with_bbox (new SFVec3f (0, value .y, value .x));
}

function set_topTranslation (value)
{
	add_with_bbox (new SFVec3f (value .x, 0, -value .y));
}

function set_bottomTranslation (value)
{
	add_with_bbox (new SFVec3f (value .x, 0, value .y));
}

function set_xTranslation (value)
{
	add (new SFVec3f (value .x, 0, 0));
}

function set_yTranslation (value)
{
	add (new SFVec3f (0, value .y, 0));
}

function set_zTranslation (value)
{
	add (new SFVec3f (0, 0, -value .x));
}

function add_with_bbox (value)
{
	add (multVec (value, bboxSize));
}

function add (value)
{
	var offset = transform .rotation .multVec (multVec (value, transform .scale));

	transform .translation = translation .add (offset);
}

function multVec (a, b)
{
	return new SFVec3f (a .x * b .x,
	                    a .y * b .y,
	                    a .z * b .z);
}
"
    directOutput TRUE
  }


  # Mode translate, rotate or scale

  ROUTE ModeTouch.touchTime TO DoubleClick_1.set_time
  ROUTE DoubleClick_1.doubleClickTime TO ModeScript.set_time

  #

  ROUTE ModeScript.whichChoice_changed TO XSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO YSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO ZSwitch.set_whichChoice

  # Move

  ROUTE FrontSensor.isActive TO Move.set_active
  ROUTE RightSensor.isActive TO Move.set_active
  ROUTE BackSensor.isActive TO Move.set_active
  ROUTE LeftSensor.isActive TO Move.set_active
  ROUTE TopSensor.isActive TO Move.set_active
  ROUTE BottomSensor.isActive TO Move.set_active
  ROUTE XAxisSensor.isActive TO Move.set_active
  ROUTE YAxisSensor.isActive TO Move.set_active
  ROUTE ZAxisSensor.isActive TO Move.set_active

  #

  ROUTE FrontSensor.translation_changed TO Move.set_frontTranslation
  ROUTE RightSensor.translation_changed TO Move.set_rightTranslation
  ROUTE BackSensor.translation_changed TO Move.set_backTranslation
  ROUTE LeftSensor.translation_changed TO Move.set_leftTranslation
  ROUTE TopSensor.translation_changed TO Move.set_topTranslation
  ROUTE BottomSensor.translation_changed TO Move.set_bottomTranslation
  ROUTE XAxisSensor.translation_changed TO Move.set_xTranslation
  ROUTE YAxisSensor.translation_changed TO Move.set_yTranslation
  ROUTE ZAxisSensor.translation_changed TO Move.set_zTranslation
}

DEF Handle TransformHandle { }
