#X3D V3.3 utf8 Titania V0.7.4

META "comment" "World of Titania"
META "created" "Tue, 05 Aug 2014 20:06:52 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.4, http://titania.create3000.de"
META "modified" "Sun, 28 Sep 2014 05:15:51 GMT"

EXTERNPROTO ToolShader [
  inputOutput SFFloat ambientIntensity
  inputOutput SFColor diffuseColor
  inputOutput SFColor specularColor
  inputOutput SFColor emissiveColor
  inputOutput SFFloat shininess
  inputOutput SFFloat transparency
]
"library/ToolShader.x3dv"

PROTO Grid [
  inputOutput    SFVec3f    translation 0 0 0
  inputOutput    SFRotation rotation 0 0 1 0
  inputOutput    SFVec3f    scale 1 1 1
  inputOutput    MFInt32    dimension [
    10,
    20,
    10
  ]
  inputOutput    MFInt32    majorLineEvery [
    5,
    5,
    5
  ]
  inputOutput    MFInt32    majorLineOffset [
    0,
    0,
    0
  ]
  inputOutput    SFColor    color 0.5 0.5 0.5
  inputOutput    SFFloat    transparency 0.61803
  inputOutput    SFColor    lineColor 1 0.7 0.7
  inputOutput    SFFloat    lineTransparency 0.8
  inputOutput    SFColor    majorLineColor 1 0.7 0.7
  inputOutput    SFFloat    majorLineTransparency 0.6
  initializeOnly SFBool     solid TRUE
]
{
  Transform {
    translation IS translation
    rotation IS rotation
    scale IS scale
    children [
      DEF Plane Transform {
        rotation -3.09087e-08 0.707105 0.707108 3.14159
        scale 10 10 1
        children Shape {
          appearance Appearance {
            material DEF Material2 Material {
              diffuseColor 0 0 0
              emissiveColor IS color
              transparency IS transparency
            }
          }
          geometry Rectangle2D {
            size 1 1
            solid IS solid
          }
        }
      }
      Transform {
        children Shape {
          appearance Appearance {
            material DEF MajorMaterial Material {
              emissiveColor IS majorLineColor
              transparency IS majorLineTransparency
            }
          }
          geometry DEF MajorGrid IndexedLineSet {
            coordIndex [
              0,
              1,
              -1,
              2,
              3,
              -1,
              4,
              5,
              -1,
              6,
              7,
              -1,
              8,
              9,
              -1,
              10,
              11,
              -1
            ]
            coord Coordinate {
              point [
                -5 0 -5.25,
                -5 0 5.25,
                0 0 -5.25,
                0 0 5.25,
                5 0 -5.25,
                5 0 5.25,
                -5.25 0 -5,
                5.25 0 -5,
                -5.25 0 0,
                5.25 0 0,
                -5.25 0 5,
                5.25 0 5
              ]
            }
          }
        }
      }
      Transform {
        children Shape {
          appearance Appearance {
            material DEF MinorMaterial Material {
              emissiveColor IS lineColor
              transparency IS lineTransparency
            }
          }
          geometry DEF MinorGrid IndexedLineSet {
            coordIndex [
              0,
              1,
              -1,
              2,
              3,
              -1,
              4,
              5,
              -1,
              6,
              7,
              -1,
              8,
              9,
              -1,
              10,
              11,
              -1,
              12,
              13,
              -1,
              14,
              15,
              -1,
              16,
              17,
              -1,
              18,
              19,
              -1,
              20,
              21,
              -1,
              22,
              23,
              -1,
              24,
              25,
              -1,
              26,
              27,
              -1,
              28,
              29,
              -1,
              30,
              31,
              -1
            ]
            coord Coordinate {
              point [
                -4 0 -5,
                -4 0 5,
                -3 0 -5,
                -3 0 5,
                -2 0 -5,
                -2 0 5,
                -1 0 -5,
                -1 0 5,
                1 0 -5,
                1 0 5,
                2 0 -5,
                2 0 5,
                3 0 -5,
                3 0 5,
                4 0 -5,
                4 0 5,
                -5 0 -4,
                5 0 -4,
                -5 0 -3,
                5 0 -3,
                -5 0 -2,
                5 0 -2,
                -5 0 -1,
                5 0 -1,
                -5 0 1,
                5 0 1,
                -5 0 2,
                5 0 2,
                -5 0 3,
                5 0 3,
                -5 0 4,
                5 0 4
              ]
            }
          }
        }
      }
      Transform {
        children Shape {
          appearance Appearance {
            lineProperties LineProperties {
              linewidthScaleFactor 6
            }
            material USE MajorMaterial
          }
          geometry DEF MajorPoints PointSet {
            coord Coordinate {
              point [
                0 -10 0,
                0 -5 0,
                0 0 0,
                0 5 0,
                0 10 0
              ]
            }
          }
        }
      }
      Transform {
        children Shape {
          appearance Appearance {
            lineProperties LineProperties {
              linewidthScaleFactor 4
            }
            material USE MinorMaterial
          }
          geometry DEF MinorPoints PointSet {
            coord Coordinate {
              point [
                0 -9 0,
                0 -8 0,
                0 -7 0,
                0 -6 0,
                0 -4 0,
                0 -3 0,
                0 -2 0,
                0 -1 0,
                0 1 0,
                0 2 0,
                0 3 0,
                0 4 0,
                0 6 0,
                0 7 0,
                0 8 0,
                0 9 0
              ]
            }
          }
        }
      }
    ]
  }

  DEF GridScript Script {
    inputOutput    MFInt32 dimension IS dimension
    inputOutput    MFInt32 majorLineEvery IS majorLineEvery
    inputOutput    MFInt32 majorLineOffset IS majorLineOffset
    initializeOnly SFNode  plane USE Plane
    initializeOnly SFNode  majorGrid USE MajorGrid
    initializeOnly SFNode  minorGrid USE MinorGrid
    initializeOnly SFNode  majorPoints USE MajorPoints
    initializeOnly SFNode  minorPoints USE MinorPoints

    url "vrmlscript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	// Plane

	plane .scale = new SFVec3f (dimension [0], dimension [2], 1);

	// Grid

	generateGrid (true, majorGrid);
	generateGrid (false, minorGrid);

	// Points

	generatePoints (true,  majorPoints .coord .point);
	generatePoints (false, minorPoints .coord .point);
}

function generateGrid (major, grid)
{
	var point       = grid .coord .point;
	var coordIndex  = new MFInt32 ();
	var scaleX1_2   = dimension [0] / 2;
	var scaleZ1_2   = dimension [2] / 2;
	var majorAdd    = major / 4;
	var p           = 0;

	for (var i = 0, size = dimension [0] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 0))
			continue;

		var x = -scaleX1_2 + i;

		point [p]     = new SFVec3f (x, 0, -scaleZ1_2 - majorAdd);
		point [p + 1] = new SFVec3f (x, 0,  scaleZ1_2 + majorAdd);
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;
			
		p += 2;
	}

	for (var i = 0, size = dimension [2] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 2))
			continue;

		var z = -scaleZ1_2 + i;

		point [p]     = new SFVec3f (-scaleX1_2 - majorAdd, 0, z);
		point [p + 1] = new SFVec3f ( scaleX1_2 + majorAdd, 0, z);
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;
		
		p += 2;
	}

	point .length = p;

	grid .set_coordIndex = coordIndex;
}

function generatePoints (major, point)
{
	var scaleY1_2 = -dimension [1] / 2;
	var p         = 0;

	for (var i = 0, size = dimension [1] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 1))
			continue;

		point [p] = new SFVec3f (0, scaleY1_2 + i, 0);
		++ p;
	}

	point .length = p;
}

function isMajorLine (i, index)
{
	for (var d = index; d < majorLineEvery .length; d += 3)
	{
		if (isMajor (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - dimension / 2 - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}
"
    directOutput TRUE
    mustEvaluate TRUE
  }
}

DEF GridTool Collision {
  enabled FALSE
  children [
    DEF Grid_1 PickableGroup {
      pickable FALSE
      children DEF _1 Grid {
        dimension [
          10,
          10,
          10
        ]
        transparency 0.8
      }
    }
    DEF Center Transform {
      children [
        DEF _2 PlaneSensor {
          axisRotation 1 0 0 1.5708
          autoOffset FALSE
        }
        DEF _3 Transform {
          children ScreenGroup {
            children DEF Sphere Transform {
              scale 6 6 6
              children Shape {
                appearance DEF _4 Appearance {
                  shaders ToolShader {
                    diffuseColor 1 0.7 0
                  }
                }
                geometry Sphere { }
              }
            }
          }
        }
      ]
    }
    DEF DimensionHandle Transform {
      children [
        DEF _5 PlaneSensor {
          axisRotation 1 0 0 1.5708
          autoOffset FALSE
          offset 5 0 5
        }
        DEF _6 Transform {
          translation 5 0 5
          children ScreenGroup {
            children DEF Edge Transform {
              scale 3 3 3
              children Shape {
                appearance USE _4
                geometry Extrusion {
                  convex FALSE
                  crossSection [
                    1 1,
                    1 -5,
                    -1 -5,
                    -1 -1,
                    -5 -1,
                    -5 1,
                    1 1
                  ]
                  spine [
                    0 -1 0,
                    0 1 0
                  ]
                }
              }
            }
          }
        }
      ]
    }
    DEF ScaleHandle Transform {
      children [
        DEF _7 PlaneSensor {
          axisRotation 1 0 0 1.5708
          autoOffset FALSE
          offset 5 0 -5
        }
        DEF _8 Transform {
          translation 5 0 -5
          children ScreenGroup {
            children DEF Box Transform {
              scale 3 3 3
              children Shape {
                appearance USE _4
                geometry Box { }
              }
            }
          }
        }
      ]
    }
  ]
}

DEF DimensionScript Script {
  inputOutput SFVec3f scale 1 1 1
  inputOutput MFInt32 dimension [
    10,
    10,
    10
  ]
  inputOnly   SFVec3f set_translation
  outputOnly  SFVec3f translation_changed

  url "javascript:
function initialize ()
{
	eventsProcessed ();
}

function set_translation (value)
{
	var oddX = dimension [0] % 2;
	var oddZ = dimension [2] % 2;

	dimension [0] = Math .round (value .x);
	dimension [2] = Math .round (value .z);
	
	dimension [0] = Math .max (dimension [0], 1);
	dimension [2] = Math .max (dimension [2], 1);

	dimension [0] *= 2;
	dimension [2] *= 2;

	dimension [0] -= oddX;
	dimension [2] -= oddZ;
}

function eventsProcessed ()
{
	translation_changed = new SFVec3f (dimension [0] / 2 , 0, dimension [2] / 2);
}
"
}

DEF MoveScript Script {
  inputOutput SFVec3f    scale 1 1 1
  inputOnly   SFVec3f    set_translation
  inputOutput SFRotation rotation 0 0 1 0
  outputOnly  SFVec3f    translation_changed
  outputOnly  SFRotation axisOfRotation_changed

  url "javascript:

function set_translation (value)
{
	var translation = rotation .inverse () .multVec (value); 

	if (scale .x)
		translation .x = Math .round (translation .x / scale .x) * scale .x;

	if (scale .y)
		translation .y = Math .round (translation .y / scale .y) * scale .y;

	if (scale .z)
		translation .z = Math .round (translation .z / scale .z) * scale .z;

	translation_changed = rotation .multVec (translation);
}

function set_rotation (value)
{
	axisOfRotation_changed = new SFRotation (1, 0, 0, Math .PI / 2) .multiply (value);
}"
}

DEF ScaleScript Script {
  inputOutput SFVec3f scale 1 1 1
  inputOnly   SFBool  set_active
  inputOnly   SFVec3f set_translation
  inputOutput MFInt32 dimension [
    10,
    10,
    10
  ]
  outputOnly  SFVec3f translation_changed

  url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function set_translation (value)
{
	var length = new SFVec2f (2 * value .x / dimension [0], -2 * value .z / dimension [2]) .length ();
	var factor = length / new SFVec2f (scale .x, scale .z) .length ();

	scale .x *= factor;
	scale .z *= factor;
}

function eventsProcessed ()
{
	translation_changed = new SFVec3f (scale .x * dimension [0] / 2, 0, -scale .z * dimension [2] / 2);
}"
}

DEF Tool Script {
  inputOutput SFVec3f    translation 0 0 0
  inputOutput SFRotation rotation 0 0 1 0
  inputOutput SFVec3f    scale 1 1 1
  inputOutput MFInt32    dimension [
    10,
    10,
    10
  ]
  inputOutput MFInt32    majorLineEvery [
    5,
    5,
    5
  ]
  inputOutput MFInt32    majorLineOffset [
    0,
    0,
    0
  ]
  inputOutput SFColor    color 0.5 0.5 0.5
  inputOutput SFFloat    transparency 0.8
  inputOutput SFColor    lineColor 1 0.7 0.7
  inputOutput SFFloat    lineTransparency 0.8
  inputOutput SFColor    majorLineColor 1 0.7 0.7
  inputOutput SFFloat    majorLineTransparency 0.6

}

ROUTE DimensionScript.translation_changed TO _6.set_translation
ROUTE _5.translation_changed TO DimensionScript.set_translation
ROUTE DimensionScript.translation_changed TO _5.set_offset
ROUTE _2.translation_changed TO MoveScript.set_translation
ROUTE Tool.translation_changed TO _2.set_offset
ROUTE MoveScript.translation_changed TO Tool.set_translation
ROUTE Tool.transparency_changed TO _1.set_transparency
ROUTE Tool.color_changed TO _1.set_color
ROUTE Tool.rotation_changed TO DimensionHandle.set_rotation
ROUTE Tool.translation_changed TO DimensionHandle.set_translation
ROUTE Tool.translation_changed TO _3.set_translation
ROUTE MoveScript.axisOfRotation_changed TO _2.set_axisRotation
ROUTE Tool.rotation_changed TO MoveScript.set_rotation
ROUTE Tool.dimension_changed TO DimensionScript.set_dimension
ROUTE DimensionScript.dimension_changed TO Tool.set_dimension
ROUTE Tool.dimension_changed TO _1.set_dimension
ROUTE Tool.majorLineEvery_changed TO _1.set_majorLineEvery
ROUTE Tool.lineColor_changed TO _1.set_lineColor
ROUTE Tool.lineTransparency_changed TO _1.set_lineTransparency
ROUTE Tool.majorLineColor_changed TO _1.set_majorLineColor
ROUTE Tool.majorLineTransparency_changed TO _1.set_majorLineTransparency
ROUTE Tool.majorLineOffset_changed TO _1.set_majorLineOffset
ROUTE Tool.scale_changed TO DimensionScript.set_scale
ROUTE Tool.scale_changed TO MoveScript.set_scale
ROUTE Tool.translation_changed TO _1.set_translation
ROUTE Tool.rotation_changed TO _1.set_rotation
ROUTE Tool.scale_changed TO _1.set_scale
ROUTE Tool.scale_changed TO DimensionHandle.set_scale
ROUTE ScaleScript.translation_changed TO _8.set_translation
ROUTE _7.translation_changed TO ScaleScript.set_translation
ROUTE Tool.scale_changed TO ScaleScript.set_scale
ROUTE ScaleScript.scale_changed TO Tool.set_scale
ROUTE Tool.dimension_changed TO ScaleScript.set_dimension
ROUTE ScaleScript.translation_changed TO _7.set_offset
ROUTE _7.isActive TO ScaleScript.set_active
ROUTE Tool.translation_changed TO ScaleHandle.set_translation
ROUTE Tool.rotation_changed TO ScaleHandle.set_rotation

EXPORT Tool
