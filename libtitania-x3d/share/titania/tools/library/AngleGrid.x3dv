#X3D V3.3 utf8 Titania V3.0.4

PROFILE Full

META "comment" "World of Titania"
META "created" "Thu, 15 Jun 2017 07:19:14 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V3.0.4, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/tools/library/AngleGrid.x3dv"
META "modified" "Thu, 15 Jun 2017 07:19:18 GMT"
META "titania-add-world-info" "true"

PROTO AngleGrid [
  inputOutput    SFVec3f    translation 0 0 0
  inputOutput    SFRotation rotation 0 0 1 0
  inputOutput    SFVec3f    scale 1 1 1
  inputOutput    MFInt32    dimension [
    5,
    16,
    10
  ]
  inputOutput    MFInt32    majorLineEvery [
    5,
    2,
    5
  ]
  inputOutput    MFInt32    majorLineOffset [
    0,
    0,
    0
  ]
  inputOutput    SFColor    color 0.5 0.5 0.5
  inputOutput    SFFloat    transparency 0.8
  inputOutput    SFColor    lineColor 1 0.7 0.7
  inputOutput    SFFloat    lineTransparency 0.8
  inputOutput    SFColor    majorLineColor 1 0.7 0.7
  inputOutput    SFFloat    majorLineTransparency 0.6
  initializeOnly SFBool     solid TRUE
]
{
  Transform {
    translation IS translation
    rotation IS rotation
    scale IS scale
    children [
      DEF Disk Transform {
        rotation -5.2594820914624e-13 0.70710528118436 0.707108281185553 3.14159
        scale 5 5 1
        children Shape {
          appearance Appearance {
            material DEF Material2 Material {
              diffuseColor 0 0 0
              emissiveColor IS color
              transparency IS transparency
            }
          }
          geometry Disk2D {
            solid IS solid
          }
        }
      }
      DEF Rings Transform {
        rotation 0 0.70710528118436 0.707108281185553 3.14159
        children [
          Transform {
            children Shape {
              appearance DEF MinorAppearance Appearance {
                material DEF _1 Material {
                  emissiveColor IS lineColor
                  transparency IS lineTransparency
                }
              }
              geometry Circle2D { }
            }
          }
          Transform {
            scale 2 2 2
            children Shape {
              appearance USE MinorAppearance
              geometry Circle2D { }
            }
          }
          Transform {
            scale 3 3 3
            children Shape {
              appearance USE MinorAppearance
              geometry Circle2D { }
            }
          }
          Transform {
            scale 4 4 4
            children Shape {
              appearance USE MinorAppearance
              geometry Circle2D { }
            }
          }
          Transform {
            scale 5 5 5
            children Shape {
              appearance DEF MajorAppearance Appearance {
                material DEF MajorMaterial Material {
                  emissiveColor IS majorLineColor
                  transparency IS majorLineTransparency
                }
              }
              geometry Circle2D { }
            }
          }
        ]
      }
      DEF MinorLines Shape {
        appearance USE MinorAppearance
        geometry DEF MinorLines_1 IndexedLineSet {
          coordIndex [
            0,
            1,
            -1,
            0,
            2,
            -1,
            0,
            3,
            -1,
            0,
            4,
            -1,
            0,
            5,
            -1,
            0,
            6,
            -1,
            0,
            7,
            -1,
            0,
            8,
            -1
          ]
          coord Coordinate {
            point [
              0 0 0,
              1.91342 0 4.6194,
              4.6194 0 1.91342,
              4.6194 0 -1.91342,
              1.91342 0 -4.6194,
              -1.91342 0 -4.6194,
              -4.6194 0 -1.91342,
              -4.6194 0 1.91342,
              -1.91342 0 4.6194
            ]
          }
        }
      }
      DEF MajorLines Shape {
        appearance USE MajorAppearance
        geometry DEF MajorLines_1 IndexedLineSet {
          coordIndex [
            0,
            1,
            -1,
            0,
            2,
            -1,
            0,
            3,
            -1,
            0,
            4,
            -1,
            0,
            5,
            -1,
            0,
            6,
            -1,
            0,
            7,
            -1,
            0,
            8,
            -1
          ]
          coord Coordinate {
            point [
              0 0 0,
              0 0 5,
              3.53553 0 3.53553,
              5 0 3.06162e-16,
              3.53553 0 -3.53553,
              6.12323e-16 0 -5,
              -3.53553 0 -3.53553,
              -5 0 -9.18485e-16,
              -3.53553 0 3.53553
            ]
          }
        }
      }
      DEF MinorPoints Shape {
        appearance Appearance {
          lineProperties LineProperties {
            linewidthScaleFactor 4
          }
          material USE _1
        }
        geometry DEF MinorPoints_1 PointSet {
          coord Coordinate {
            point [
              0 -4 0,
              0 -3 0,
              0 -2 0,
              0 -1 0,
              0 1 0,
              0 2 0,
              0 3 0,
              0 4 0
            ]
          }
        }
      }
      DEF MajorPoints Shape {
        appearance Appearance {
          lineProperties LineProperties {
            linewidthScaleFactor 6
          }
          material USE MajorMaterial
        }
        geometry DEF MajorPoints_1 PointSet {
          coord Coordinate {
            point [
              0 -5 0,
              0 0 0,
              0 5 0
            ]
          }
        }
      }
    ]
  }

  DEF AngleGridScript Script {
    inputOutput    MFInt32 dimension IS dimension
    inputOutput    MFInt32 majorLineEvery IS majorLineEvery
    inputOutput    MFInt32 majorLineOffset IS majorLineOffset
    initializeOnly SFNode  disk USE Disk
    initializeOnly SFNode  rings USE Rings
    initializeOnly SFNode  minorLines USE MinorLines_1
    initializeOnly SFNode  majorLines USE MajorLines_1
    initializeOnly SFNode  minorPoints USE MinorPoints_1
    initializeOnly SFNode  majorPoints USE MajorPoints_1
    initializeOnly SFNode  minorAppearance USE MinorAppearance
    initializeOnly SFNode  majorAppearance USE MajorAppearance

    url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var radius = dimension [0];

	// Plane

	disk .scale = new SFVec3f (radius, radius, 1);

	// Radiuses

	generateRadiuses (true,  radius, majorLines);
	generateRadiuses (false, radius, minorLines);

	// Rings

	generateRings ();

	// Points

	generatePoints (true,  majorPoints .coord .point);
	generatePoints (false, minorPoints .coord .point);
}

function generateRadiuses (major, radius, grid)
{
	var angle      = 2 * Math .PI / dimension [1];
	var coordIndex = new MFInt32 ();
	var point      = grid .coord .point;
	var p          = 0;

	point [p ++] = new SFVec3f ();

	for (var i = 0, c = 0; i < dimension [1]; ++ i)
	{
		if (major - isMajorLine (i, 1))
			continue;
	
		var a = angle * i;

		point [p] = new SFVec3f (radius * Math .sin (a), 0, radius * Math .cos (a));

		coordIndex [c ++] = 0;
		coordIndex [c ++] = p;
		coordIndex [c ++] = -1;
		
		++ p;
	}

	point .length = p;

	grid .set_coordIndex = coordIndex;
}

function generateRings ()
{
	var scene = Browser .currentScene;
	var size  = Math .min (dimension [0], rings .children .length);

	for (var i = 0; i < size; ++ i)
	{
		var s         = i + 1;
		var transform = rings .children [i];
		var major     = isMajorLine (s, 0);

		transform .children [0] .appearance = major ? majorAppearance : minorAppearance;
		transform .scale                    = new SFVec3f (s, s, s);
	}

	for (var i = size; i < dimension [0]; ++ i)
	{
		var s         = i + 1;
		var circle    = scene .createNode (\"Circle2D\");
		var shape     = scene .createNode (\"Shape\");
		var transform = scene .createNode (\"Transform\");
		var major     = isMajorLine (s, 0);

		shape .appearance       = major ? majorAppearance : minorAppearance;
		shape .geometry         = circle;
		transform .children [0] = shape;
		transform .scale        = new SFVec3f (s, s, s);
		rings .children [i]     = transform;
	}

	rings .children .length = dimension [0];
}

function generatePoints (major, point)
{
	var scaleY1_2 = -dimension [2] / 2;
	var p         = 0;

	for (var i = 0, size = dimension [2] + 1; i < size; ++ i)
	{
		if (major - isMajorLineXYZ (i, 2))
			continue;

		point [p] = new SFVec3f (0, scaleY1_2 + i, 0);
		++ p;
	}

	point .length = p;
}

function isMajorLine (i, index)
{
	for (var d = index; d < majorLineEvery .length; d += 3)
	{
		if (isMajor (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}

function isMajorLineXYZ (i, index)
{
	for (var d = index; d < majorLineEvery .length; d += 3)
	{
		if (isMajorXYZ (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajorXYZ (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - dimension / 2 - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}
"
    directOutput TRUE
    mustEvaluate TRUE
  }
}

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF AngleGrid MetadataSet {
        name "AngleGrid"
        reference "http://titania.create3000.de"
        value DEF enabled MetadataBoolean {
          name "enabled"
          reference "http://titania.create3000.de"
          value FALSE
        }
      }
      DEF Grid MetadataSet {
        name "Grid"
        reference "http://titania.create3000.de"
        value DEF enabled_1 MetadataBoolean {
          name "enabled"
          reference "http://titania.create3000.de"
          value TRUE
        }
      }
      DEF NavigationInfo MetadataSet {
        name "NavigationInfo"
        reference "http://titania.create3000.de"
        value DEF type MetadataString {
          name "type"
          reference "http://titania.create3000.de"
          value "EXAMINE"
        }
      }
      DEF Viewpoint MetadataSet {
        name "Viewpoint"
        reference "http://titania.create3000.de"
        value [
          DEF position MetadataDouble {
            name "position"
            reference "http://titania.create3000.de"
            value [
              5.87788544764696,
              6.46984938591101,
              13.8524443931466
            ]
          }
          DEF orientation MetadataDouble {
            name "orientation"
            reference "http://titania.create3000.de"
            value [
              -0.704047462871212,
              0.695566762376517,
              0.143192350010952,
              0.568941727555854
            ]
          }
          DEF centerOfRotation MetadataDouble {
            name "centerOfRotation"
            reference "http://titania.create3000.de"
            value [
              -1.77635683940025e-15,
              -7.105427357601e-15,
              3.5527136788005e-15
            ]
          }
        ]
      }
      DEF Page MetadataSet {
        name "Page"
        reference "http://titania.create3000.de"
        value [
          DEF activeView MetadataInteger {
            name "activeView"
            reference "http://titania.create3000.de"
            value 1
          }
          DEF multiView MetadataInteger {
            name "multiView"
            reference "http://titania.create3000.de"
            value 0
          }
        ]
      }
      DEF Selection MetadataSet {
        name "Selection"
        reference "http://titania.create3000.de"
        value DEF selectGeometry MetadataBoolean {
          name "selectGeometry"
          reference "http://titania.create3000.de"
          value FALSE
        }
      }
    ]
  }
}
