#X3D V3.3 utf8 Titania V3.0.0

PROFILE Full

COMPONENT Titania : 1

META "comment" "World of Titania"
META "created" "Tue, 05 Aug 2014 20:06:52 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V3.0.0, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/tools/library/AxonometricGrid.x3dv"
META "modified" "Tue, 28 Mar 2017 12:20:22 GMT"
META "outputStyle" "Nicest"

PROTO AxonometricGrid [
  inputOutput    SFVec3f    translation 0 0 0
  inputOutput    SFRotation rotation 0 0 1 0
  inputOutput    SFVec3f    scale 1 1 1
  inputOutput    SFVec2f    angle 1.0472 1.0472
  inputOutput    MFInt32    dimension [
    10,
    10
  ]
  inputOutput    MFInt32    majorLineEvery [
    5,
    5,
    5,
    5
  ]
  inputOutput    MFInt32    majorLineOffset [
    0,
    0,
    0,
    0
  ]
  inputOutput    SFColor    color 0.5 0.5 0.5
  inputOutput    SFFloat    transparency 0.61803
  inputOutput    SFColor    lineColor 1 0.7 0.7
  inputOutput    SFFloat    lineTransparency 0.8
  inputOutput    SFColor    majorLineColor 1 0.7 0.7
  inputOutput    SFFloat    majorLineTransparency 0.6
  initializeOnly SFBool     solid TRUE
]
{
  Transform {
    translation IS translation
    rotation IS rotation
    scale IS scale
    children [
      DEF HexagonPlane Shape {
        appearance Appearance {
          material DEF Material2 Material {
            diffuseColor 0 0 0
            emissiveColor IS color
            transparency IS transparency
          }
        }
        geometry IndexedFaceSet {
          solid IS solid
          coordIndex [
            0,
            1,
            2,
            3,
            4,
            5,
            -1
          ]
          coord DEF HexagonCoord Coordinate {
            point [
              5 0 0,
              2.5 0 -4.33015,
              -2.5 0 -4.33015,
              -5 -0 -0,
              -2.5 -0 4.33015,
              2.5 -0 4.33015
            ]
          }
        }
      }
      DEF MajorGrid Shape {
        appearance Appearance {
          material DEF MajorMaterial Material {
            emissiveColor IS majorLineColor
            transparency IS majorLineTransparency
          }
        }
        geometry DEF MajorGrid_1 IndexedLineSet {
          coordIndex [
            0,
            1,
            -1,
            2,
            3,
            -1,
            4,
            5,
            -1,
            6,
            7,
            -1,
            8,
            9,
            -1,
            10,
            11,
            -1,
            12,
            13,
            -1,
            14,
            15,
            -1,
            16,
            17,
            -1
          ]
          coord Coordinate {
            point [
              -5.125 0 0.216507,
              -2.375 0 -4.54666,
              -2.625 0 4.54666,
              2.625 0 -4.54666,
              2.375 0 4.54666,
              5.125 0 -0.216507,
              -2.75 0 -4.33015,
              2.75 0 -4.33015,
              -5.25 0 0,
              5.25 0 0,
              -2.75 0 4.33015,
              2.75 0 4.33015,
              2.375 0 -4.54666,
              5.125 0 0.216507,
              -2.625 0 -4.54666,
              2.625 0 4.54666,
              -5.125 0 -0.216507,
              -2.375 0 4.54666
            ]
          }
        }
      }
      DEF MinorGrid Shape {
        appearance Appearance {
          material DEF MinorMaterial Material {
            emissiveColor IS lineColor
            transparency IS lineTransparency
          }
        }
        geometry DEF MinorGrid_1 IndexedLineSet {
          coordIndex [
            0,
            1,
            -1,
            2,
            3,
            -1,
            4,
            5,
            -1,
            6,
            7,
            -1,
            8,
            9,
            -1,
            10,
            11,
            -1,
            12,
            13,
            -1,
            14,
            15,
            -1,
            16,
            17,
            -1,
            18,
            19,
            -1,
            20,
            21,
            -1,
            22,
            23,
            -1,
            24,
            25,
            -1,
            26,
            27,
            -1,
            28,
            29,
            -1,
            30,
            31,
            -1,
            32,
            33,
            -1,
            34,
            35,
            -1,
            36,
            37,
            -1,
            38,
            39,
            -1,
            40,
            41,
            -1,
            42,
            43,
            -1,
            44,
            45,
            -1,
            46,
            47,
            -1
          ]
          coord Coordinate {
            point [
              -4.5 0 0.86603,
              -1.5 0 -4.33015,
              -4 0 1.73206,
              -0.5 0 -4.33015,
              -3.5 0 2.59809,
              0.5 0 -4.33015,
              -3 0 3.46412,
              1.5 0 -4.33015,
              -1.5 0 4.33015,
              3 0 -3.46412,
              -0.5 0 4.33015,
              3.5 0 -2.59809,
              0.5 0 4.33015,
              4 0 -1.73206,
              1.5 0 4.33015,
              4.5 0 -0.86603,
              -3 0 -3.46412,
              3 0 -3.46412,
              -3.5 0 -2.59809,
              3.5 0 -2.59809,
              -4 0 -1.73206,
              4 0 -1.73206,
              -4.5 0 -0.86603,
              4.5 0 -0.86603,
              -4.5 0 0.86603,
              4.5 0 0.86603,
              -4 0 1.73206,
              4 0 1.73206,
              -3.5 0 2.59809,
              3.5 0 2.59809,
              -3 0 3.46412,
              3 0 3.46412,
              1.5 0 -4.33015,
              4.5 0 0.86603,
              0.5 0 -4.33015,
              4 0 1.73206,
              -0.5 0 -4.33015,
              3.5 0 2.59809,
              -1.5 0 -4.33015,
              3 0 3.46412,
              -3 0 -3.46412,
              1.5 0 4.33015,
              -3.5 0 -2.59809,
              0.5 0 4.33015,
              -4 0 -1.73206,
              -0.5 0 4.33015,
              -4.5 0 -0.86603,
              -1.5 0 4.33015
            ]
          }
        }
      }
      DEF MajorPoints Shape {
        appearance Appearance {
          lineProperties LineProperties {
            linewidthScaleFactor 6
          }
          material USE MajorMaterial
        }
        geometry DEF MajorPoints_1 PointSet {
          coord Coordinate {
            point [
              0 -5 0,
              0 0 0,
              0 5 0
            ]
          }
        }
      }
      DEF MinorPoints Shape {
        appearance Appearance {
          lineProperties LineProperties {
            linewidthScaleFactor 4
          }
          material USE MinorMaterial
        }
        geometry DEF MinorPoints_1 PointSet {
          coord Coordinate {
            point [
              0 -4 0,
              0 -3 0,
              0 -2 0,
              0 -1 0,
              0 1 0,
              0 2 0,
              0 3 0,
              0 4 0
            ]
          }
        }
      }
    ]
  }

  DEF GridScript Script {
    inputOutput    SFVec2f angle IS angle
    inputOutput    MFInt32 dimension IS dimension
    inputOutput    MFInt32 majorLineEvery IS majorLineEvery
    inputOutput    MFInt32 majorLineOffset IS majorLineOffset
    initializeOnly SFNode  hexagon USE HexagonCoord
    initializeOnly SFNode  majorGrid USE MajorGrid_1
    initializeOnly SFNode  minorGrid USE MinorGrid_1
    initializeOnly SFNode  majorPoints USE MajorPoints_1
    initializeOnly SFNode  minorPoints USE MinorPoints_1

    url "peaseblossom:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var angles     = new SFVec3f (angle [0], angle [1], Math .PI - angle [0] - angle [1])
	var u          = Math .sin (angles [1]) / Math .sin (angles [2]);
	var v          = 1;
	var t          = Math .sin (angles [0]) / Math .sin (angles [2]);
	var sides      = new SFVec3f (u, 1, t);
	var heightU    = v * Math .sin (angles [0]);
	var heightV    = t * Math .sin (angles [1]);
	var heightT    = u * Math .sin (angles [2]);
	var heights    = new SFVec3f (heightU, heightV, heightT);

	// Axonometric grid

	generateGrid (true,  majorGrid, sides, heights);
	generateGrid (false, minorGrid, sides, heights);

	// Points

	generatePoints (true,  majorPoints .coord .point);
	generatePoints (false, minorPoints .coord .point);

	// Hexagon plane

	var left  = Math .sqrt (Math .pow (sides [2], 2) - Math .pow (heights [1], 2));
	var right = Math .sqrt (Math .pow (sides [0], 2) - Math .pow (heights [1], 2));

	hexagon .point [0] = new SFVec3f (v, 0, 0)             .multiply (dimension [0] / 2);
	hexagon .point [1] = new SFVec3f ( right, 0, -heightV) .multiply (dimension [0] / 2);
	hexagon .point [2] = new SFVec3f (-left,  0, -heightV) .multiply (dimension [0] / 2);
	hexagon .point [3] = hexagon .point [0] .negate ();
	hexagon .point [4] = hexagon .point [1] .negate ();
	hexagon .point [5] = hexagon .point [2] .negate ();
}

function generateGrid (major, grid, sides, heights)
{
	var coordIndex = new MFInt32 ();
	var p          = 0;

	p = generateGridAxis (0,  angle [0], sides, heights, major, grid, coordIndex, p);
	p = generateGridAxis (1,  0,         sides, heights, major, grid, coordIndex, p);
	p = generateGridAxis (2, -angle [1], sides, heights, major, grid, coordIndex, p);

	grid .coord .point .length = p;
	grid .set_coordIndex = coordIndex;
}

function generateGridAxis (axis, angle, sides, heights, major, grid, coordIndex, p)
{
	var point     = grid .coord .point;
	var majorAdd  = major / 4;
	var scale_2   = dimension [0] / 2;
	var rotation  = new SFRotation (0, 1, 0, angle);
	var height    = heights [axis];
	var side      = sides [axis];
	var lMap      = [ 2, 0, 1 ];
	var rMap      = [ 1, 2, 0 ];
	var left      = Math .sqrt (Math .pow (sides [lMap [axis]], 2) - Math .pow (heights [axis], 2));
	var right     = Math .sqrt (Math .pow (sides [rMap [axis]], 2) - Math .pow (heights [axis], 2));

	for (var n = 0, size = dimension [0] + 1; n < size; ++ n)
	{
		if (major - isMajorLine (n, axis, 0))
			continue;

		var i = n - scale_2;
		var x = scale_2 * side + majorAdd;
		var l = i > 0 ? right * i : left  * -i;
		var r = i > 0 ? left  * i : right * -i;
		var z = i * height;

		point [p]     = rotation .multVec (new SFVec3f (-x + l, 0, z));
		point [p + 1] = rotation .multVec (new SFVec3f ( x - r, 0, z));
		coordIndex [coordIndex .length] = p;
		coordIndex [coordIndex .length] = p + 1;
		coordIndex [coordIndex .length] = -1;
			
		p += 2;
	}

	return p;
}

function generatePoints (major, point)
{
	var scaleY_2 = -dimension [1] / 2;
	var p         = 0;

	for (var i = 0, size = dimension [1] + 1; i < size; ++ i)
	{
		if (major - isMajorLine (i, 3, 1))
			continue;

		point [p] = new SFVec3f (0, scaleY_2 + i, 0);
		++ p;
	}

	point .length = p;
}

function isMajorLine (i, index, di)
{
	for (var d = index; d < majorLineEvery .length; d += 4)
	{
		if (isMajor (i, dimension [di], majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - dimension / 2 - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}
"
    directOutput TRUE
    mustEvaluate TRUE
  }
}

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF Selection MetadataSet {
        name "Selection"
        reference "http://titania.create3000.de"
        value [
          DEF previous MetadataSet {
            name "previous"
            reference "http://titania.create3000.de"
            value AxonometricGrid {
              angle 0.6 1.2
              dimension [
                100,
                100,
                100,
                10
              ]
              majorLineEvery [
                10,
                10,
                10,
                5
              ]
            }
          }
          DEF nodes MetadataSet {
            name "nodes"
            reference "http://titania.create3000.de"
          }
        ]
      }
      DEF NavigationInfo MetadataSet {
        name "NavigationInfo"
        reference "http://titania.create3000.de"
        value DEF type MetadataString {
          name "type"
          reference "http://titania.create3000.de"
          value "EXAMINE"
        }
      }
      DEF Viewpoint MetadataSet {
        name "Viewpoint"
        reference "http://titania.create3000.de"
        value [
          DEF position MetadataDouble {
            name "position"
            reference "http://titania.create3000.de"
            value [
              12.2299941681429,
              29.3451489886358,
              17.4278493920652
            ]
          }
          DEF orientation MetadataDouble {
            name "orientation"
            reference "http://titania.create3000.de"
            value [
              -0.866266998016664,
              0.469886549735607,
              0.169670617741446,
              1.08681569140469
            ]
          }
          DEF centerOfRotation MetadataDouble {
            name "centerOfRotation"
            reference "http://titania.create3000.de"
            value [
              0,
              0,
              0
            ]
          }
        ]
      }
    ]
  }
  title "AxonometricGrid"
}
