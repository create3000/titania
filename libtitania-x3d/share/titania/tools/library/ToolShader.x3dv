#X3D V3.3 utf8 Titania V4.4.0

PROFILE Immersive

COMPONENT Shaders : 1

META "comment" "World of Titania"
META "created" "Sun, 03 Aug 2014 14:00:40 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V4.4.0, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/tools/library/ToolShader.x3dv"
META "modified" "Sat, 02 Feb 2019 19:18:01 GMT"

PROTO ToolShader [ ]
{
  # This is a phong shader where the light position is in the center of the object
  DEF ToolShader ComposedShader {
    language "GLSL"
    parts [
      DEF ToolVertexShader ShaderPart {
        url "data:text/plain,#version 330

precision mediump float;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat3 x3d_NormalMatrix;
uniform mat4 x3d_TextureMatrix [x3d_MaxTextures];

uniform x3d_LinePropertiesParameters x3d_LineProperties;

in vec4 x3d_Vertex;
in vec3 x3d_Normal;
in vec4 x3d_Color;
in vec4 x3d_TexCoord0;

out vec3 vertex;
out vec3 normal;
out vec4 color;
out vec4 texCoord;

void
main ()
{
	gl_PointSize = x3d_LineProperties .linewidthScaleFactor + 1.0;

	vertex   = vec3 (x3d_ModelViewMatrix * x3d_Vertex);
	normal   = normalize (x3d_NormalMatrix * x3d_Normal);
  color    = x3d_Color;
  texCoord = x3d_TextureMatrix [0] * x3d_TexCoord0;

	gl_Position = x3d_ProjectionMatrix * x3d_ModelViewMatrix * x3d_Vertex;
}
"
      }
      DEF ToolFragmentShader ShaderPart {
        type "FRAGMENT"
        url "data:text/plain,#version 330

precision mediump float;

uniform int x3d_GeometryType;
uniform x3d_LinePropertiesParameters x3d_LineProperties;
uniform bool x3d_Lighting;
uniform x3d_MaterialParameters x3d_FrontMaterial;
uniform bool x3d_ColorMaterial;
uniform int x3d_NumTextures;
uniform sampler2D x3d_Texture2D [x3d_MaxTextures];

in vec3 vertex;
in vec3 normal;
in vec4 color;
in vec4 texCoord;

out vec4 x3d_FragColor;

void
main ()
{
	vec3  finalColor = vec3 (0.0, 0.0, 0.0);
	float alpha      = 1.0;

	float lw = (x3d_LineProperties .linewidthScaleFactor + 1.0) / 2.0;
	float t  = x3d_GeometryType == x3d_Points ? distance (vec2 (0.5, 0.5), gl_PointCoord) * 2.0 * lw - lw + 1.0 : 0.0;

	if (x3d_Lighting)
	{
		if (x3d_GeometryType > 1)
		{
			vec3 N = normalize (gl_FrontFacing ? normal : -normal);
			vec3 V = normalize (-vertex); // normalized vector from point on geometry to viewer's position

			vec3 d = vec3 (0.0, 0.0, -1.0); // light direction
			vec3 L = -d;
			vec3 H = normalize (L + V); // specular term

			vec3  diffuseColor   = x3d_ColorMaterial ? color .rgb : x3d_FrontMaterial .diffuseColor;
			vec3  diffuseTerm    = diffuseColor * max (dot (N, L), 0.0);
			float specularFactor = bool (x3d_FrontMaterial .shininess) ? pow (max (dot (N, H), 0.0), x3d_FrontMaterial .shininess * 128.0) : 1.0;
			vec3  specularTerm   = x3d_FrontMaterial .specularColor * specularFactor;

			finalColor += diffuseTerm + specularTerm ;
		}

		finalColor += x3d_FrontMaterial .emissiveColor;

		alpha = mix (1.0 - x3d_FrontMaterial .transparency, 0.0, clamp (t, 0.0, 1.0));
	}
	else
	{
		finalColor += x3d_ColorMaterial ? color .rgb : x3d_FrontMaterial .emissiveColor;
		alpha       = mix (color .a, 0.0, clamp (t, 0.0, 1.0));
	}

  if (x3d_NumTextures > 0)
  {
    vec3 tc = texCoord .stp / texCoord .q;
    vec4 t  = texture (x3d_Texture2D [0], tc .st);

    finalColor *= t .rgb;
    alpha      *= t .a;
  }

	x3d_FragColor = vec4 (finalColor, alpha);
}
"
      }
    ]
  }
}

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF NavigationInfo MetadataSet {
        name "NavigationInfo"
        reference "http://titania.create3000.de"
        value DEF type MetadataString {
          name "type"
          reference "http://titania.create3000.de"
          value "EXAMINE"
        }
      }
      DEF Viewpoint MetadataSet {
        name "Viewpoint"
        reference "http://titania.create3000.de"
        value [
          DEF position MetadataDouble {
            name "position"
            reference "http://titania.create3000.de"
            value [
              0,
              0,
              10
            ]
          }
          DEF orientation MetadataDouble {
            name "orientation"
            reference "http://titania.create3000.de"
            value [
              0,
              0,
              1,
              0
            ]
          }
          DEF centerOfRotation MetadataDouble {
            name "centerOfRotation"
            reference "http://titania.create3000.de"
            value [
              0,
              0,
              0
            ]
          }
        ]
      }
      DEF Selection MetadataSet {
        name "Selection"
        reference "http://titania.create3000.de"
        value [
          DEF nodes MetadataSet {
            name "nodes"
            reference "http://titania.create3000.de"
            value NULL
          }
          DEF selectGeometry MetadataBoolean {
            name "selectGeometry"
            reference "http://titania.create3000.de"
            value FALSE
          }
        ]
      }
      DEF Page MetadataSet {
        name "Page"
        reference "http://titania.create3000.de"
        value [
          DEF activeView MetadataInteger {
            name "activeView"
            reference "http://titania.create3000.de"
            value 1
          }
          DEF multiView MetadataInteger {
            name "multiView"
            reference "http://titania.create3000.de"
            value 0
          }
        ]
      }
    ]
  }
  title "ToolShader"
}
