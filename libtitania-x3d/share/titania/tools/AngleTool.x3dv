#X3D V3.3 utf8 Titania V0.7.4

PROFILE Full

COMPONENT Titania : 1

META "comment" "World of Titania"
META "created" "Tue, 05 Aug 2014 20:06:52 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.4, http://titania.create3000.de"
META "modified" "Wed, 01 Oct 2014 06:59:51 GMT"

EXTERNPROTO ToolShader [
  inputOutput SFFloat ambientIntensity
  inputOutput SFColor diffuseColor
  inputOutput SFColor specularColor
  inputOutput SFColor emissiveColor
  inputOutput SFFloat shininess
  inputOutput SFFloat transparency
]
"library/ToolShader.x3dv"

PROTO AngleGrid [
  inputOutput    SFVec3f    translation 0 0 0
  inputOutput    SFRotation rotation 0 0 1 0
  inputOutput    SFVec3f    scale 1 1 1
  inputOutput    MFInt32    dimension [
    5,
    16
  ]
  inputOutput    MFInt32    majorLineEvery [
    5,
    2
  ]
  inputOutput    MFInt32    majorLineOffset [
    0,
    0
  ]
  inputOutput    SFColor    color 0.5 0.5 0.5
  inputOutput    SFFloat    transparency 0.8
  inputOutput    SFColor    lineColor 1 0.7 0.7
  inputOutput    SFFloat    lineTransparency 0.8
  inputOutput    SFColor    majorLineColor 1 0.7 0.7
  inputOutput    SFFloat    majorLineTransparency 0.6
  initializeOnly SFBool     solid TRUE
]
{
  Transform {
    translation IS translation
    rotation IS rotation
    scale IS scale
    children [
      DEF Disk_1 Transform {
        rotation -5.25948e-13 0.707105 0.707108 3.14159
        scale 5 5 1
        children Shape {
          appearance Appearance {
            material DEF Material2_1 Material {
              diffuseColor 0 0 0
              emissiveColor IS color
              transparency IS transparency
            }
          }
          geometry Disk2D {
            solid IS solid
          }
        }
      }
      DEF Rings Transform {
        rotation 0 0.707105 0.707108 3.14159
        children [
          Transform {
            children Shape {
              appearance DEF MinorAppearance Appearance {
                material Material {
                  emissiveColor IS lineColor
                  transparency IS lineTransparency
                }
              }
              geometry Circle2D { }
            }
          }
          Transform {
            scale 2 2 2
            children Shape {
              appearance USE MinorAppearance
              geometry Circle2D { }
            }
          }
          Transform {
            scale 3 3 3
            children Shape {
              appearance USE MinorAppearance
              geometry Circle2D { }
            }
          }
          Transform {
            scale 4 4 4
            children Shape {
              appearance USE MinorAppearance
              geometry Circle2D { }
            }
          }
          Transform {
            scale 5 5 5
            children Shape {
              appearance DEF MajorAppearance Appearance {
                material DEF MajorMaterial Material {
                  emissiveColor IS majorLineColor
                  transparency IS majorLineTransparency
                }
              }
              geometry Circle2D { }
            }
          }
        ]
      }
      DEF MinorLines Shape {
        appearance USE MinorAppearance
        geometry DEF MinorLines_1 IndexedLineSet {
          coordIndex [
            0,
            1,
            -1,
            0,
            2,
            -1,
            0,
            3,
            -1,
            0,
            4,
            -1,
            0,
            5,
            -1,
            0,
            6,
            -1,
            0,
            7,
            -1,
            0,
            8,
            -1
          ]
          coord Coordinate {
            point [
              0 0 0,
              1.91342 0 4.6194,
              4.6194 0 1.91342,
              4.6194 0 -1.91342,
              1.91342 0 -4.6194,
              -1.91342 0 -4.6194,
              -4.6194 0 -1.91342,
              -4.6194 0 1.91342,
              -1.91342 0 4.6194
            ]
          }
        }
      }
      DEF MajorLines_1 Shape {
        appearance USE MajorAppearance
        geometry DEF MajorLines IndexedLineSet {
          coordIndex [
            0,
            1,
            -1,
            0,
            2,
            -1,
            0,
            3,
            -1,
            0,
            4,
            -1,
            0,
            5,
            -1,
            0,
            6,
            -1,
            0,
            7,
            -1,
            0,
            8,
            -1
          ]
          coord Coordinate {
            point [
              0 0 0,
              0 0 5,
              3.53553 0 3.53553,
              5 0 3.06162e-16,
              3.53553 0 -3.53553,
              6.12323e-16 0 -5,
              -3.53553 0 -3.53553,
              -5 0 -9.18485e-16,
              -3.53553 0 3.53553
            ]
          }
        }
      }
    ]
  }

  DEF AngleGridScript_1 Script {
    inputOutput    MFInt32 dimension IS dimension
    inputOutput    MFInt32 majorLineEvery IS majorLineEvery
    inputOutput    MFInt32 majorLineOffset IS majorLineOffset
    initializeOnly SFNode  disk USE Disk_1
    initializeOnly SFNode  rings USE Rings
    initializeOnly SFNode  minorLines USE MinorLines_1
    initializeOnly SFNode  majorLines USE MajorLines
    initializeOnly SFNode  minorAppearance USE MinorAppearance
    initializeOnly SFNode  majorAppearance USE MajorAppearance

    url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var radius = dimension [0];

	// Plane

	disk .scale = new SFVec3f (radius, radius, 1);

	// Radiuses

	generateRadiuses (true,  radius, majorLines);
	generateRadiuses (false, radius, minorLines);

	// Rings

	generateRings ();
}

function generateRadiuses (major, radius, grid)
{
	var angle      = 2 * Math .PI / dimension [1];
	var coordIndex = new MFInt32 ();
	var point      = grid .coord .point;
	var p          = 0;

	point [p ++] = new SFVec3f ();

	for (var i = 0, c = 0; i < dimension [1]; ++ i)
	{
		if (major - isMajorLine (i, 1))
			continue;
	
		var a = angle * i;

		point [p] = new SFVec3f (radius * Math .sin (a), 0, radius * Math .cos (a));

		coordIndex [c ++] = 0;
		coordIndex [c ++] = p;
		coordIndex [c ++] = -1;
		
		++ p;
	}

	point .length = p;

	grid .set_coordIndex = coordIndex;
}

function generateRings ()
{
	var scene = Browser .currentScene;
	var size  = Math .min (dimension [0], rings .children .length);

	for (var i = 0; i < size; ++ i)
	{
		var s         = i + 1;
		var transform = rings .children [i];
		var major     = isMajorLine (s, 0);

		transform .children [0] .appearance = major ? majorAppearance : minorAppearance;
		transform .scale                    = new SFVec3f (s, s, s);
	}

	for (var i = size; i < dimension [0]; ++ i)
	{
		var s         = i + 1;
		var circle    = scene .createNode (\"Circle2D\");
		var shape     = scene .createNode (\"Shape\");
		var transform = scene .createNode (\"Transform\");
		var major     = isMajorLine (s, 0);

		shape .appearance       = major ? majorAppearance : minorAppearance;
		shape .geometry         = circle;
		transform .children [0] = shape;
		transform .scale        = new SFVec3f (s, s, s);
		rings .children [i]     = transform;
	}

	rings .children .length = dimension [0];
}

function isMajorLine (i, index)
{
	for (var d = index; d < majorLineEvery .length; d += 2)
	{
		if (isMajor (i, dimension [index], majorLineEvery [d], majorLineOffset [d]))
			return true;
	}

	return false;
}

function isMajor (i, dimension, majorLineEvery, majorLineOffset)
{
	if (majorLineEvery)
	{
		var index = Math .floor (i - majorLineOffset);

		return !(index % majorLineEvery);
	}

	return false;
}"
    directOutput TRUE
    mustEvaluate TRUE
  }
}

DEF AngleTool Transform {
  children [
    DEF AngleGrid TouchGroup {
      enabled FALSE
      children DEF _1 AngleGrid { }
    }
    DEF Center_1 Transform {
      children [
        DEF _2 PlaneSensor {
          axisRotation 1 0 0 1.5708
          autoOffset FALSE
        }
        DEF _3 Transform {
          children ScreenGroup {
            children DEF Sphere_1 Transform {
              scale 6 6 6
              children Shape {
                appearance DEF _4 Appearance {
                  shaders ToolShader {
                    diffuseColor 1 0.7 0
                  }
                }
                geometry Sphere { }
              }
            }
          }
        }
      ]
    }
    DEF Handles Transform {
      children [
        DEF AngleHandle Group {
          children [
            DEF _5 CylinderSensor {
              diskAngle 1.2
              offset 0.392699
            }
            DEF Handle Transform {
              rotation 0 1 0 0.392699
              children DEF _6 Transform {
                translation 0 0 4
                children ScreenGroup {
                  children Transform {
                    scale 6 6 6
                    children Shape {
                      appearance USE _4
                      geometry Sphere { }
                    }
                  }
                }
              }
            }
          ]
        }
        DEF DimensionHandle Group {
          children [
            DEF _7 PlaneSensor {
              axisRotation 1 0 0 1.5708
              autoOffset FALSE
              offset 0 0 5
              maxPosition 0 -1
            }
            DEF _8 Transform {
              translation 0 0 5
              children ScreenGroup {
                children DEF Sphere Transform {
                  scale 6 3 3
                  children Shape {
                    appearance USE _4
                    geometry Box { }
                  }
                }
              }
            }
          ]
        }
      ]
    }
    DEF ScaleHandle_1 Transform {
      children [
        DEF _9 PlaneSensor {
          axisRotation 1 0 0 1.5708
          autoOffset FALSE
          offset 3.53553 0 -3.53553
        }
        DEF _10 Transform {
          translation 3.53553 0 -3.53553
          children ScreenGroup {
            children DEF Box_1 Transform {
              scale 3 3 3
              children Shape {
                appearance Appearance {
                  shaders ToolShader {
                    diffuseColor 1 0.7 0
                  }
                }
                geometry Box { }
              }
            }
          }
        }
      ]
    }
  ]
}

DEF MoveScript Script {
  inputOutput SFRotation rotation 0 0 1 0
  outputOnly  SFRotation axisOfRotation_changed

  url "javascript:

function set_rotation (value)
{
	axisOfRotation_changed = new SFRotation (1, 0, 0, Math .PI / 2) .multiply (value);
}"
}

DEF AngleScript Script {
  inputOnly   SFRotation set_rotation
  inputOutput MFInt32    dimension [
    5,
    16
  ]
  outputOnly  SFFloat    angle_changed
  outputOnly  SFRotation rotation_changed

  url "javascript:

var yAxis = new SFVec3f (0, 1, 0);

function initialize ()
{
	set_dimension ();
}

function set_rotation (value)
{
	var angle = value .angle;
	var sign  = value .getAxis () .dot (yAxis) < 0;

	if (sign)
		angle = 2 * Math .PI - angle;

	dimension [1] = Math .round (2 * Math .PI / angle); 
}

function set_dimension ()
{
	angle_changed    = 2 * Math .PI / dimension [1];
	rotation_changed = new SFRotation (yAxis, angle_changed);
}
"
}

DEF DimensionScript Script {
  inputOnly   SFVec3f set_translation
  inputOutput MFInt32 dimension [
    5,
    16
  ]
  outputOnly  SFVec3f dimensionTranslation_changed
  outputOnly  SFVec3f angleTranslation_changed

  url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function set_translation (value)
{
	dimension [0] = Math .round (value .z);
	dimension [0] = Math .max (dimension [0], 1);
}

function eventsProcessed ()
{
	dimensionTranslation_changed = new SFVec3f (0, 0, dimension [0]);
	angleTranslation_changed     = new SFVec3f (0, 0, dimension [0] - (dimension [0] > 1 ? 1 : 0));
}
"
}

DEF ScaleScript Script {
  inputOnly   SFVec3f set_translation
  inputOutput SFVec3f scale 1 1 1
  inputOutput MFInt32 dimension [
    5,
    16
  ]
  outputOnly  SFVec3f translation_changed

  url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function set_translation (value)
{
	var length = new SFVec2f ( value .x / (dimension [0] * Math .cos (Math .PI / 4)),
	                          -value .z / (dimension [0] * Math .sin (Math .PI / 4))) .length ();

	var factor = length / new SFVec2f (scale .x, scale .z) .length ();

	scale .x *= factor;
	scale .z *= factor;
}

function eventsProcessed ()
{
	//translation_changed = new SFVec3f (scale .x * dimension [0], 0, -scale .z * dimension [0]);
	translation_changed = new SFVec3f ( scale .x * dimension [0] * Math .cos (Math .PI / 4),
	                                   0,
	                                   -scale .z * dimension [0] * Math .sin (Math .PI / 4));
}"
}

DEF Tool_1 Script {
  inputOutput SFVec3f    translation 0 0 0
  inputOutput SFRotation rotation 0 0 1 0
  inputOutput SFVec3f    scale 1 1 1
  inputOutput MFInt32    dimension [
    5,
    16
  ]
  inputOutput MFInt32    majorLineEvery [
    5,
    2
  ]
  inputOutput MFInt32    majorLineOffset [ ]
  inputOutput SFColor    color 0.5 0.5 0.5
  inputOutput SFFloat    transparency 0.8
  inputOutput SFColor    lineColor 1 0.7 0.7
  inputOutput SFFloat    lineTransparency 0.8
  inputOutput SFColor    majorLineColor 1 0.7 0.7
  inputOutput SFFloat    majorLineTransparency 0.6

}

ROUTE AngleScript.rotation_changed TO Handle.set_rotation
ROUTE _5.rotation_changed TO AngleScript.set_rotation
ROUTE Tool_1.translation_changed TO Handles.set_translation
ROUTE Tool_1.translation_changed TO _3.set_translation
ROUTE _2.translation_changed TO Tool_1.set_translation
ROUTE Tool_1.translation_changed TO _2.set_offset
ROUTE Tool_1.transparency_changed TO _1.set_transparency
ROUTE Tool_1.color_changed TO _1.set_color
ROUTE Tool_1.lineColor_changed TO _1.set_lineColor
ROUTE Tool_1.lineTransparency_changed TO _1.set_lineTransparency
ROUTE Tool_1.majorLineColor_changed TO _1.set_majorLineColor
ROUTE Tool_1.majorLineTransparency_changed TO _1.set_majorLineTransparency
ROUTE Tool_1.majorLineEvery_changed TO _1.set_majorLineEvery
ROUTE DimensionScript.angleTranslation_changed TO _6.set_translation
ROUTE _7.translation_changed TO DimensionScript.set_translation
ROUTE DimensionScript.dimensionTranslation_changed TO _8.set_translation
ROUTE DimensionScript.dimensionTranslation_changed TO _7.set_offset
ROUTE Tool_1.rotation_changed TO MoveScript.set_rotation
ROUTE MoveScript.axisOfRotation_changed TO _2.set_axisRotation
ROUTE Tool_1.rotation_changed TO Handles.set_rotation
ROUTE Tool_1.translation_changed TO _1.set_translation
ROUTE Tool_1.rotation_changed TO _1.set_rotation
ROUTE Tool_1.scale_changed TO _1.set_scale
ROUTE Tool_1.scale_changed TO Handles.set_scale
ROUTE AngleScript.angle_changed TO _5.set_offset
ROUTE Tool_1.dimension_changed TO DimensionScript.set_dimension
ROUTE DimensionScript.dimension_changed TO Tool_1.set_dimension
ROUTE Tool_1.dimension_changed TO AngleScript.set_dimension
ROUTE AngleScript.dimension_changed TO Tool_1.set_dimension
ROUTE Tool_1.dimension_changed TO _1.set_dimension
ROUTE Tool_1.majorLineOffset_changed TO _1.set_majorLineOffset
ROUTE Tool_1.scale_changed TO ScaleScript.set_scale
ROUTE ScaleScript.scale_changed TO Tool_1.set_scale
ROUTE _9.translation_changed TO ScaleScript.set_translation
ROUTE Tool_1.dimension_changed TO ScaleScript.set_dimension
ROUTE ScaleScript.translation_changed TO _10.set_translation
ROUTE ScaleScript.translation_changed TO _9.set_offset
ROUTE Tool_1.translation_changed TO ScaleHandle_1.set_translation
ROUTE Tool_1.rotation_changed TO ScaleHandle_1.set_rotation

EXPORT Tool_1 AS Tool
