#X3D V3.3 utf8 Titania V0.7.4

META "comment" "World of Titania"
META "created" "Tue, 05 Aug 2014 20:06:52 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.4, http://titania.create3000.de"
META "modified" "Thu, 25 Sep 2014 04:34:06 GMT"

EXTERNPROTO ToolShader [
  inputOutput SFFloat ambientIntensity
  inputOutput SFColor diffuseColor
  inputOutput SFColor specularColor
  inputOutput SFColor emissiveColor
  inputOutput SFFloat shininess
  inputOutput SFFloat transparency
]
"library/ToolShader.x3dv"

PROTO AngleGrid [
  inputOutput    SFInt32 dimension 5
  inputOutput    SFFloat spacing 1
  inputOutput    SFFloat angle 0.392699
  inputOutput    MFInt32 majorLineEvery [
    5,
    4
  ]
  inputOutput    SFColor color 0.5 0.5 0.5
  inputOutput    SFFloat transparency 0.8
  inputOutput    SFColor lineColor 1 0.7 0.7
  inputOutput    SFFloat lineTransparency 0.8
  inputOutput    SFColor majorLineColor 1 0.7 0.7
  inputOutput    SFFloat majorLineTransparency 0.6
  initializeOnly SFBool  solid TRUE
]
{
  Group {
    children [
      DEF Disk_1 Transform {
        rotation -1.30008e-13 0.707105 0.707108 3.14159
        scale 10 10 1
        children Shape {
          appearance Appearance {
            material DEF Material2_1 Material {
              diffuseColor 0 0 0
              emissiveColor IS color
              transparency IS transparency
            }
          }
          geometry Disk2D {
            outerRadius 0.5
            solid IS solid
          }
        }
      }
      DEF Rays_1 Shape {
        appearance DEF MinorAppearance Appearance {
          material Material {
            emissiveColor IS lineColor
            transparency IS lineTransparency
          }
        }
        geometry DEF Grid_1 IndexedLineSet {
          coordIndex [
            0,
            1,
            -1,
            2,
            3,
            -1,
            4,
            5,
            -1,
            6,
            7,
            -1,
            8,
            9,
            -1,
            10,
            11,
            -1,
            12,
            13,
            -1,
            14,
            15,
            -1,
            16,
            17,
            -1,
            18,
            19,
            -1,
            20,
            21,
            -1,
            22,
            23,
            -1,
            24,
            25,
            -1,
            26,
            27,
            -1,
            28,
            29,
            -1,
            30,
            31,
            -1
          ]
          coord Coordinate {
            point [
              0 0 0,
              0 0 5,
              0 0 0,
              1.91342 0 4.6194,
              0 0 0,
              3.53553 0 3.53553,
              0 0 0,
              4.6194 0 1.91342,
              0 0 0,
              5 0 1.78814e-06,
              0 0 0,
              4.6194 0 -1.91342,
              0 0 0,
              3.53554 0 -3.53553,
              0 0 0,
              1.91342 0 -4.6194,
              0 0 0,
              3.13916e-06 0 -5,
              0 0 0,
              -1.91341 0 -4.6194,
              0 0 0,
              -3.53553 0 -3.53554,
              0 0 0,
              -4.6194 0 -1.91342,
              0 0 0,
              -5 0 -4.61936e-06,
              0 0 0,
              -4.6194 0 1.91341,
              0 0 0,
              -3.53554 0 3.53553,
              0 0 0,
              -1.91342 0 4.61939
            ]
          }
        }
      }
      DEF Circles_1 Transform {
        rotation -2.99471e-22 0.707105 0.707108 3.14159
        scaleOrientation -1 7.70153e-07 1.47364e-06 0.785396
        children [
          Shape {
            appearance USE MinorAppearance
            geometry NULL
          }
          Shape {
            appearance USE MinorAppearance
            geometry NULL
          }
          Shape {
            appearance USE MinorAppearance
            geometry NULL
          }
          Shape {
            appearance USE MinorAppearance
            geometry NULL
          }
          Shape {
            appearance USE MinorAppearance
            geometry NULL
          }
        ]
      }
      DEF Axis_1 Shape {
        appearance Appearance {
          material DEF MajorMaterial Material {
            emissiveColor IS majorLineColor
            transparency IS majorLineTransparency
          }
        }
        geometry DEF MajorLines IndexedLineSet {
          coordIndex [
            0,
            1,
            -1
          ]
          coord Coordinate {
            point [
              0 0 0,
              0 0 5.25
            ]
          }
        }
      }
    ]
  }

  DEF AngleGridScript_1 Script {
    inputOutput    SFInt32 dimension IS dimension
    inputOutput    SFFloat spacing IS spacing
    inputOutput    SFFloat angle IS angle
    initializeOnly SFNode  majorLines USE MajorLines
    initializeOnly SFNode  disk USE Disk_1
    initializeOnly SFNode  grid USE Grid_1
    initializeOnly SFNode  circles USE Circles_1
    initializeOnly SFNode  appearance USE MinorAppearance

    url "javascript:

Math .PHI = 1.61803;
var EPS = 0.0001;

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var radius = dimension * spacing;

	// Plane

	disk .scale = new SFVec3f (2 * radius, 2 * radius, 1);
	
	// Axis

	majorLines .coord .point [1] = new SFVec3f (0, 0, radius + spacing / 4);

	// Grid

	// Radiuses

	var coordIndex = new MFInt32 ();
	var point      = grid .coord .point;
	point .length  = 0;

	if (angle)
	{
		for (var a = 0, i = 0; a < 2 * Math .PI - EPS; a += angle, i += 2)
		{
			var r = new SFRotation (0, 1, 0, a);

			point [i]     = new SFVec3f (0, 0, 0);
			point [i + 1] = r .multVec (new SFVec3f (0, 0, radius));
		}

		for (var i = 0, p = 0; p < point .length; i += 3)
		{
			coordIndex [i]     = p ++;
			coordIndex [i + 1] = p ++;
			coordIndex [i + 2] = -1;
		}
	}

	grid .set_coordIndex = coordIndex;
	
	// Circles

	var scene                 = Browser .currentScene;
	circles .children .length = 0;

	for (var i = 0; i < dimension; ++ i)
	{
		var shape  = scene .createNode (\"Shape\");
		var circle = Browser .createVrmlFromString (\"Circle2D { radius \" + (spacing * (i + 1)) + \" }\") [0];

		shape .appearance     = appearance;
		shape .geometry       = circle;
		circles .children [i] = shape;
	}
}
"
    directOutput TRUE
    mustEvaluate TRUE
  }
}

DEF AngleTool Transform {
  children [
    DEF Center_1 Transform {
      children [
        DEF _1 PlaneSensor {
          axisRotation 1 0 0 1.5708
          autoOffset FALSE
        }
        DEF _2 Transform {
          children ScreenGroup {
            children DEF Sphere_1 Transform {
              scale 6 6 6
              children Shape {
                appearance DEF _3 Appearance {
                  shaders DEF _4 ToolShader {
                    diffuseColor 0.5 0.5 0.5
                  }
                }
                geometry Sphere { }
              }
            }
          }
        }
      ]
    }
    DEF AngleGrid Transform {
      children [
        PickableGroup {
          pickable FALSE
          children DEF _5 AngleGrid { }
        }
        DEF AngleHandle Group {
          children [
            DEF _6 CylinderSensor {
              diskAngle 1.2
              offset 0.392699
            }
            DEF Handle Transform {
              rotation 0 1 0 0.392699
              children DEF _7 Transform {
                translation 0 0 4
                children ScreenGroup {
                  children Transform {
                    scale 6 6 6
                    children Shape {
                      appearance Appearance {
                        shaders ToolShader {
                          diffuseColor 0.5 0.5 0.5
                        }
                      }
                      geometry Sphere { }
                    }
                  }
                }
              }
            }
          ]
        }
        DEF DimensionHandle Group {
          children [
            DEF _8 PlaneSensor {
              axisRotation 1 0 0 1.5708
              autoOffset FALSE
              offset 0 0 5
              maxPosition 0 -1
            }
            DEF _9 Transform {
              translation 0 0 5
              children ScreenGroup {
                children DEF Sphere Transform {
                  scale 6 6 6
                  children Shape {
                    appearance USE _3
                    geometry Box { }
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}

DEF MoveScript Script {
  inputOutput SFRotation rotation 0 0 1 0
  outputOnly  SFRotation axisOfRotation_changed

  url "javascript:

function set_translation (value)
{
	var translation = rotation .inverse () .multVec (value); 

	if (spacing [0])
		translation .x = Math .round (translation .x / spacing [0]) * spacing [0];

	if (spacing [1])
		translation .y = Math .round (translation .y / spacing [1]) * spacing [1];

	if (spacing [2])
		translation .z = Math .round (translation .z / spacing [2]) * spacing [2];

	translation_changed = rotation .multVec (translation);
}

function set_rotation (value)
{
	axisOfRotation_changed = new SFRotation (1, 0, 0, Math .PI / 2) .multiply (value);
}"
}

DEF AngleScript Script {
  inputOnly   SFRotation set_rotation
  inputOutput SFFloat    angle 0.392699
  outputOnly  SFRotation rotation_changed

  url "javascript:

var yAxis = new SFVec3f (0, 1, 0);

function initialize ()
{
	eventsProcessed ();
}

function set_rotation (value)
{
	var sign = value .getAxis () .dot (yAxis) > 0;

	if (sign)
		angle = value .angle;
	else
		angle = 2 * Math .PI - value .angle;
}

function eventsProcessed ()
{
	rotation_changed = new SFRotation (0, 1, 0, angle);
}
"
}

DEF DimensionScript Script {
  inputOnly   SFVec3f set_translation
  inputOutput SFInt32 dimension 5
  inputOutput SFFloat spacing 1
  outputOnly  SFVec3f dimensionTranslation_changed
  outputOnly  SFVec3f angleTranslation_changed

  url "javascript:

function initialize ()
{
	eventsProcessed ();
}

function set_translation (value)
{
	dimension = Math .round (value .z / spacing);
	dimension = Math .max (dimension, 1);
}

function eventsProcessed ()
{
	dimensionTranslation_changed = new SFVec3f (0, 0, dimension * spacing);
	angleTranslation_changed     = new SFVec3f (0, 0, dimension * spacing - (dimension > 1 ? spacing : 0));
}
"
}

DEF Tool_1 Script {
  inputOutput SFVec3f    translation 0 0 0
  inputOutput SFRotation rotation 0 0 1 0
  inputOutput SFInt32    dimension 5
  inputOutput SFFloat    spacing 1
  inputOutput SFFloat    angle 0.392699
  inputOutput MFInt32    majorLineEvery [
    5,
    4
  ]
  inputOutput SFColor    color 0.5 0.5 0.5
  inputOutput SFFloat    transparency 0.8
  inputOutput SFColor    lineColor 1 0.7 0.7
  inputOutput SFFloat    lineTransparency 0.8
  inputOutput SFColor    majorLineColor 1 0.7 0.7
  inputOutput SFFloat    majorLineTransparency 0.6

}

ROUTE AngleScript.rotation_changed TO Handle.set_rotation
ROUTE _6.rotation_changed TO AngleScript.set_rotation
ROUTE Tool_1.translation_changed TO AngleGrid.set_translation
ROUTE Tool_1.translation_changed TO _2.set_translation
ROUTE _1.translation_changed TO Tool_1.set_translation
ROUTE Tool_1.translation_changed TO _1.set_offset
ROUTE Tool_1.transparency_changed TO _5.set_transparency
ROUTE Tool_1.color_changed TO _5.set_color
ROUTE Tool_1.color_changed TO _4.set_diffuseColor
ROUTE Tool_1.lineColor_changed TO _5.set_lineColor
ROUTE Tool_1.lineTransparency_changed TO _5.set_lineTransparency
ROUTE Tool_1.majorLineColor_changed TO _5.set_majorLineColor
ROUTE Tool_1.majorLineTransparency_changed TO _5.set_majorLineTransparency
ROUTE Tool_1.majorLineEvery_changed TO _5.set_majorLineEvery
ROUTE Tool_1.angle_changed TO _6.set_offset
ROUTE Tool_1.angle_changed TO _5.set_angle
ROUTE AngleScript.angle_changed TO Tool_1.set_angle
ROUTE Tool_1.angle_changed TO AngleScript.set_angle
ROUTE Tool_1.dimension_changed TO _5.set_dimension
ROUTE Tool_1.spacing_changed TO _5.set_spacing
ROUTE Tool_1.dimension_changed TO DimensionScript.set_dimension
ROUTE Tool_1.spacing_changed TO DimensionScript.set_spacing
ROUTE DimensionScript.angleTranslation_changed TO _7.set_translation
ROUTE _8.translation_changed TO DimensionScript.set_translation
ROUTE DimensionScript.dimensionTranslation_changed TO _9.set_translation
ROUTE DimensionScript.dimensionTranslation_changed TO _8.set_offset
ROUTE DimensionScript.dimension_changed TO Tool_1.set_dimension
ROUTE Tool_1.rotation_changed TO MoveScript.set_rotation
ROUTE MoveScript.axisOfRotation_changed TO _1.set_axisRotation
ROUTE Tool_1.rotation_changed TO AngleGrid.set_rotation

EXPORT Tool_1 AS Tool
