#X3D V3.3 utf8 Titania V4.6.7

PROFILE Immersive

COMPONENT Layout : 2

META "comment" "World of Titania"
META "created" "Fri, 01 Aug 2014 17:41:58 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V4.6.7, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/tools/TextureProjectorTool.x3dv"
META "modified" "Sat, 16 Nov 2019 13:22:58 GMT"

EXTERNPROTO ToolShader [ ]
"library/ToolShader.x3dv"

EXTERNPROTO BooleanSwitch [
  inputOutput    SFBool  whichChoice
  initializeOnly SFVec3f bboxSize
  initializeOnly SFVec3f bboxCenter
  inputOnly      MFNode  addChildren
  inputOnly      MFNode  removeChildren
  inputOutput    MFNode  children
]
"library/BooleanSwitch.x3dv"

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF NavigationInfo MetadataSet {
        name "NavigationInfo"
        reference "http://titania.create3000.de"
        value DEF type MetadataString {
          name "type"
          reference "http://titania.create3000.de"
          value "EXAMINE"
        }
      }
      DEF Viewpoint MetadataSet {
        name "Viewpoint"
        reference "http://titania.create3000.de"
        value [
          DEF position MetadataDouble {
            name "position"
            reference "http://titania.create3000.de"
            value [
              97.1939484516603,
              89.139521660369,
              44.4771159543499
            ]
          }
          DEF orientation MetadataDouble {
            name "orientation"
            reference "http://titania.create3000.de"
            value [
              -0.436518970467265,
              0.851854448307773,
              0.289473983840446,
              1.32294674286397
            ]
          }
          DEF centerOfRotation MetadataDouble {
            name "centerOfRotation"
            reference "http://titania.create3000.de"
            value [
              1.55034659798597,
              9.36342214733164,
              4.07576429276368
            ]
          }
        ]
      }
      DEF Selection MetadataSet {
        name "Selection"
        reference "http://titania.create3000.de"
        value [
          DEF nodes MetadataSet {
            name "nodes"
            reference "http://titania.create3000.de"
            value DEF Tool Script {
              inputOutput    SFBool     enabled FALSE
              inputOutput    SFBool     selected FALSE
              inputOnly      SFVec3f    set_direction
              inputOnly      SFVec3f    set_connectDirection
              inputOnly      SFVec3f    set_upVector
              inputOnly      SFVec3f    set_connectUpVector
              inputOnly      SFRotation set_rotation
              inputOnly      SFRotation set_connectRotation
              inputOnly      MFFloat    set_parallelFieldOfView
              inputOnly      SFFloat    set_parallelNearDistance
              inputOnly      SFFloat    set_parallelFarDistance
              inputOnly      SFFloat    set_parallelAspectRatio
              inputOnly      SFFloat    set_perspectiveFieldOfView
              inputOnly      SFFloat    set_perspectiveNearDistance
              inputOnly      SFFloat    set_perspectiveFarDistance
              inputOnly      SFFloat    set_perspectiveAspectRatio
              inputOnly      SFNode     set_texture
              inputOutput    SFNode     textureProjector NULL
              initializeOnly SFNode     projector DEF Projector Transform {
                children [
                  DEF Beamer ScreenGroup {
                    children Transform {
                      translation 0 0 -15
                      children [
                        DEF Box_1 Transform {
                          children Shape {
                            appearance DEF _2 Appearance {
                              material Material {
                                diffuseColor 0.2 0.2 0.2
                                specularColor 1 1 1
                              }
                              shaders DEF _3 ToolShader { }
                            }
                            geometry Box {
                              size 40 20 30
                            }
                          }
                        }
                        DEF Cylinder Transform {
                          translation 0 0 15
                          rotation 0.999999999993254 3.67320512848233e-06 1.19222813476655e-18 1.5707963267949
                          children Shape {
                            appearance USE _2
                            geometry Cylinder {
                              top FALSE
                              height 20
                              radius 12
                              solid FALSE
                            }
                          }
                        }
                      ]
                    }
                  }
                  DEF Frustum Transform {
                    children Shape {
                      appearance Appearance {
                        material Material {
                          emissiveColor 1 0.985342 0.807597
                        }
                        shaders USE _3
                      }
                      geometry IndexedLineSet {
                        coordIndex [
                          0,
                          4,
                          -1,
                          4,
                          8,
                          -1,
                          1,
                          5,
                          -1,
                          5,
                          9,
                          -1,
                          2,
                          6,
                          -1,
                          6,
                          10,
                          -1,
                          3,
                          7,
                          -1,
                          7,
                          11,
                          -1,
                          0,
                          1,
                          2,
                          3,
                          0,
                          -1,
                          4,
                          5,
                          6,
                          7,
                          4,
                          -1,
                          8,
                          9,
                          10,
                          11,
                          8,
                          -1
                        ]
                        coord DEF _4 Coordinate {
                          point [
                            0 0 0,
                            0 0 0,
                            0 0 0,
                            0 0 0,
                            1 1 1,
                            -1 1 1,
                            -1 -1 1,
                            1 -1 1,
                            2 2 2,
                            -2 2 2,
                            -2 -2 2,
                            2 -2 2
                          ]
                        }
                      }
                    }
                  }
                  Switch {
                    children DEF Image Transform {
                      children Shape {
                        appearance DEF _5 Appearance {
                          material Material {
                            transparency 0.5
                          }
                          shaders USE _3
                        }
                        geometry IndexedFaceSet {
                          solid FALSE
                          texCoordIndex [
                            0,
                            1,
                            2,
                            3,
                            -1
                          ]
                          coordIndex [
                            4,
                            5,
                            6,
                            7,
                            -1
                          ]
                          texCoord TextureCoordinate {
                            point [
                              1 1,
                              0 1,
                              0 0,
                              1 0
                            ]
                          }
                          coord USE _4
                        }
                      }
                    }
                  }
                ]
              }
              initializeOnly SFNode     frustum USE _4
              initializeOnly SFNode     image USE _5
              initializeOnly SFNode     transform DEF TransformTool Transform {
                children ScreenGroup {
                  children DEF Box Transform {
                    scaleOrientation 3.46944695195361e-17 -1.43709198143318e-17 1 3.92699081698724
                    children Shape {
                      appearance Appearance {
                        material Material {
                          transparency 1
                        }
                        shaders ToolShader { }
                      }
                      geometry Box {
                        size 60 60 60
                      }
                    }
                  }
                }
              }
              initializeOnly SFNode     self USE Tool

              url "ecmascript:

function set_textureProjector ()
{
	var type = textureProjector .getNodeType () .reverse ();

	for (var i = 0; i < type .length; ++ i)
	{
		switch (type [i])
		{
			case X3DConstants .TextureProjectorParallel:
			{
				Browser .addRoute (textureProjector, \"fieldOfView_changed\",  self, \"set_parallelFieldOfView\");
				Browser .addRoute (textureProjector, \"nearDistance_changed\", self, \"set_parallelNearDistance\");
				Browser .addRoute (textureProjector, \"farDistance_changed\",  self, \"set_parallelFarDistance\");
				Browser .addRoute (textureProjector, \"aspectRatio\",          self, \"set_parallelAspectRatio\");
				
				set_parallel ();
				break;
			}
			case X3DConstants .TextureProjectorPerspective:
			{
				Browser .addRoute (textureProjector, \"fieldOfView_changed\",  self, \"set_perspectiveFieldOfView\");
				Browser .addRoute (textureProjector, \"nearDistance_changed\", self, \"set_perspectiveNearDistance\");
				Browser .addRoute (textureProjector, \"farDistance_changed\",  self, \"set_perspectiveFarDistance\");
				Browser .addRoute (textureProjector, \"aspectRatio\",          self, \"set_perspectiveAspectRatio\");
				
				set_perspective ();
				break;
			}
			default:
				continue;
		}

		break;
	}

	Browser .addRoute (textureProjector, \"direction_changed\", self, \"set_direction\");
	Browser .addRoute (textureProjector, \"upVector_changed\",  self, \"set_upVector\");
	Browser .addRoute (textureProjector, \"texture_changed\",   self, \"set_texture\");
	
	Browser .addRoute (textureProjector, 'location', transform, 'translation');
	Browser .addRoute (transform, 'translation', textureProjector, 'location');
	Browser .addRoute (transform, 'rotation', self, 'set_rotation');

	transform .translation = textureProjector .location;

	set_directionAndUpVector ();
	set_texture ();
}

function set_direction ()
{
	set_directionAndUpVector ();
}

function set_connectDirection (value)
{
	Browser .deleteRoute (textureProjector, 'direction', self, 'set_connectDirection');
	Browser .addRoute (textureProjector, 'direction', self, 'set_direction');
}

function set_upVector ()
{
	set_directionAndUpVector ();
}

function set_connectUpVector (value)
{
	Browser .deleteRoute (textureProjector, 'upVector', self, 'set_connectUpVector');
	Browser .addRoute (textureProjector, 'upVector', self, 'set_upVector');
}

function set_directionAndUpVector ()
{
	var rotation = new SFRotation (new SFVec3f (0, 0, 1), textureProjector .direction);

	transform .rotation = straightenHorizon (rotation);

	Browser .deleteRoute (transform, 'rotation', self, 'set_rotation');
	Browser .addRoute (transform, 'rotation', self, 'set_connectRotation');
}

function set_rotation (value)
{
	textureProjector .direction = transform .rotation .multVec (new SFVec3f (0, 0, 1));
	textureProjector .upVector  = transform .rotation .multVec (new SFVec3f (0, 1, 0));
	
	Browser .deleteRoute (textureProjector, 'direction', self, 'set_direction');
	Browser .deleteRoute (textureProjector, 'upVector', self, 'set_upVector');
	Browser .addRoute (textureProjector, 'direction', self, 'set_connectDirection');
	Browser .addRoute (textureProjector, 'upVector', self, 'set_connectUpVector');
}

function set_connectRotation (value)
{
	Browser .deleteRoute (transform, 'rotation', self, 'set_connectRotation');
	Browser .addRoute (transform, 'rotation', self, 'set_rotation');
}

function straightenHorizon (orientation)
{
	var localXAxis = orientation .multVec (new SFVec3f (-1, 0, 0));
	var localZAxis = orientation .multVec (new SFVec3f (0, 0, 1));
	var vector     = localZAxis .cross (textureProjector .upVector);

	// If viewer looks along the up vector.
	if (vector .equals (new SFVec3f (0, 0, 0)))
		return orientation;

	if (vector .equals (localXAxis))
		return orientation;

	if (vector .equals (localXAxis .negate ()))
		return orientation;

	var rotation = new SFRotation (localXAxis, vector);

	return orientation .multiply (rotation);
}

function set_texture ()
{
	image .texture = textureProjector .texture;
}

function set_parallelFieldOfView ()
{
	set_parallel ();
}

function set_parallelNearDistance ()
{
	set_parallel ();
}

function set_parallelFarDistance ()
{
	set_parallel ();
}

function set_parallelAspectRatio ()
{
	set_perspective ();
}

function set_parallel ()
{
	var fov    = textureProjector .fieldOfView;
	var minX   = fov .length > 0 ? fov [0] : -1; 
	var minY   = fov .length > 1 ? fov [1] : -1; 
	var maxX   = fov .length > 2 ? fov [2] :  1; 
	var maxY   = fov .length > 3 ? fov [3] :  1;
	var sizeX  = maxX - minX;
	var sizeY  = maxY - minY;
	var aspect = textureProjector .aspectRatio;
	
	if (aspect > sizeX / sizeY)
	{
		var center  = (minX + maxX) / 2;
		var size1_2 = (sizeY * aspect) / 2;

		var x1 = center - size1_2;
		var x2 = center + size1_2;
		var y1 = minY;
		var y2 = maxY;
	}
	else
	{
		var center  = (minY + maxY) / 2;
		var size1_2 = (sizeX / aspect) / 2;

		var x1 = minX;
		var x2 = maxX;
		var y1 = center - size1_2;
		var y2 = center + size1_2;
	}

	x1 = -x1;
	x2 = -x2;

	var parallel = false; // First point of frustum.

	if (parallel)
	{
		frustum .point [0] = new SFVec3f (x2, y2, 0);
		frustum .point [1] = new SFVec3f (x1, y2, 0);
		frustum .point [2] = new SFVec3f (x1, y1, 0);
		frustum .point [3] = new SFVec3f (x2, y1, 0);
	}
	else
	{
		frustum .point [0] = new SFVec3f ();
		frustum .point [1] = new SFVec3f ();
		frustum .point [2] = new SFVec3f ();
		frustum .point [3] = new SFVec3f ();
	}

	frustum .point [4] = new SFVec3f (x2, y2, textureProjector .nearDistance);
	frustum .point [5] = new SFVec3f (x1, y2, textureProjector .nearDistance);
	frustum .point [6] = new SFVec3f (x1, y1, textureProjector .nearDistance);
	frustum .point [7] = new SFVec3f (x2, y1, textureProjector .nearDistance);

	frustum .point [8]  = new SFVec3f (x2, y2, textureProjector .farDistance);
	frustum .point [9]  = new SFVec3f (x1, y2, textureProjector .farDistance);
	frustum .point [10] = new SFVec3f (x1, y1, textureProjector .farDistance);
	frustum .point [11] = new SFVec3f (x2, y1, textureProjector .farDistance);
}

function set_perspectiveFieldOfView ()
{
	set_perspective ();
}

function set_perspectiveNearDistance ()
{
	set_perspective ();
}

function set_perspectiveFarDistance ()
{
	set_perspective ();
}

function set_perspectiveAspectRatio ()
{
	set_perspective ();
}

function set_perspective ()
{
	var fov = textureProjector .fieldOfView;

	fov = fov > 0 && fov < Math .PI ? fov : Math .PI / 4;

	var n      = Math .tan (fov / 2) * textureProjector .nearDistance;
	var f      = Math .tan (fov / 2) * textureProjector .farDistance;
	var w      = 1;
	var h      = 1;

	if (textureProjector .aspectRatio > 1)
		w = textureProjector .aspectRatio;
	else
		h = 1 / textureProjector .aspectRatio;

	frustum .point [0] = new SFVec3f ();
	frustum .point [1] = new SFVec3f ();
	frustum .point [2] = new SFVec3f ();
	frustum .point [3] = new SFVec3f ();

	frustum .point [4] = new SFVec3f (-n * w,  n * h, textureProjector .nearDistance);
	frustum .point [5] = new SFVec3f ( n * w,  n * h, textureProjector .nearDistance);
	frustum .point [6] = new SFVec3f ( n * w, -n * h, textureProjector .nearDistance);
	frustum .point [7] = new SFVec3f (-n * w, -n * h, textureProjector .nearDistance);

	frustum .point [8]  = new SFVec3f (-f * w,  f * h, textureProjector .farDistance);
	frustum .point [9]  = new SFVec3f ( f * w,  f * h, textureProjector .farDistance);
	frustum .point [10] = new SFVec3f ( f * w, -f * h, textureProjector .farDistance);
	frustum .point [11] = new SFVec3f (-f * w, -f * h, textureProjector .farDistance);
}
"
              directOutput TRUE
            }
          }
          DEF selectGeometry MetadataBoolean {
            name "selectGeometry"
            reference "http://titania.create3000.de"
            value FALSE
          }
        ]
      }
      DEF Page MetadataSet {
        name "Page"
        reference "http://titania.create3000.de"
        value [
          DEF activeView MetadataInteger {
            name "activeView"
            reference "http://titania.create3000.de"
            value 1
          }
          DEF multiView MetadataInteger {
            name "multiView"
            reference "http://titania.create3000.de"
            value 0
          }
        ]
      }
      DEF Grid MetadataSet {
        name "Grid"
        reference "http://titania.create3000.de"
        value DEF enabled MetadataBoolean {
          name "enabled"
          reference "http://titania.create3000.de"
          value TRUE
        }
      }
    ]
  }
  title "LightTool"
}

USE Tool

Collision {
  enabled FALSE
  children [
    DEF _6 BooleanSwitch {
      whichChoice TRUE
      children [
        DEF _7 Group { }
        USE TransformTool
      ]
    }
    USE Projector
  ]
}

ROUTE Tool.selected_changed TO _6.set_whichChoice
ROUTE TransformTool.translation_changed TO Projector.set_translation
ROUTE TransformTool.rotation_changed TO Projector.set_rotation

EXPORT Tool
EXPORT TransformTool
