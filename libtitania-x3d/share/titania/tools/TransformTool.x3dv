#X3D V3.3 utf8 Titania V0.7.5

META "comment" "World of Titania"
META "created" "Tue, 20 May 2014 19:16:28 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V0.7.5, http://titania.create3000.de"
META "modified" "Wed, 05 Nov 2014 16:00:14 GMT"

EXTERNPROTO ToolShader [
  inputOutput SFFloat ambientIntensity
  inputOutput SFColor diffuseColor
  inputOutput SFColor specularColor
  inputOutput SFColor emissiveColor
  inputOutput SFFloat shininess
  inputOutput SFFloat transparency
]
"library/ToolShader.x3dv"

EXTERNPROTO BooleanSwitch [
  inputOutput    SFBool  whichChoice
  initializeOnly SFVec3f bboxSize
  initializeOnly SFVec3f bboxCenter
  inputOnly      MFNode  addChildren
  inputOnly      MFNode  removeChildren
  inputOutput    MFNode  children
]
"library/BooleanSwitch.x3dv"

PROTO DoubleClick [
  inputOnly   SFTime set_time
  inputOutput SFTime doubleClickInterval 0.5
  outputOnly  SFTime doubleClickTime
]
{
  DEF DoubleClick Script {
    inputOnly   SFTime set_time IS set_time
    inputOutput SFTime doubleClickInterval IS doubleClickInterval
    outputOnly  SFTime doubleClickTime IS doubleClickTime

    url "vrmlscript:

var firstTime = 0;

function set_time (value, time)
{
	if (firstTime == 0)
		firstTime = time;
	
	else if (time - firstTime < doubleClickInterval)
	{
		firstTime = 0;
		doubleClickTime = time;
	}
	else
		firstTime = time;
}
"
  }
}

PROTO TransformTool [
  # required fields
  inputOnly   SFBool     set_enabled
  outputOnly  SFBool     isActive
  outputOnly  SFBool     keepCenter_changed
  outputOnly  SFInt32    activeTool_changed
  inputOutput SFBool     controlKey FALSE
  inputOutput SFBool     shiftKey FALSE
  inputOutput SFBool     altKey FALSE
  inputOutput SFMatrix4f cameraSpaceMatrix 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
  inputOutput SFMatrix4f modelViewMatrix 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
  inputOutput SFVec3f    bboxSize 0 0 0
  inputOutput SFVec3f    bboxCenter 0 0 0
  inputOutput SFNode     transform NULL
]
{
  Collision {
    enabled FALSE
    children [
      Transform {
        translation IS bboxCenter
        children [
          DEF BoundingBox Shape {
            appearance Appearance {
              lineProperties DEF LineProperties LineProperties {
                linewidthScaleFactor 1
              }
              material Material {
                emissiveColor 0.35 1 0.7
              }
            }
            geometry IndexedLineSet {
              coordIndex [
                0,
                1,
                2,
                3,
                0,
                -1,
                4,
                5,
                6,
                7,
                4,
                -1,
                0,
                4,
                -1,
                3,
                7,
                -1,
                1,
                5,
                -1,
                2,
                6,
                -1
              ]
              coord DEF BBox Coordinate {
                point [
                  -0.5 0.5 0.5,
                  -0.5 -0.5 0.5,
                  0.5 -0.5 0.5,
                  0.5 0.5 0.5,
                  -0.5 0.5 -0.5,
                  -0.5 -0.5 -0.5,
                  0.5 -0.5 -0.5,
                  0.5 0.5 -0.5
                ]
              }
            }
          }
          DEF XYZ Shape {
            geometry IndexedLineSet {
              colorPerVertex FALSE
              coordIndex [
                0,
                1,
                -1,
                0,
                2,
                -1,
                0,
                3,
                -1
              ]
              color Color {
                color [
                  1 0 0,
                  0 1 0,
                  0 0 1
                ]
              }
              coord DEF Axes Coordinate {
                point [
                  0 0 0,
                  0.5 0 0,
                  0 0.5 0,
                  0 0 0.5,
                  0 0 0
                ]
              }
            }
          }
          DEF Front Transform {
            children Transform {
              children [
                DEF FrontSensor PlaneSensor {
                  enabled IS set_enabled
                  autoOffset FALSE
                  isActive IS isActive
                }
                DEF Plane Shape {
                  appearance DEF Transparent Appearance {
                    material Material {
                      transparency 1
                    }
                  }
                  geometry Rectangle2D {
                    size 1 1
                  }
                }
              ]
            }
          }
          DEF Right Transform {
            children Transform {
              rotation 0 1 0 1.5708
              children [
                DEF RightSensor PlaneSensor {
                  enabled IS set_enabled
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Back Transform {
            children Transform {
              rotation 0 1 0 3.14159
              children [
                DEF BackSensor PlaneSensor {
                  enabled IS set_enabled
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Left Transform {
            children Transform {
              rotation 0 -1 0 1.5708
              children [
                DEF LeftSensor PlaneSensor {
                  enabled IS set_enabled
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Top Transform {
            children Transform {
              rotation -1 0 0 1.5708
              children [
                DEF TopSensor PlaneSensor {
                  enabled IS set_enabled
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Bottom Transform {
            children Transform {
              rotation 1 0 0 1.5708
              children [
                DEF BottomSensor PlaneSensor {
                  enabled IS set_enabled
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
        ]
      }
      DEF AdjustmentHandles Transform {
        translation IS bboxCenter
        children [
          DEF X Group {
            children [
              DEF ModeTouch TouchSensor {
                enabled IS set_enabled
              }
              DEF XTranslationSensor PlaneSensor {
                enabled IS set_enabled
                description "x-Axis"
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF XScaleSensor PlaneSensor {
                description "x-Axis"
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF XHandle Transform {
                children ScreenGroup {
                  children DEF XSwitch Switch {
                    children [
                      Transform {
                        translation 10.5 0 0
                        rotation 0 0 -1 1.5708
                        children Shape {
                          appearance DEF Red Appearance {
                            shaders ToolShader {
                              diffuseColor 1 0 0
                            }
                          }
                          geometry DEF Arrow Cone {
                            height 21
                            bottomRadius 7
                          }
                        }
                      }
                      Transform {
                        translation 8 0 0
                        children Shape {
                          appearance USE Red
                          geometry DEF Sphere Sphere {
                            radius 8
                          }
                        }
                      }
                      Transform {
                        translation 6 0 0
                        children Shape {
                          appearance USE Red
                          geometry DEF Box Box {
                            size 12 12 12
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
          DEF Y Group {
            children [
              USE ModeTouch
              DEF YTranslationSensor PlaneSensor {
                enabled IS set_enabled
                description "y-Axis"
                autoOffset FALSE
                maxPosition 0 -1
                isActive IS isActive
              }
              DEF YScaleSensor PlaneSensor {
                description "y-Axis"
                autoOffset FALSE
                maxPosition 0 -1
                isActive IS isActive
              }
              DEF YHandle Transform {
                children ScreenGroup {
                  children DEF YSwitch Switch {
                    children [
                      Transform {
                        translation 0 10.5 0
                        children Shape {
                          appearance DEF Green Appearance {
                            shaders ToolShader {
                              diffuseColor 0 1 0
                            }
                          }
                          geometry USE Arrow
                        }
                      }
                      Transform {
                        translation 0 8 0
                        children Shape {
                          appearance USE Green
                          geometry USE Sphere
                        }
                      }
                      Transform {
                        translation 0 6 0
                        children Shape {
                          appearance USE Green
                          geometry USE Box
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
          DEF Z Group {
            children [
              USE ModeTouch
              DEF ZTranslationSensor PlaneSensor {
                enabled IS set_enabled
                description "z-Axis"
                axisRotation 0 -1 0 1.5708
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF ZScaleSensor PlaneSensor {
                description "z-Axis"
                axisRotation 0 -1 0 1.5708
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF ZHandle Transform {
                children ScreenGroup {
                  children DEF ZSwitch Switch {
                    children [
                      Transform {
                        translation 0 0 10.5
                        rotation 1 0 0 1.5708
                        children Shape {
                          appearance DEF Blue Appearance {
                            shaders ToolShader {
                              diffuseColor 0 0 1
                            }
                          }
                          geometry USE Arrow
                        }
                      }
                      Transform {
                        translation 0 0 8
                        children Shape {
                          appearance USE Blue
                          geometry USE Sphere
                        }
                      }
                      Transform {
                        translation 0 0 6
                        children Shape {
                          appearance USE Blue
                          geometry USE Box
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
          DEF ScaleTool Switch {
            children [
              Group { }
              Group { }
              Group {
                children [
                  DEF ScaleHandle1 Transform {
                    children [
                      DEF ScaleSensor1 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      DEF ScaleHandle ScreenGroup {
                        children Transform {
                          children Shape {
                            appearance DEF White Appearance {
                              shaders ToolShader {
                                diffuseColor 1 1 1
                              }
                            }
                            geometry USE Box
                          }
                        }
                      }
                    ]
                  }
                  DEF ScaleHandle2 Transform {
                    children [
                      DEF ScaleSensor2 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle3 Transform {
                    children [
                      DEF ScaleSensor3 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle4 Transform {
                    children [
                      DEF ScaleSensor4 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle5 Transform {
                    children [
                      DEF ScaleSensor5 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle6 Transform {
                    children [
                      DEF ScaleSensor6 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle7 Transform {
                    children [
                      DEF ScaleSensor7 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle8 Transform {
                    children [
                      DEF ScaleSensor8 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
      DEF CenterLine Shape {
        appearance Appearance {
          lineProperties LineProperties {
            linetype 3
            linewidthScaleFactor 1
          }
          material DEF Yellow Material {
            diffuseColor 1 1 0
          }
        }
        geometry DEF CenterIndexedLineSet IndexedLineSet {
          coordIndex [
            0,
            1,
            -1
          ]
          color Color {
            color [
              1 1 0,
              1 1 0
            ]
          }
          coord DEF CenterLineCoord Coordinate { }
        }
      }
      DEF CenterPoint Transform {
        children [
          DEF _1 TouchSensor {
            enabled IS set_enabled
          }
          ScreenGroup {
            children DEF _2 BooleanSwitch {
              children [
                Shape {
                  appearance Appearance {
                    shaders ToolShader {
                      diffuseColor 1 1 0
                    }
                  }
                  geometry DEF _3 Sphere {
                    radius 5
                  }
                }
                Shape {
                  appearance USE Red
                  geometry USE _3
                }
              ]
            }
          }
          DEF RotationHandlesSwitch Switch {
            children [
              Group { }
              DEF RotationHandles Transform {
                children [
                  Group {
                    children [
                      DEF XRotationSensor CylinderSensor {
                        axisRotation 0 0 1 1.5708
                        diskAngle 1.3
                        autoOffset FALSE
                        isActive IS isActive
                      }
                      DEF XRotationHandle Transform {
                        rotation 0 1 0 1.5708
                        children [
                          DEF Cylinder Transform {
                            rotation 1 0 0 1.5708
                            children Shape {
                              appearance USE Transparent
                              geometry Cylinder {
                                height 0.02
                              }
                            }
                          }
                          Shape {
                            appearance Appearance {
                              material Material {
                                emissiveColor 1 0 0
                              }
                            }
                            geometry DEF Circle Circle2D { }
                          }
                          DEF XCircleSwitch Switch {
                            whichChoice 0
                            children Shape {
                              appearance Appearance {
                                material DEF XCircleMaterial Material {
                                  emissiveColor 1 0 0
                                  transparency 0.1
                                }
                              }
                              geometry DEF Disk Disk2D {
                                solid FALSE
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                  Group {
                    children [
                      DEF YRotationSensor CylinderSensor {
                        diskAngle 1.3
                        autoOffset FALSE
                        isActive IS isActive
                      }
                      DEF YRotationHandle Transform {
                        rotation 1 0 0 1.5708
                        children [
                          USE Cylinder
                          Shape {
                            appearance Appearance {
                              material Material {
                                emissiveColor 0 1 0
                              }
                            }
                            geometry USE Circle
                          }
                          DEF YCircleSwitch Switch {
                            whichChoice 0
                            children Shape {
                              appearance Appearance {
                                material DEF YCircleMaterial Material {
                                  emissiveColor 0 1 0
                                  transparency 0.1
                                }
                              }
                              geometry USE Disk
                            }
                          }
                        ]
                      }
                    ]
                  }
                  Group {
                    children [
                      DEF ZRotationSensor CylinderSensor {
                        axisRotation 1 0 0 1.5708
                        diskAngle 1.3
                        autoOffset FALSE
                        isActive IS isActive
                      }
                      DEF ZRotationHandle Transform {
                        children [
                          USE Cylinder
                          Shape {
                            appearance Appearance {
                              material Material {
                                emissiveColor 0 0 1
                              }
                            }
                            geometry USE Circle
                          }
                          DEF ZCircleSwitch Switch {
                            whichChoice 0
                            children Shape {
                              appearance Appearance {
                                material DEF ZCircleMaterial Material {
                                  emissiveColor 0 0 1
                                  transparency 0.1
                                }
                              }
                              geometry USE Disk
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Group { }
            ]
          }
        ]
      }
      Switch {
        children DEF PPoint Transform {
          children Shape {
            appearance Appearance {
              lineProperties LineProperties {
                linewidthScaleFactor 5
              }
              material Material {
                emissiveColor 0 1 1
              }
            }
            geometry PointSet {
              coord Coordinate {
                point 0 0 0
              }
            }
          }
        }
      }
    ]
  }

  DEF _4 BooleanFilter { }

  DEF _5 TimeTrigger { }

  DEF ModeDoubleClick DoubleClick { }

  DEF CenterDoubleClick DoubleClick { }

  DEF ModeScript Script {
    inputOnly  SFBool  set_enabled IS set_enabled
    inputOnly  SFBool  set_active
    inputOnly  SFTime  set_time
    outputOnly SFTime  touchTime
    outputOnly SFBool  move
    outputOnly SFBool  rotate
    outputOnly SFBool  scale
    outputOnly SFInt32 whichChoice_changed

    url "vrmlscript:
function initialize ()
{
	set_whichChoice (0);
}

function set_enabled (value, time)
{
	move = value;
}

function set_active (value, time)
{
	if (! value)
		touchTime = time;
}

function set_time (value, time)
{
	set_whichChoice ((whichChoice_changed + 1) % 3);
}

function set_whichChoice (value)
{
	move   = false;
	rotate = false;
	scale  = false;
	
	switch (value)
	{
		case 0:
			move = true;
			break;
		case 1:
			move   = true;
			rotate = true;
			break;
		case 2:
			scale = true;
			break;
	}

	whichChoice_changed = value;
}
"
  }

  DEF BBoxScript Script {
    inputOutput    SFVec3f bboxSize IS bboxSize
    initializeOnly SFFloat offset 0.01
    initializeOnly SFVec3f xAxis 1 0 0
    initializeOnly SFVec3f yAxis 0 1 0
    initializeOnly SFVec3f zAxis 0 0 1
    initializeOnly SFNode  bbox USE BBox
    initializeOnly SFNode  axes USE Axes
    initializeOnly SFNode  front USE Front
    initializeOnly SFNode  right USE Right
    initializeOnly SFNode  back USE Back
    initializeOnly SFNode  left USE Left
    initializeOnly SFNode  top USE Top
    initializeOnly SFNode  bottom USE Bottom
    initializeOnly SFNode  xHandle USE XHandle
    initializeOnly SFNode  yHandle USE YHandle
    initializeOnly SFNode  zHandle USE ZHandle

    url "vrmlscript:
function eventsProcessed ()
{
	var bboxSize1_2 = bboxSize .divide (2);

	// Axes
	
	axes .point = new MFVec3f (new SFVec3f (0, 0, 0),
	                           new SFVec3f (bboxSize1_2 .x, 0, 0),
	                           new SFVec3f (0, bboxSize1_2 .y, 0), 
	                           new SFVec3f (0, 0, bboxSize1_2 .z), 
	                           new SFVec3f (0, 0, 0));


	// BBox

	bbox .point = new MFVec3f (new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z),
	                           new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z), 
	                           new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z), 
	                           new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z));

	// Position and scale planes

	var x = offset;
	var y = offset;
	var z = offset;

	front  .translation = new SFVec3f ( 0,  0,  z + bboxSize1_2 .z);
	right  .translation = new SFVec3f ( x + bboxSize1_2 .x,  0,  0);
	back   .translation = new SFVec3f ( 0,  0, -z - bboxSize1_2 .z);
	left   .translation = new SFVec3f (-x - bboxSize1_2 .x,  0,  0);
	top    .translation = new SFVec3f ( 0,  y + bboxSize1_2 .y,  0);
	bottom .translation = new SFVec3f ( 0, -y - bboxSize1_2 .y,  0);
	
	front  .scale = new SFVec3f (bboxSize .x, bboxSize .y, 1);
	right  .scale = new SFVec3f (1, bboxSize .y, bboxSize .z);
	back   .scale = new SFVec3f (bboxSize .x, bboxSize .y, 1);
	left   .scale = new SFVec3f (1, bboxSize .y, bboxSize .z);
	top    .scale = new SFVec3f (bboxSize .x, 1, bboxSize .z);
	bottom .scale = new SFVec3f (bboxSize .x, 1, bboxSize .z);

	// Axes

	xHandle .translation = new SFVec3f (bboxSize1_2 .x, 0, 0);
	yHandle .translation = new SFVec3f (0, bboxSize1_2 .y, 0);
	zHandle .translation = new SFVec3f (0, 0, bboxSize1_2 .z);
}
"
    directOutput TRUE
  }

  DEF MoveScript Script {
    inputOnly      SFBool  set_active
    inputOnly      SFVec3f set_frontTranslation
    inputOnly      SFVec3f set_rightTranslation
    inputOnly      SFVec3f set_backTranslation
    inputOnly      SFVec3f set_leftTranslation
    inputOnly      SFVec3f set_topTranslation
    inputOnly      SFVec3f set_bottomTranslation
    inputOnly      SFVec3f set_xTranslation
    inputOnly      SFVec3f set_yTranslation
    inputOnly      SFVec3f set_zTranslation
    inputOutput    SFBool  keepCenter FALSE
    inputOutput    SFBool  constrainMotion IS controlKey
    inputOutput    SFVec3f bboxSize IS bboxSize
    inputOutput    SFNode  transform IS transform
    outputOnly     SFInt32 activeTool_changed IS activeTool_changed
    initializeOnly SFVec3f translation 0 0 0
    inputOutput    SFVec3f center 0 0 0
    initializeOnly SFVec3f size 0 0 0

    url "vrmlscript:
function set_active (value)
{
	if (value)
	{
		activeTool_changed = 1;

		translation = transform .translation;
		center      = transform .center;
		size        = bboxSize;
	}
	else
		activeTool_changed = 0;
}

function constrainValue (value, xScale, yScale)
{
	if (constrainMotion)
	{
		if (Math .abs (value .x * xScale) > Math .abs (value .y * yScale))
			value .y = 0;
		else
			value .x = 0;
	}
}

function set_frontTranslation (value)
{
	constrainValue (value, transform .scale .x, transform .scale .y);
	translate_with_bbox (new SFVec3f (value .x, value .y, 0));
}

function set_rightTranslation (value)
{
	constrainValue (value, transform .scale .z, transform .scale .y);
	translate_with_bbox (new SFVec3f (0, value .y, -value .x));
}

function set_backTranslation (value)
{
	constrainValue (value, transform .scale .x, transform .scale .y);
	translate_with_bbox (new SFVec3f (-value .x, value .y, 0));
}

function set_leftTranslation (value)
{
	constrainValue (value, transform .scale .z, transform .scale .y);
	translate_with_bbox (new SFVec3f (0, value .y, value .x));
}

function set_topTranslation (value)
{
	constrainValue (value, transform .scale .x, transform .scale .z);
	translate_with_bbox (new SFVec3f (value .x, 0, -value .y));
}

function set_bottomTranslation (value)
{
	constrainValue (value, transform .scale .x, transform .scale .y);
	translate_with_bbox (new SFVec3f (value .x, 0, value .y));
}

function set_xTranslation (value)
{
	translate (new SFVec3f (value .x, 0, 0));
}

function set_yTranslation (value)
{
	translate (new SFVec3f (0, value .y, 0));
}

function set_zTranslation (value)
{
	translate (new SFVec3f (0, 0, value .z));
}

function translate_with_bbox (value)
{
	translate (value .multVec (size));
}

function translate (value)
{
	if (keepCenter)
	{
		transform .translation = translation .add (value);
		transform .center      = center .subtract (value);
	}
	else
	{
		var matrix = new SFMatrix4f ();
		matrix .setTransform (transform .translation,
		                      transform .rotation,
		                      transform .scale,
		                      transform .scaleOrientation,
		                      transform .center);

		var offset = matrix .multDirMatrix (value);
		transform .translation = translation .add (offset);
	}
}
"
    directOutput TRUE
  }

  DEF CenterScript Script {
    inputOnly      SFVec3f set_center
    inputOnly      SFTime  set_doubleClickTime
    outputOnly     SFBool  keepCenter_changed IS keepCenter_changed
    inputOutput    SFVec3f bboxSize IS bboxSize
    inputOutput    SFVec3f bboxCenter IS bboxCenter
    inputOutput    SFNode  transform IS transform
    initializeOnly SFNode  point USE CenterPoint
    initializeOnly SFNode  coord USE CenterLineCoord
    initializeOnly SFNode  self USE CenterScript

    url "vrmlscript:
function set_doubleClickTime ()
{
  keepCenter_changed = ! keepCenter_changed;
}

function set_transform ()
{
  Browser .addRoute (transform, 'center', self, 'set_center');
}

function eventsProcessed ()
{
	point .translation = transform .center;
	coord .point       = new MFVec3f (transform .center, bboxCenter);
}
"
    directOutput TRUE
  }

  DEF RotationHandleScript Script {
    inputOnly      SFVec3f    set_center
    inputOutput    SFMatrix4f cameraSpaceMatrix IS cameraSpaceMatrix
    inputOutput    SFMatrix4f modelViewMatrix IS modelViewMatrix
    inputOutput    SFNode     transform IS transform
    inputOutput    SFVec3f    bboxSize IS bboxSize
    inputOutput    SFVec3f    bboxCenter IS bboxCenter
    initializeOnly SFNode     handles USE RotationHandles
    initializeOnly SFNode     xHandle USE XRotationHandle
    initializeOnly SFNode     yHandle USE YRotationHandle
    initializeOnly SFNode     zHandle USE ZRotationHandle
    initializeOnly SFNode     self USE RotationHandleScript

    url "vrmlscript:
function set_transform ()
{
  Browser .addRoute (transform, 'center', self, 'set_center');
}    

function eventsProcessed ()
{
	try
	{
		var translation = new SFVec3f ();
		var rotation    = new SFRotation ();
		var scale       = new SFVec3f ();
		var matrix      = new SFMatrix4f ();

		modelViewMatrix .getTransform (translation, rotation, scale);
		matrix .setTransform (translation, rotation);

		// Reset scale and scaleOrientation

		var inverseModelViewMatrix = modelViewMatrix .inverse () .multLeft (matrix);

		inverseModelViewMatrix .getTransform (handles .translation,
		                                      handles .rotation,
		                                      handles .scale,
		                                      handles .scaleOrientation);
		
		// Uniform scale circles

		var bboxOuterRadius  = bboxSize .multVec (scale) .length () / 2;
		var distanceToCenter = transform .center .subtract (bboxCenter) .multVec (scale) .length ();

		var radius = Math .max (bboxOuterRadius, distanceToCenter);
		var scale  = new SFVec3f (radius, radius, radius);

		xHandle .scale = scale;
		yHandle .scale = scale;
		zHandle .scale = scale;
	}
	catch (error)
	{
		// Catch error from matrix inverse.
	}
}
"
    directOutput TRUE
  }

  DEF DiskScript Script {
    inputOnly      SFBool  set_x
    inputOnly      SFBool  set_y
    inputOnly      SFBool  set_z
    outputOnly     SFFloat x_changed
    outputOnly     SFFloat y_changed
    outputOnly     SFFloat z_changed
    initializeOnly SFFloat transparency 0.9
    initializeOnly SFNode  xSensor USE XRotationSensor
    initializeOnly SFNode  ySensor USE YRotationSensor
    initializeOnly SFNode  zSensor USE ZRotationSensor

    url "vrmlscript:
function initialize ()
{
	x_changed = 1;
	y_changed = 1;
	z_changed = 1;
}

function set_x (value)
{
	x_changed = isActive (xSensor, ySensor, zSensor) ? transparency : 1;
}

function set_y (value)
{
	y_changed = isActive (ySensor, xSensor, zSensor) ? transparency : 1;
}

function set_z (value)
{
	z_changed = isActive (zSensor, xSensor, ySensor) ? transparency : 1;
}

function isActive (sensorA, sensorB, sensorC)
{
	return (sensorA .isOver || sensorA .isActive) && !(sensorB .isActive || sensorC .isActive);
}
"
  }

  DEF RotateScript Script {
    inputOnly      SFBool     set_active
    inputOnly      SFRotation set_rotation
    inputOnly      SFRotation set_xRotation
    inputOnly      SFRotation set_yRotation
    inputOnly      SFRotation set_zRotation
    inputOutput    SFBool     constrainRotation IS controlKey
    inputOutput    SFNode     transform IS transform
    outputOnly     SFInt32    activeTool_changed IS activeTool_changed
    initializeOnly SFRotation rotation 0 0 1 0
    initializeOnly SFVec3f    scale 1 1 1
    initializeOnly SFRotation scaleOrientation 0 0 1 0

    url "vrmlscript:
function set_active (value)
{
	if (value)
	{
		activeTool_changed = 2;

		// Normalize scale rotation matrix.

		var scaleRotation = new SFMatrix4f ();
		scaleRotation .setTransform (new SFVec3f (),
		                             transform. rotation,
		                             transform .scale,
		                             transform .scaleOrientation);

		scaleRotation .getTransform (null, rotation, scale, scaleOrientation);

		transform .rotation         = rotation;
		transform .scale            = scale;
		transform .scaleOrientation = scaleOrientation;
	}
	else
		activeTool_changed = 0;
}

function set_xRotation (value)
{
	rotate (value);
}

function set_yRotation (value)
{
	rotate (value);
}

function set_zRotation (value)
{
	rotate (value);
}

function rotate (value)
{
	if (constrainRotation)
	{
		var snapAngle = 11.25 / 180 * Math .PI;
		var angle     = Math .round (value .angle / snapAngle) * snapAngle;
		value = new SFRotation (value .getAxis (), angle);
	}

	transform .rotation = value .multiply (rotation);
}
"
    directOutput TRUE
  }

  DEF ScaleHandlesScript Script {
    inputOutput    SFVec3f bboxSize IS bboxSize
    initializeOnly SFNode  handle1 USE ScaleHandle1
    initializeOnly SFNode  handle2 USE ScaleHandle2
    initializeOnly SFNode  handle3 USE ScaleHandle3
    initializeOnly SFNode  handle4 USE ScaleHandle4
    initializeOnly SFNode  handle5 USE ScaleHandle5
    initializeOnly SFNode  handle6 USE ScaleHandle6
    initializeOnly SFNode  handle7 USE ScaleHandle7
    initializeOnly SFNode  handle8 USE ScaleHandle8
    initializeOnly SFNode  sensor1 USE ScaleSensor1
    initializeOnly SFNode  sensor2 USE ScaleSensor2
    initializeOnly SFNode  sensor3 USE ScaleSensor3
    initializeOnly SFNode  sensor4 USE ScaleSensor4
    initializeOnly SFNode  sensor5 USE ScaleSensor5
    initializeOnly SFNode  sensor6 USE ScaleSensor6
    initializeOnly SFNode  sensor7 USE ScaleSensor7
    initializeOnly SFNode  sensor8 USE ScaleSensor8

    url "vrmlscript:
function eventsProcessed ()
{
	var bboxSize1_2 = bboxSize .divide (2);
	var radius      = bboxSize1_2 .length ();

	handle1 .translation = new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z);
	handle2 .translation = new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z);
	handle3 .translation = new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z);
	handle4 .translation = new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z);

	handle5 .translation = new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z);
	handle6 .translation = new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z);
	handle7 .translation = new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z);
	handle8 .translation = new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z);

	var xAxis = new SFVec3f (1, 0, 0);

	sensor1 .axisRotation = new SFRotation (xAxis, handle1 .translation);
	sensor2 .axisRotation = new SFRotation (xAxis, handle2 .translation);
	sensor3 .axisRotation = new SFRotation (xAxis, handle3 .translation);
	sensor4 .axisRotation = new SFRotation (xAxis, handle4 .translation);

	sensor5 .axisRotation = new SFRotation (xAxis, handle5 .translation);
	sensor6 .axisRotation = new SFRotation (xAxis, handle6 .translation);
	sensor7 .axisRotation = new SFRotation (xAxis, handle7 .translation);
	sensor8 .axisRotation = new SFRotation (xAxis, handle8 .translation);
}
"
    directOutput TRUE
  }

  DEF ScaleScript Script {
    inputOnly      SFBool     set_active
    inputOnly      SFVec3f    set_xScale
    inputOnly      SFVec3f    set_yScale
    inputOnly      SFVec3f    set_zScale
    inputOnly      SFVec3f    set_scale1
    inputOnly      SFVec3f    set_scale2
    inputOnly      SFVec3f    set_scale3
    inputOnly      SFVec3f    set_scale4
    inputOnly      SFVec3f    set_scale5
    inputOnly      SFVec3f    set_scale6
    inputOnly      SFVec3f    set_scale7
    inputOnly      SFVec3f    set_scale8
    inputOnly      SFVec3f    set_linetype
    inputOutput    SFBool     scaleFromEdge IS controlKey
    inputOutput    SFBool     altKey IS altKey
    inputOutput    SFBool     keepCenter FALSE
    inputOutput    SFVec3f    bboxSize IS bboxSize
    inputOutput    SFVec3f    bboxCenter IS bboxCenter
    inputOutput    SFNode     transform IS transform
    outputOnly     SFInt32    activeTool_changed IS activeTool_changed
    initializeOnly SFVec3f    translation 0 0 0
    initializeOnly SFVec3f    scaleFactor 0 0 0
    initializeOnly SFVec3f    center 0 0 0
    initializeOnly SFVec3f    distanceFromCenter 0 0 0
    initializeOnly SFMatrix4f matrix 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    # Sensors below are not used anymore
    initializeOnly MFNode     sensors [
      USE XScaleSensor
      USE YScaleSensor
      USE ZScaleSensor
      USE ScaleSensor1
      USE ScaleSensor2
      USE ScaleSensor3
      USE ScaleSensor4
      USE ScaleSensor5
      USE ScaleSensor6
      USE ScaleSensor7
      USE ScaleSensor8
    ]
    # Sensors above are not used anymore
    initializeOnly SFNode     lineProperties USE LineProperties
    initializeOnly SFNode     self USE ScaleScript

    url "vrmlscript:

function set_transform ()
{
	Browser .addRoute (transform, 'scale', self, 'set_linetype');

	set_linetype (transform .scale);
}

function set_linetype (scale)
{
	var matrix = new SFMatrix4f ();
	matrix .setTransform (transform .translation,
	                      transform .rotation,
	                      transform .scale,
	                      transform .scaleOrientation,
	                      transform .center);

	var x = new SFVec3f (matrix [0], matrix [1], matrix [2]);
	var y = new SFVec3f (matrix [4], matrix [5], matrix [6]);
	var z = new SFVec3f (matrix [8], matrix [9], matrix [10]);

	if (x .cross (y) .dot (z) > 0)
		lineProperties .linetype = 1; // SOLID
	else
		lineProperties .linetype = 2;
}

function set_active (value)
{
	if (value)
	{
		for (i in sensors)
		{
			if (sensors [i] .isActive)
				activeTool_changed = 3 + parseInt (i);
		}

		translation = transform .translation;
		scaleFactor = transform .scale;
		center      = transform .center;

		matrix .setTransform (transform .translation,
		                      transform .rotation,
		                      transform .scale,
		                      transform .scaleOrientation,
		                      transform .center);

		distanceFromCenter = bboxCenter .subtract (transform .center);
	}
	else
		activeTool_changed = 0;
}

// isActive

function set_xScale (value)
{
	if (scaleFromEdge)
		scale (new SFVec3f (1 + value .x / bboxSize .x, 1, 1),
		       new SFVec3f (-bboxSize .x / 2, 0, 0));

	else
		scale (new SFVec3f (1 + 2 * value .x / bboxSize .x, 1, 1),
		       new SFVec3f ());
}

function set_yScale (value)
{
	if (scaleFromEdge)
		scale (new SFVec3f (1, 1 + value .y / bboxSize .y, 1),
		       new SFVec3f (0, -bboxSize .y / 2, 0));
	
	else
		scale (new SFVec3f (1, 1 + 2 * value .y / bboxSize .y, 1),
		       new SFVec3f ());
}

function set_zScale (value)
{
	if (scaleFromEdge)
		scale (new SFVec3f (1, 1, 1 + value .z / bboxSize .z),
		       new SFVec3f (0, 0, -bboxSize .z / 2));

	else
		scale (new SFVec3f (1, 1, 1 + 2 * value .z / bboxSize .z),
		       new SFVec3f ());
}

function set_scale1 (value)
{
	set_scale (value,
	           sgn (value .x),
	           new SFVec3f (-1, -1, -1));
}

function set_scale2 (value)
{
	set_scale (value,
	           sgn (-value .x),
	           new SFVec3f (1, -1, -1));
}

function set_scale3 (value)
{
	set_scale (value,
	           sgn (-value .x),
	           new SFVec3f (1, 1, -1));
}

function set_scale4 (value)
{
	set_scale (value,
	           sgn (value .x),
	           new SFVec3f (-1, 1, -1));
}

function set_scale5 (value)
{
	set_scale (value,
	           sgn (value .x),
	           new SFVec3f (-1, -1, 1));
}

function set_scale6 (value)
{
	set_scale (value,
	           sgn (-value .x),
	           new SFVec3f (1, -1, 1));
}

function set_scale7 (value)
{
	set_scale (value,
	           sgn (-value .x),
	           new SFVec3f (1, 1, 1));
}

function set_scale8 (value)
{
	set_scale (value,
	           sgn (value .x),
	           new SFVec3f (-1, 1, 1));
}

function set_scale (value, sgn, centerOffset)
{
	if (scaleFromEdge)
	{
		centerOffset = centerOffset .multVec (bboxSize .divide (2));

		var s = 1 + sgn * value .length () / bboxSize .length ();

		scale (new SFVec3f (s, s, s), centerOffset);
	}
	else
	{
		var s = 1 + 2 * sgn * value .length () / bboxSize .length ();

		scale (new SFVec3f (s, s, s), new SFVec3f ());
	}
}

function scale (value, centerOffset)
{
	var scale = SFMatrix4f ();
	scale .setTransform (new SFVec3f (), new SFRotation (), value);

	var scaledMatrix = matrix .multLeft (scale);
	var t            = new SFVec3f ();
	var r            = new SFRotation ();
	var s            = new SFVec3f ();
	var so           = new SFRotation ();

	scaledMatrix .getTransform (t, r, s, so, center);

	if (s .x && s .y && s .z)
	{
		transform .translation      = t;
		transform .rotation         = r;
		transform .scale            = s;
		transform .scaleOrientation = so;

		if (keepCenter)
			translateKeepCenter (scaledMatrix, distanceFromCenter .add (centerOffset));
		else
			translate (scaledMatrix, distanceFromCenter .add (centerOffset));
	}
}

function translate (scaledMatrix, distanceFromCenter)
{
	var centerOffset = scaledMatrix .multDirMatrix (distanceFromCenter) .subtract (matrix .multDirMatrix (distanceFromCenter));

	transform .translation = translation .subtract (centerOffset);
}

function translateKeepCenter (scaledMatrix, distanceFromCenter)
{
	var centerOffset = scaledMatrix .inverse () .multDirMatrix (scaledMatrix .multDirMatrix (distanceFromCenter) .subtract (matrix .multDirMatrix (distanceFromCenter)));

	transform .translation = translation .subtract (centerOffset);
	transform .center      = center .add (centerOffset);
}

function sgn (value)
{
	return value < 0 ? -1 : value > 0 ? 1 : 0;
}
"
    directOutput TRUE
  }


  # Debug

  ROUTE XRotationSensor.trackPoint_changed TO PPoint.set_translation
  ROUTE YRotationSensor.trackPoint_changed TO PPoint.set_translation
  ROUTE ZRotationSensor.trackPoint_changed TO PPoint.set_translation

  # Mode translate, rotate or scale

  ROUTE FrontSensor.isActive TO ModeScript.set_active
  ROUTE RightSensor.isActive TO ModeScript.set_active
  ROUTE BackSensor.isActive TO ModeScript.set_active
  ROUTE LeftSensor.isActive TO ModeScript.set_active
  ROUTE TopSensor.isActive TO ModeScript.set_active
  ROUTE BottomSensor.isActive TO ModeScript.set_active
  ROUTE ModeTouch.touchTime TO ModeDoubleClick.set_time
  ROUTE ModeScript.touchTime TO ModeDoubleClick.set_time
  ROUTE ModeDoubleClick.doubleClickTime TO ModeScript.set_time

  # Mode Switch

  ROUTE ModeScript.move TO XTranslationSensor.set_enabled
  ROUTE ModeScript.move TO YTranslationSensor.set_enabled
  ROUTE ModeScript.move TO ZTranslationSensor.set_enabled
  ROUTE ModeScript.scale TO XScaleSensor.set_enabled
  ROUTE ModeScript.scale TO YScaleSensor.set_enabled
  ROUTE ModeScript.scale TO ZScaleSensor.set_enabled
  ROUTE ModeScript.whichChoice_changed TO XSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO YSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO ZSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO RotationHandlesSwitch.set_whichChoice

  # Move Tool

  ROUTE FrontSensor.isActive TO MoveScript.set_active
  ROUTE RightSensor.isActive TO MoveScript.set_active
  ROUTE BackSensor.isActive TO MoveScript.set_active
  ROUTE LeftSensor.isActive TO MoveScript.set_active
  ROUTE TopSensor.isActive TO MoveScript.set_active
  ROUTE BottomSensor.isActive TO MoveScript.set_active
  ROUTE XTranslationSensor.isActive TO MoveScript.set_active
  ROUTE YTranslationSensor.isActive TO MoveScript.set_active
  ROUTE ZTranslationSensor.isActive TO MoveScript.set_active

  #

  ROUTE XTranslationSensor.translation_changed TO MoveScript.set_xTranslation
  ROUTE YTranslationSensor.translation_changed TO MoveScript.set_yTranslation
  ROUTE ZTranslationSensor.translation_changed TO MoveScript.set_zTranslation
  ROUTE FrontSensor.translation_changed TO MoveScript.set_frontTranslation
  ROUTE RightSensor.translation_changed TO MoveScript.set_rightTranslation
  ROUTE BackSensor.translation_changed TO MoveScript.set_backTranslation
  ROUTE LeftSensor.translation_changed TO MoveScript.set_leftTranslation
  ROUTE TopSensor.translation_changed TO MoveScript.set_topTranslation
  ROUTE BottomSensor.translation_changed TO MoveScript.set_bottomTranslation

  # Rotate Tool

  ROUTE XRotationSensor.isOver TO DiskScript.set_x
  ROUTE YRotationSensor.isOver TO DiskScript.set_y
  ROUTE ZRotationSensor.isOver TO DiskScript.set_z
  ROUTE XRotationSensor.isActive TO DiskScript.set_x
  ROUTE YRotationSensor.isActive TO DiskScript.set_y
  ROUTE ZRotationSensor.isActive TO DiskScript.set_z
  ROUTE DiskScript.x_changed TO XCircleMaterial.set_transparency
  ROUTE DiskScript.y_changed TO YCircleMaterial.set_transparency
  ROUTE DiskScript.z_changed TO ZCircleMaterial.set_transparency

  #

  ROUTE XRotationSensor.isActive TO RotateScript.set_active
  ROUTE YRotationSensor.isActive TO RotateScript.set_active
  ROUTE ZRotationSensor.isActive TO RotateScript.set_active

  #

  ROUTE XRotationSensor.rotation_changed TO RotateScript.set_xRotation
  ROUTE YRotationSensor.rotation_changed TO RotateScript.set_yRotation
  ROUTE ZRotationSensor.rotation_changed TO RotateScript.set_zRotation

  # Scale Tool

  ROUTE ModeScript.whichChoice_changed TO ScaleTool.set_whichChoice

  #

  ROUTE XScaleSensor.isActive TO ScaleScript.set_active
  ROUTE YScaleSensor.isActive TO ScaleScript.set_active
  ROUTE ZScaleSensor.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor1.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor2.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor3.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor4.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor5.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor6.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor7.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor8.isActive TO ScaleScript.set_active

  #

  ROUTE XScaleSensor.translation_changed TO ScaleScript.set_xScale
  ROUTE YScaleSensor.translation_changed TO ScaleScript.set_yScale
  ROUTE ZScaleSensor.translation_changed TO ScaleScript.set_zScale
  ROUTE ScaleSensor1.translation_changed TO ScaleScript.set_scale1
  ROUTE ScaleSensor2.translation_changed TO ScaleScript.set_scale2
  ROUTE ScaleSensor3.translation_changed TO ScaleScript.set_scale3
  ROUTE ScaleSensor4.translation_changed TO ScaleScript.set_scale4
  ROUTE ScaleSensor5.translation_changed TO ScaleScript.set_scale5
  ROUTE ScaleSensor6.translation_changed TO ScaleScript.set_scale6
  ROUTE ScaleSensor7.translation_changed TO ScaleScript.set_scale7
  ROUTE ScaleSensor8.translation_changed TO ScaleScript.set_scale8
  ROUTE _1.touchTime TO CenterDoubleClick.set_time
  ROUTE CenterDoubleClick.doubleClickTime TO CenterScript.set_doubleClickTime
  ROUTE CenterScript.keepCenter_changed TO ScaleScript.set_keepCenter
  ROUTE CenterScript.keepCenter_changed TO _2.set_whichChoice
  ROUTE CenterScript.keepCenter_changed TO MoveScript.set_keepCenter
  ROUTE _5.triggerTime TO ModeDoubleClick.set_time
  ROUTE XRotationSensor.isActive TO _4.set_boolean
  ROUTE YRotationSensor.isActive TO _4.set_boolean
  ROUTE ZRotationSensor.isActive TO _4.set_boolean
  ROUTE _4.inputFalse TO _5.set_boolean
  ROUTE ScaleSensor1.isActive TO _4.set_boolean
  ROUTE ScaleSensor2.isActive TO _4.set_boolean
  ROUTE ScaleSensor3.isActive TO _4.set_boolean
  ROUTE ScaleSensor4.isActive TO _4.set_boolean
  ROUTE ScaleSensor5.isActive TO _4.set_boolean
  ROUTE ScaleSensor6.isActive TO _4.set_boolean
  ROUTE ScaleSensor7.isActive TO _4.set_boolean
  ROUTE ScaleSensor8.isActive TO _4.set_boolean
}

DEF Tool TransformTool { }

EXPORT Tool
