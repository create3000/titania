#X3D V3.3 utf8 Titania V0.6.7

EXTERNPROTO HandleShader [ ]
"library/HandleShader.x3dv"

PROTO DoubleClick [
  eventIn      SFTime set_time
  exposedField SFTime doubleClickInterval 0.5
  eventOut     SFTime doubleClickTime
]
{
  DEF DoubleClick Script {
    eventIn      SFTime set_time IS set_time
    exposedField SFTime doubleClickInterval IS doubleClickInterval
    eventOut     SFTime doubleClickTime IS doubleClickTime

    url "vrmlscript:

var firstTime = 0;

function set_time (value, time)
{
	if (firstTime == 0)
		firstTime = time;
	
	else if (time - firstTime < doubleClickInterval)
	{
		firstTime = 0;
		doubleClickTime = time;
	}
	else
		firstTime = time;
}
"
  }
}

PROTO TransformTool [
  # required fields
  eventOut     SFBool     isActive
  exposedField SFMatrix4f cameraSpaceMatrix 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
  exposedField SFMatrix4f modelViewMatrix 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
  exposedField SFVec3f    bboxSize 0 0 0
  exposedField SFVec3f    bboxCenter 0 0 0
  exposedField SFNode     transform NULL
]
{
  Collision {
    collide FALSE
    children [
      Transform {
        translation IS bboxCenter
        children [
          DEF BoundingBox Shape {
            appearance Appearance {
              material Material {
                emissiveColor 0.35 1 0.7
              }
            }
            geometry IndexedLineSet {
              coordIndex [ 0, 1, 2, 3, 0, -1, 4, 5, 6, 7, 4, -1, 0, 4, -1, 3, 7, -1, 1, 5, -1, 2, 6, -1 ]
              coord DEF BBox Coordinate {
                point [ -0.5 0.5 0.5, -0.5 -0.5 0.5, 0.5 -0.5 0.5, 0.5 0.5 0.5, -0.5 0.5 -0.5, -0.5 -0.5 -0.5, 0.5 -0.5 -0.5, 0.5 0.5 -0.5 ]
              }
            }
          }
          Shape {
            geometry IndexedLineSet {
              colorPerVertex FALSE
              coordIndex [ 0, 1, -1, 0, 2, -1, 0, 3, -1 ]
              color Color {
                color [ 1 0 0, 0 1 0, 0 0 1 ]
              }
              coord DEF Axes Coordinate {
                point [ 0 0 0, 0.5 0 0, 0 0.5 0, 0 0 0.5, 0 0 0 ]
              }
            }
          }
          DEF Front Transform {
            children Transform {
              children [
                DEF FrontSensor PlaneSensor {
                  autoOffset FALSE
                  isActive IS isActive
                }
                DEF Plane Shape {
                  appearance DEF Transparent Appearance {
                    material Material {
                      transparency 1
                    }
                  }
                  geometry Rectangle2D {
                    size 1 1
                  }
                }
              ]
            }
          }
          DEF Right Transform {
            children Transform {
              rotation 0 1 0 1.5708
              children [
                DEF RightSensor PlaneSensor {
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Back Transform {
            children Transform {
              rotation 0 1 0 3.14159
              children [
                DEF BackSensor PlaneSensor {
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Left Transform {
            children Transform {
              rotation 0 -1 0 1.5708
              children [
                DEF LeftSensor PlaneSensor {
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Top Transform {
            children Transform {
              rotation -1 0 0 1.5708
              children [
                DEF TopSensor PlaneSensor {
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
          DEF Bottom Transform {
            children Transform {
              rotation 1 0 0 1.5708
              children [
                DEF BottomSensor PlaneSensor {
                  autoOffset FALSE
                  isActive IS isActive
                }
                USE Plane
              ]
            }
          }
        ]
      }
      DEF AdjustmentHandles Transform {
        translation IS bboxCenter
        children [
          DEF X Group {
            children [
              DEF ModeTouch TouchSensor { }
              DEF XTranslationSensor PlaneSensor {
                description "x-Axis"
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF XScaleSensor PlaneSensor {
                enabled FALSE
                description "x-Axis"
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF XHandle Transform {
                children ScreenGroup {
                  children DEF XSwitch Switch {
                    choice [
                      Transform {
                        translation 10.5 0 0
                        rotation 0 0 -1 1.5708
                        children Shape {
                          appearance DEF Red Appearance {
                            material Material {
                              diffuseColor 1 0 0
                            }
                            shaders DEF HandleShader HandleShader { }
                          }
                          geometry DEF Arrow Cone {
                            height 21
                            bottomRadius 7
                          }
                        }
                      }
                      Transform {
                        translation 8 0 0
                        children Shape {
                          appearance USE Red
                          geometry DEF Sphere Sphere {
                            radius 8
                          }
                        }
                      }
                      Transform {
                        translation 6 0 0
                        children Shape {
                          appearance USE Red
                          geometry DEF Box Box {
                            size 12 12 12
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
          DEF Y Group {
            children [
              USE ModeTouch
              DEF YTranslationSensor PlaneSensor {
                description "y-Axis"
                autoOffset FALSE
                maxPosition 0 -1
                isActive IS isActive
              }
              DEF YScaleSensor PlaneSensor {
                enabled FALSE
                description "y-Axis"
                autoOffset FALSE
                maxPosition 0 -1
                isActive IS isActive
              }
              DEF YHandle Transform {
                children ScreenGroup {
                  children DEF YSwitch Switch {
                    choice [
                      Transform {
                        translation 0 10.5 0
                        children Shape {
                          appearance DEF Green Appearance {
                            material Material {
                              diffuseColor 0 1 0
                            }
                            shaders USE HandleShader
                          }
                          geometry USE Arrow
                        }
                      }
                      Transform {
                        translation 0 8 0
                        children Shape {
                          appearance USE Green
                          geometry USE Sphere
                        }
                      }
                      Transform {
                        translation 0 6 0
                        children Shape {
                          appearance USE Green
                          geometry USE Box
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
          DEF Z Group {
            children [
              USE ModeTouch
              DEF ZTranslationSensor PlaneSensor {
                description "z-Axis"
                axisRotation 0 -1 0 1.5708
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF ZScaleSensor PlaneSensor {
                enabled FALSE
                description "z-Axis"
                axisRotation 0 -1 0 1.5708
                autoOffset FALSE
                maxPosition -1 0
                isActive IS isActive
              }
              DEF ZHandle Transform {
                children ScreenGroup {
                  children DEF ZSwitch Switch {
                    choice [
                      Transform {
                        translation 0 0 10.5
                        rotation 1 0 0 1.5708
                        children Shape {
                          appearance DEF Blue Appearance {
                            material Material {
                              diffuseColor 0 0 1
                            }
                            shaders USE HandleShader
                          }
                          geometry USE Arrow
                        }
                      }
                      Transform {
                        translation 0 0 8
                        children Shape {
                          appearance USE Blue
                          geometry USE Sphere
                        }
                      }
                      Transform {
                        translation 0 0 6
                        children Shape {
                          appearance USE Blue
                          geometry USE Box
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
          DEF ScaleTool Switch {
            choice [
              Group { }
              Group { }
              Group {
                children [
                  DEF ScaleHandle1 Transform {
                    children [
                      DEF ScaleSensor1 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      DEF ScaleHandle ScreenGroup {
                        children Transform {
                          children Shape {
                            appearance DEF White Appearance {
                              material Material {
                                diffuseColor 1 1 1
                              }
                              shaders USE HandleShader
                            }
                            geometry USE Box
                          }
                        }
                      }
                    ]
                  }
                  DEF ScaleHandle2 Transform {
                    children [
                      DEF ScaleSensor2 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle3 Transform {
                    children [
                      DEF ScaleSensor3 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle4 Transform {
                    children [
                      DEF ScaleSensor4 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle5 Transform {
                    children [
                      DEF ScaleSensor5 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle6 Transform {
                    children [
                      DEF ScaleSensor6 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle7 Transform {
                    children [
                      DEF ScaleSensor7 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                  DEF ScaleHandle8 Transform {
                    children [
                      DEF ScaleSensor8 PlaneSensor {
                        autoOffset FALSE
                        maxPosition -1 0
                        isActive IS isActive
                      }
                      USE ScaleHandle
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
      DEF CenterLine Shape {
        appearance Appearance {
          lineProperties LineProperties {
            linetype 3
          }
          material DEF Yellow Material {
            diffuseColor 1 1 0
          }
        }
        geometry DEF CenterIndexedLineSet IndexedLineSet {
          coordIndex [ 0, 1, -1 ]
          color Color {
            color [ 1 1 0, 1 1 0 ]
          }
          coord DEF CenterLineCoord Coordinate { }
        }
      }
      DEF CenterPoint Transform {
        children [
          ScreenGroup {
            children Shape {
              appearance Appearance {
                material USE Yellow
                shaders USE HandleShader
              }
              geometry Sphere {
                radius 5
              }
            }
          }
          DEF RotationHandlesSwitch Switch {
            choice [
              Group { }
              DEF RotationHandles Transform {
                children [
                  Group {
                    children [
                      DEF XRotationSensor CylinderSensor {
                        axisRotation 0 0 1 1.5708
                        diskAngle 1.5708
                        autoOffset FALSE
                        isActive IS isActive
                      }
                      DEF XRotationHandle Transform {
                        rotation 0 1 0 1.5708
                        children [
                          DEF Cylinder Transform {
                            rotation 1 0 0 1.5708
                            children Shape {
                              appearance USE Transparent
                              geometry Cylinder {
                                height 0.01
                              }
                            }
                          }
                          Shape {
                            appearance Appearance {
                              material Material {
                                emissiveColor 1 0 0
                              }
                            }
                            geometry DEF Circle Circle2D { }
                          }
                          DEF XCircleSwitch Switch {
                            whichChoice 0
                            choice Shape {
                              appearance Appearance {
                                material DEF XCircleMaterial Material {
                                  emissiveColor 1 0 0
                                  transparency 0.1
                                }
                              }
                              geometry DEF Disk Disk2D {
                                solid FALSE
                              }
                            }
                          }
                        ]
                      }
                    ]
                  }
                  Group {
                    children [
                      DEF YRotationSensor CylinderSensor {
                        diskAngle 1.5708
                        autoOffset FALSE
                        isActive IS isActive
                      }
                      DEF YRotationHandle Transform {
                        rotation 1 0 0 1.5708
                        children [
                          USE Cylinder
                          Shape {
                            appearance Appearance {
                              material Material {
                                emissiveColor 0 1 0
                              }
                            }
                            geometry USE Circle
                          }
                          DEF YCircleSwitch Switch {
                            whichChoice 0
                            choice Shape {
                              appearance Appearance {
                                material DEF YCircleMaterial Material {
                                  emissiveColor 0 1 0
                                  transparency 0.1
                                }
                              }
                              geometry USE Disk
                            }
                          }
                        ]
                      }
                    ]
                  }
                  Group {
                    children [
                      DEF ZRotationSensor CylinderSensor {
                        axisRotation 1 0 0 1.5708
                        diskAngle 1.5708
                        autoOffset FALSE
                        isActive IS isActive
                      }
                      DEF ZRotationHandle Transform {
                        children [
                          USE Cylinder
                          Shape {
                            appearance Appearance {
                              material Material {
                                emissiveColor 0 0 1
                              }
                            }
                            geometry USE Circle
                          }
                          DEF ZCircleSwitch Switch {
                            whichChoice 0
                            choice Shape {
                              appearance Appearance {
                                material DEF ZCircleMaterial Material {
                                  emissiveColor 0 0 1
                                  transparency 0.1
                                }
                              }
                              geometry USE Disk
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
              Group { }
            ]
          }
        ]
      }
    ]
  }

  DEF DoubleClick_1 DoubleClick { }

  DEF ModeScript Script {
    eventIn  SFBool  set_active
    eventIn  SFTime  set_time
    eventOut SFTime  touchTime
    eventOut SFBool  move
    eventOut SFBool  rotate
    eventOut SFBool  scale
    eventOut SFInt32 whichChoice_changed

    url "vrmlscript:
function initialize (value, time)
{
	set_whichChoice (0);
}

function set_active (value, time)
{
	if (! value)
		touchTime = time;
}

function set_time (value, time)
{
	set_whichChoice ((whichChoice_changed + 1) % 3);
}

function set_whichChoice (value)
{
	move   = false;
	rotate = false;
	scale  = false;
	
	switch (value)
	{
		case 0:
			move = true;
			break;
		case 1:
			move   = true;
			rotate = true;
			break;
		case 2:
			scale = true;
			break;
	}

	whichChoice_changed = value;
}
"
  }

  DEF BBoxScript Script {
    exposedField SFMatrix4f cameraSpaceMatrix IS cameraSpaceMatrix
    exposedField SFMatrix4f modelViewMatrix IS modelViewMatrix
    exposedField SFVec3f    bboxSize IS bboxSize
    field        SFFloat    offset 0.01
    field        SFVec3f    xAxis 1 0 0
    field        SFVec3f    yAxis 0 1 0
    field        SFVec3f    zAxis 0 0 1
    field        SFNode     bbox USE BBox
    field        SFNode     axes USE Axes
    field        SFNode     front USE Front
    field        SFNode     right USE Right
    field        SFNode     back USE Back
    field        SFNode     left USE Left
    field        SFNode     top USE Top
    field        SFNode     bottom USE Bottom
    field        SFNode     xHandle USE XHandle
    field        SFNode     yHandle USE YHandle
    field        SFNode     zHandle USE ZHandle

    url "vrmlscript:
function eventsProcessed ()
{
	var bboxSize1_2 = bboxSize .divide (2);

	// Axes
	
	axes .point = new MFVec3f (new SFVec3f (0, 0, 0),
	                           new SFVec3f (bboxSize1_2 .x, 0, 0),
	                           new SFVec3f (0, bboxSize1_2 .y, 0), 
	                           new SFVec3f (0, 0, bboxSize1_2 .z), 
	                           new SFVec3f (0, 0, 0));


	// BBox

	bbox .point = new MFVec3f (new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z),
	                           new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z), 
	                           new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z), 
	                           new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z), 
	                           new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z));

	// Position and scale planes

	var scale = new SFVec3f ();
	var m     = modelViewMatrix .multRight (cameraSpaceMatrix); // m = transformationMatrix
	m .getTransform (null, null, scale);

	var x = offset / Math .abs (scale .x);
	var y = offset / Math .abs (scale .y);
	var z = offset / Math .abs (scale .z);

	front  .translation = new SFVec3f ( 0,  0,  z + bboxSize1_2 .z);
	right  .translation = new SFVec3f ( x + bboxSize1_2 .x,  0,  0);
	back   .translation = new SFVec3f ( 0,  0, -z - bboxSize1_2 .z);
	left   .translation = new SFVec3f (-x - bboxSize1_2 .x,  0,  0);
	top    .translation = new SFVec3f ( 0,  y + bboxSize1_2 .y,  0);
	bottom .translation = new SFVec3f ( 0, -y - bboxSize1_2 .y,  0);
	
	front  .scale = new SFVec3f (bboxSize .x, bboxSize .y, 1);
	right  .scale = new SFVec3f (1, bboxSize .y, bboxSize .z);
	back   .scale = new SFVec3f (bboxSize .x, bboxSize .y, 1);
	left   .scale = new SFVec3f (1, bboxSize .y, bboxSize .z);
	top    .scale = new SFVec3f (bboxSize .x, 1, bboxSize .z);
	bottom .scale = new SFVec3f (bboxSize .x, 1, bboxSize .z);

	// Axes

	xHandle .translation = new SFVec3f (bboxSize1_2 .x, 0, 0);
	yHandle .translation = new SFVec3f (0, bboxSize1_2 .y, 0);
	zHandle .translation = new SFVec3f (0, 0, bboxSize1_2 .z);

	//xHandle .rotation = new SFRotation (xAxis, new SFVec3f (m [0], m [1], m [ 2]));
	//yHandle .rotation = new SFRotation (yAxis, new SFVec3f (m [4], m [5], m [ 6]));
	//zHandle .rotation = new SFRotation (zAxis, new SFVec3f (m [8], m [9], m [10]));
}
"
    directOutput TRUE
  }

  DEF MoveScript Script {
    eventIn      SFBool  set_active
    eventIn      SFVec3f set_frontTranslation
    eventIn      SFVec3f set_rightTranslation
    eventIn      SFVec3f set_backTranslation
    eventIn      SFVec3f set_leftTranslation
    eventIn      SFVec3f set_topTranslation
    eventIn      SFVec3f set_bottomTranslation
    eventIn      SFVec3f set_xTranslation
    eventIn      SFVec3f set_yTranslation
    eventIn      SFVec3f set_zTranslation
    exposedField SFVec3f bboxSize IS bboxSize
    exposedField SFNode  transform IS transform
    field        SFVec3f translation 0 0 0

    url "vrmlscript:
function set_active (value)
{
	if (value)
		translation = transform .translation;
}

function set_frontTranslation (value)
{
	translate_with_bbox (new SFVec3f (value .x, value .y, 0));
}

function set_rightTranslation (value)
{
	translate_with_bbox (new SFVec3f (0, value .y, -value .x));
}

function set_backTranslation (value)
{
	translate_with_bbox (new SFVec3f (-value .x, value .y, 0));
}

function set_leftTranslation (value)
{
	translate_with_bbox (new SFVec3f (0, value .y, value .x));
}

function set_topTranslation (value)
{
	translate_with_bbox (new SFVec3f (value .x, 0, -value .y));
}

function set_bottomTranslation (value)
{
	translate_with_bbox (new SFVec3f (value .x, 0, value .y));
}

function set_xTranslation (value)
{
	translate (new SFVec3f (value .x, 0, 0));
}

function set_yTranslation (value)
{
	translate (new SFVec3f (0, value .y, 0));
}

function set_zTranslation (value)
{
	translate (new SFVec3f (0, 0, value .z));
}

function translate_with_bbox (value)
{
	translate (value .multVec (bboxSize));
}

function translate (value)
{
	var matrix = new SFMatrix4f ();
	matrix .setTransform (transform .translation,
	                      transform .rotation,
	                      transform .scale,
	                      transform .scaleOrientation,
	                      transform .center);

	var offset = matrix .multDirMatrix (value);

	transform .translation = translation .add (offset);
}
"
    directOutput TRUE
  }

  DEF CenterScript Script {
    eventIn      SFVec3f set_center
    exposedField SFVec3f bboxSize IS bboxSize
    exposedField SFVec3f bboxCenter IS bboxCenter
    exposedField SFNode  transform IS transform
    field        SFNode  point USE CenterPoint
    field        SFNode  coord USE CenterLineCoord
    field        SFNode  self USE CenterScript

    url "vrmlscript:
function set_transform ()
{
  Browser .addRoute (transform, 'center', self, 'set_center');
}    

function eventsProcessed ()
{
	point .translation = transform .center;
	coord .point       = new MFVec3f (transform .center, bboxCenter);
}
"
    directOutput TRUE
  }

  DEF RotationHandleScript Script {
    eventIn      SFVec3f    set_center
    exposedField SFMatrix4f cameraSpaceMatrix IS cameraSpaceMatrix
    exposedField SFMatrix4f modelViewMatrix IS modelViewMatrix
    exposedField SFNode     transform IS transform
    exposedField SFVec3f    bboxSize IS bboxSize
    exposedField SFVec3f    bboxCenter IS bboxCenter
    field        SFNode     handles USE RotationHandles
    field        SFNode     xHandle USE XRotationHandle
    field        SFNode     yHandle USE YRotationHandle
    field        SFNode     zHandle USE ZRotationHandle
    field        SFNode     self USE RotationHandleScript

    url "vrmlscript:
function set_transform ()
{
  Browser .addRoute (transform, 'center', self, 'set_center');
}    

function eventsProcessed ()
{
	try
	{
		var translation = new SFVec3f ();
		var rotation    = new SFRotation ();
		var scale       = new SFVec3f ();
		var matrix      = new SFMatrix4f ();

		modelViewMatrix .getTransform (translation, rotation, scale);
		matrix .setTransform (translation, rotation);

		// Reset scale and scaleOrientation

		var inverseModelViewMatrix = modelViewMatrix .inverse () .multLeft (matrix);

		inverseModelViewMatrix .getTransform (handles .translation,
		                                      handles .rotation,
		                                      handles .scale,
		                                      handles .scaleOrientation);
		
		// Uniform scale circles

		var bboxOuterRadius  = bboxSize .multVec (scale) .length () / 2;
		var distanceToCenter = transform .center .subtract (bboxCenter) .multVec (scale) .length ();

		var radius = Math .max (bboxOuterRadius, distanceToCenter);
		var scale  = new SFVec3f (radius, radius, radius);

		xHandle .scale = scale;
		yHandle .scale = scale;
		zHandle .scale = scale;
	}
	catch (error)
	{
		// Catch error from matrix inverse.
	}
}
"
    directOutput TRUE
  }

  DEF DiskScript Script {
    eventIn  SFBool  set_x
    eventIn  SFBool  set_y
    eventIn  SFBool  set_z
    eventOut SFFloat x_changed
    eventOut SFFloat y_changed
    eventOut SFFloat z_changed
    field    SFFloat transparency 0.9
    field    SFNode  xSensor USE XRotationSensor
    field    SFNode  ySensor USE YRotationSensor
    field    SFNode  zSensor USE ZRotationSensor

    url "vrmlscript:
function initialize ()
{
	x_changed = 1;
	y_changed = 1;
	z_changed = 1;
}

function set_x (value)
{
	x_changed = isActive (xSensor, ySensor, zSensor) ? transparency : 1;
}

function set_y (value)
{
	y_changed = isActive (ySensor, xSensor, zSensor) ? transparency : 1;
}

function set_z (value)
{
	z_changed = isActive (zSensor, xSensor, ySensor) ? transparency : 1;
}

function isActive (sensorA, sensorB, sensorC)
{
	return (sensorA .isOver || sensorA .isActive) && !(sensorB .isActive || sensorC .isActive);
}
"
  }

  DEF RotateScript Script {
    eventIn      SFBool     set_active
    eventIn      SFRotation set_rotation
    eventIn      SFRotation set_xRotation
    eventIn      SFRotation set_yRotation
    eventIn      SFRotation set_zRotation
    exposedField SFNode     transform IS transform
    field        SFRotation rotation 0 0 1 0

    url "vrmlscript:
function set_active (value)
{
	if (value)
		rotation = transform .rotation;
}

function set_xRotation (value)
{
	transform .rotation = value .multiply (rotation);
}

function set_yRotation (value)
{
	transform .rotation = value .multiply (rotation);
}

function set_zRotation (value)
{
	transform .rotation = value .multiply (rotation);
}
"
    directOutput TRUE
  }

  DEF ScaleHandlesScript Script {
    exposedField SFVec3f bboxSize IS bboxSize
    field        SFNode  handle1 USE ScaleHandle1
    field        SFNode  handle2 USE ScaleHandle2
    field        SFNode  handle3 USE ScaleHandle3
    field        SFNode  handle4 USE ScaleHandle4
    field        SFNode  handle5 USE ScaleHandle5
    field        SFNode  handle6 USE ScaleHandle6
    field        SFNode  handle7 USE ScaleHandle7
    field        SFNode  handle8 USE ScaleHandle8
    field        SFNode  sensor1 USE ScaleSensor1
    field        SFNode  sensor2 USE ScaleSensor2
    field        SFNode  sensor3 USE ScaleSensor3
    field        SFNode  sensor4 USE ScaleSensor4
    field        SFNode  sensor5 USE ScaleSensor5
    field        SFNode  sensor6 USE ScaleSensor6
    field        SFNode  sensor7 USE ScaleSensor7
    field        SFNode  sensor8 USE ScaleSensor8

    url "vrmlscript:
function eventsProcessed ()
{
	var bboxSize1_2 = bboxSize .divide (2);
	var radius      = bboxSize1_2 .length ();

	handle1 .translation = new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z);
	handle2 .translation = new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y,  bboxSize1_2 .z);
	handle3 .translation = new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z);
	handle4 .translation = new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y,  bboxSize1_2 .z);

	handle5 .translation = new SFVec3f ( bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z);
	handle6 .translation = new SFVec3f (-bboxSize1_2 .x,  bboxSize1_2 .y, -bboxSize1_2 .z);
	handle7 .translation = new SFVec3f (-bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z);
	handle8 .translation = new SFVec3f ( bboxSize1_2 .x, -bboxSize1_2 .y, -bboxSize1_2 .z);

	var xAxis = new SFVec3f (1, 0, 0);

	sensor1 .axisRotation = new SFRotation (xAxis, handle1 .translation);
	sensor2 .axisRotation = new SFRotation (xAxis, handle2 .translation);
	sensor3 .axisRotation = new SFRotation (xAxis, handle3 .translation);
	sensor4 .axisRotation = new SFRotation (xAxis, handle4 .translation);

	sensor5 .axisRotation = new SFRotation (xAxis, handle5 .translation);
	sensor6 .axisRotation = new SFRotation (xAxis, handle6 .translation);
	sensor7 .axisRotation = new SFRotation (xAxis, handle7 .translation);
	sensor8 .axisRotation = new SFRotation (xAxis, handle8 .translation);
}
"
    directOutput TRUE
  }

  DEF ScaleScript Script {
    eventIn      SFBool     set_active
    eventIn      SFVec3f    set_xScale
    eventIn      SFVec3f    set_yScale
    eventIn      SFVec3f    set_zScale
    eventIn      SFVec3f    set_scale1
    eventIn      SFVec3f    set_scale2
    eventIn      SFVec3f    set_scale3
    eventIn      SFVec3f    set_scale4
    eventIn      SFVec3f    set_scale5
    eventIn      SFVec3f    set_scale6
    eventIn      SFVec3f    set_scale7
    eventIn      SFVec3f    set_scale8
    exposedField SFFloat    minScale 0.001
    exposedField SFBool     scaleAroundBBoxCenter FALSE
    exposedField SFNode     transform IS transform
    exposedField SFVec3f    bboxSize IS bboxSize
    exposedField SFVec3f    bboxCenter IS bboxCenter
    field        SFVec3f    translation 0 0 0
    field        SFVec3f    scaleFactor 0 0 0
    field        SFVec3f    center 0 0 0
    field        SFVec3f    distanceFromCenter 0 0 0
    field        SFMatrix4f matrix 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    field        SFNode     sensor1 USE ScaleSensor1
    field        SFNode     sensor2 USE ScaleSensor2
    field        SFNode     sensor3 USE ScaleSensor3
    field        SFNode     sensor4 USE ScaleSensor4
    field        SFNode     sensor5 USE ScaleSensor5
    field        SFNode     sensor6 USE ScaleSensor6
    field        SFNode     sensor7 USE ScaleSensor7
    field        SFNode     sensor8 USE ScaleSensor8

    url "vrmlscript:
	
function set_active (value)
{
	if (value)
	{
		translation = transform .translation;
		scaleFactor = transform .scale;
		center      = transform .center;

		matrix .setTransform (transform .translation,
		                      transform .rotation,
		                      transform .scale,
		                      transform .scaleOrientation,
		                      transform .center);

		distanceFromCenter = bboxCenter .subtract (transform .center);
	}
}

// isActive


function set_xScale (value)
{
	scale (new SFVec3f (1 + 2 * value .x / bboxSize .x, 1, 1));
}

function set_yScale (value)
{
	scale (new SFVec3f (1, 1 + 2 * value .y / bboxSize .y, 1));
}

function set_zScale (value)
{
	scale (new SFVec3f (1, 1, 1 + 2 * value .z / bboxSize .z));
}

function set_scale1 (value)
{
	set_scale (value, sgn (sensor1 .trackPoint_changed .x))
}

function set_scale2 (value)
{
	set_scale (value, sgn (-sensor2 .trackPoint_changed .x))
}

function set_scale3 (value)
{
	set_scale (value, sgn (-sensor3 .trackPoint_changed .x))
}

function set_scale4 (value)
{
	set_scale (value, sgn (sensor4 .trackPoint_changed .x))
}

function set_scale5 (value)
{
	set_scale (value, sgn (sensor5 .trackPoint_changed .x))
}

function set_scale6 (value)
{
	set_scale (value, sgn (-sensor6 .trackPoint_changed .x))
}

function set_scale7 (value)
{
	set_scale (value, sgn (-sensor7 .trackPoint_changed .x))
}

function set_scale8 (value)
{
	set_scale (value, sgn (sensor8 .trackPoint_changed .x))
}

function set_scale (value, sgn)
{
	var size = 1 + 2 * sgn * value .length () / bboxSize .length ();
	
	scale (new SFVec3f (size, size, size));
}

function scale (value)
{
	var scale = scaleFactor .multVec (value);
	
	if (scale .x && scale .y && scale .z)
	{
		transform .scale = scale;

		if (scaleAroundBBoxCenter)
			translate ();
	}
}

function translate ()
{
	var scaledMatrix = new SFMatrix4f ();
	scaledMatrix .setTransform (transform .translation,
	                            transform .rotation,
	                            transform .scale,
	                            transform .scaleOrientation,
	                            transform .center);

	var centerOffset = scaledMatrix .inverse () .multDirMatrix (scaledMatrix .multDirMatrix (distanceFromCenter) .subtract (matrix .multDirMatrix (distanceFromCenter)));

	transform .translation = translation .subtract (centerOffset);
	transform .center      = center .add (centerOffset);
}

function sgn (value)
{
	return value < 0 ? -1 : value > 0 ? 1 : 0;
}
"
    directOutput TRUE
  }


  # Mode translate, rotate or scale

  ROUTE FrontSensor.isActive TO ModeScript.set_active
  ROUTE RightSensor.isActive TO ModeScript.set_active
  ROUTE BackSensor.isActive TO ModeScript.set_active
  ROUTE LeftSensor.isActive TO ModeScript.set_active
  ROUTE TopSensor.isActive TO ModeScript.set_active
  ROUTE BottomSensor.isActive TO ModeScript.set_active
  ROUTE ModeTouch.touchTime TO DoubleClick_1.set_time
  ROUTE ModeScript.touchTime TO DoubleClick_1.set_time
  ROUTE DoubleClick_1.doubleClickTime TO ModeScript.set_time

  # Mode Switch

  ROUTE ModeScript.move TO XTranslationSensor.set_enabled
  ROUTE ModeScript.move TO YTranslationSensor.set_enabled
  ROUTE ModeScript.move TO ZTranslationSensor.set_enabled
  ROUTE ModeScript.scale TO XScaleSensor.set_enabled
  ROUTE ModeScript.scale TO YScaleSensor.set_enabled
  ROUTE ModeScript.scale TO ZScaleSensor.set_enabled
  ROUTE ModeScript.whichChoice_changed TO XSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO YSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO ZSwitch.set_whichChoice
  ROUTE ModeScript.whichChoice_changed TO RotationHandlesSwitch.set_whichChoice

  # Move Tool

  ROUTE FrontSensor.isActive TO MoveScript.set_active
  ROUTE RightSensor.isActive TO MoveScript.set_active
  ROUTE BackSensor.isActive TO MoveScript.set_active
  ROUTE LeftSensor.isActive TO MoveScript.set_active
  ROUTE TopSensor.isActive TO MoveScript.set_active
  ROUTE BottomSensor.isActive TO MoveScript.set_active
  ROUTE XTranslationSensor.isActive TO MoveScript.set_active
  ROUTE YTranslationSensor.isActive TO MoveScript.set_active
  ROUTE ZTranslationSensor.isActive TO MoveScript.set_active

  #

  ROUTE XTranslationSensor.translation_changed TO MoveScript.set_xTranslation
  ROUTE YTranslationSensor.translation_changed TO MoveScript.set_yTranslation
  ROUTE ZTranslationSensor.translation_changed TO MoveScript.set_zTranslation
  ROUTE FrontSensor.translation_changed TO MoveScript.set_frontTranslation
  ROUTE RightSensor.translation_changed TO MoveScript.set_rightTranslation
  ROUTE BackSensor.translation_changed TO MoveScript.set_backTranslation
  ROUTE LeftSensor.translation_changed TO MoveScript.set_leftTranslation
  ROUTE TopSensor.translation_changed TO MoveScript.set_topTranslation
  ROUTE BottomSensor.translation_changed TO MoveScript.set_bottomTranslation

  # Rotate Tool

  ROUTE XRotationSensor.isOver TO DiskScript.set_x
  ROUTE YRotationSensor.isOver TO DiskScript.set_y
  ROUTE ZRotationSensor.isOver TO DiskScript.set_z
  ROUTE XRotationSensor.isActive TO DiskScript.set_x
  ROUTE YRotationSensor.isActive TO DiskScript.set_y
  ROUTE ZRotationSensor.isActive TO DiskScript.set_z
  ROUTE DiskScript.x_changed TO XCircleMaterial.set_transparency
  ROUTE DiskScript.y_changed TO YCircleMaterial.set_transparency
  ROUTE DiskScript.z_changed TO ZCircleMaterial.set_transparency

  #

  ROUTE XRotationSensor.isActive TO RotateScript.set_active
  ROUTE YRotationSensor.isActive TO RotateScript.set_active
  ROUTE ZRotationSensor.isActive TO RotateScript.set_active

  #

  ROUTE XRotationSensor.rotation_changed TO RotateScript.set_xRotation
  ROUTE YRotationSensor.rotation_changed TO RotateScript.set_yRotation
  ROUTE ZRotationSensor.rotation_changed TO RotateScript.set_zRotation

  # Scale Tool

  ROUTE ModeScript.whichChoice_changed TO ScaleTool.set_whichChoice

  #

  ROUTE XScaleSensor.isActive TO ScaleScript.set_active
  ROUTE YScaleSensor.isActive TO ScaleScript.set_active
  ROUTE ZScaleSensor.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor1.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor2.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor3.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor4.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor5.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor6.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor7.isActive TO ScaleScript.set_active
  ROUTE ScaleSensor8.isActive TO ScaleScript.set_active

  #

  ROUTE XScaleSensor.translation_changed TO ScaleScript.set_xScale
  ROUTE YScaleSensor.translation_changed TO ScaleScript.set_yScale
  ROUTE ZScaleSensor.translation_changed TO ScaleScript.set_zScale
  ROUTE ScaleSensor1.translation_changed TO ScaleScript.set_scale1
  ROUTE ScaleSensor2.translation_changed TO ScaleScript.set_scale2
  ROUTE ScaleSensor3.translation_changed TO ScaleScript.set_scale3
  ROUTE ScaleSensor4.translation_changed TO ScaleScript.set_scale4
  ROUTE ScaleSensor5.translation_changed TO ScaleScript.set_scale5
  ROUTE ScaleSensor6.translation_changed TO ScaleScript.set_scale6
  ROUTE ScaleSensor7.translation_changed TO ScaleScript.set_scale7
  ROUTE ScaleSensor8.translation_changed TO ScaleScript.set_scale8
}

DEF Tool TransformTool { }
