<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Full' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta name='comment' content='World of Titania'/>
    <meta name='created' content='Sat, 10 Feb 2018 02:42:59 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Titania V4.0.6a, http://titania.create3000.de'/>
    <meta name='identifier' content='file:///home/holger/Projekte/Titania/libtitania-x3d/share/titania/shaders/glTF/Prototypes/pbrAppearance.x3d'/>
    <meta name='modified' content='Mon, 12 Feb 2018 05:16:52 GMT'/>
    <meta name='titania-output-style' content='Nicest'/>
  </head>
  <Scene>
    <ProtoDeclare name='pbrMetallicRoughness'>
      <ProtoInterface>
        <field accessType='inputOutput' type='MFString' name='defines'/>
        <field accessType='inputOutput' type='SFString' name='alphaMode' value='OPAQUE'/>
        <field accessType='inputOutput' type='SFVec3f' name='baseColorFactor' value='1 1 1'/>
        <field accessType='inputOutput' type='SFFloat' name='alphaFactor' value='1'/>
        <field accessType='inputOutput' type='SFFloat' name='metallicFactor' value='1'/>
        <field accessType='inputOutput' type='SFFloat' name='roughnessFactor' value='1'/>
        <field accessType='inputOutput' type='SFVec3f' name='emissiveFactor'/>
        <field accessType='inputOutput' type='SFFloat' name='occlusionStrength' value='1'/>
        <field accessType='inputOutput' type='SFFloat' name='normalScale' value='1'/>
        <field accessType='inputOutput' type='SFNode' name='baseColorTexture'/>
        <field accessType='inputOutput' type='SFNode' name='metallicRoughnessTexture'/>
        <field accessType='inputOutput' type='SFNode' name='emissiveTexture'/>
        <field accessType='inputOutput' type='SFNode' name='occlusionTexture'/>
        <field accessType='inputOutput' type='SFNode' name='normalTexture'/>
      </ProtoInterface>
      <ProtoBody>
        <Appearance DEF='_1'>
          <ComposedShader DEF='pbrShader'
              language='GLSL'>
            <field accessType='inputOutput' type='SFVec4f' name='baseColorFactor' value='1 1 1 1'/>
            <field accessType='inputOutput' type='SFVec2f' name='metallicRoughnessValues' value='1 1'/>
            <field accessType='inputOutput' type='SFVec3f' name='emissiveFactor'/>
            <field accessType='inputOutput' type='SFFloat' name='occlusionStrength'/>
            <field accessType='inputOutput' type='SFFloat' name='normalScale'/>
            <field accessType='inputOutput' type='SFNode' name='baseColorTexture'/>
            <field accessType='inputOutput' type='SFNode' name='metallicRoughnessTexture'/>
            <field accessType='inputOutput' type='SFNode' name='emissiveTexture'/>
            <field accessType='inputOutput' type='SFNode' name='occlusionTexture'/>
            <field accessType='inputOutput' type='SFNode' name='normalTexture'/>
            <field accessType='inputOutput' type='SFNode' name='diffuseEnvironmentTexture'/>
            <field accessType='inputOutput' type='SFNode' name='specularEnvironmentTexture'/>
            <field accessType='inputOutput' type='SFNode' name='brdfLUT'/>
            <IS>
              <connect nodeField='emissiveFactor' protoField='emissiveFactor'/>
              <connect nodeField='occlusionStrength' protoField='occlusionStrength'/>
              <connect nodeField='normalScale' protoField='normalScale'/>
              <connect nodeField='baseColorTexture' protoField='baseColorTexture'/>
              <connect nodeField='metallicRoughnessTexture' protoField='metallicRoughnessTexture'/>
              <connect nodeField='emissiveTexture' protoField='emissiveTexture'/>
              <connect nodeField='occlusionTexture' protoField='occlusionTexture'/>
              <connect nodeField='normalTexture' protoField='normalTexture'/>
            </IS>
            <ShaderPart DEF='pbrMetallicRoughnessVertexShader'>
<![CDATA[data:x-shader/x-vertex,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

// BEGIN DEFINES
// END DEFINES

precision highp float;
precision highp int;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat3 x3d_NormalMatrix;

attribute vec4 x3d_Vertex;

#ifdef HAS_NORMALS
attribute vec3 x3d_Normal;
#endif

#ifdef HAS_TEXCOORDS
attribute vec4 x3d_TexCoord;
#endif

#ifdef HAS_TANGENTS
attribute vec4 tangent;
#endif

varying vec3 position;
varying vec2 texCoord;

#ifndef HAS_BASE_COLOR_MAP
#ifdef HAS_COLORS
attribute vec4 x3d_Color;
varying vec4 color;
#endif
#endif

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
varying mat3 TBN;
#else
varying vec3 normal;
#endif
#endif

void
main ()
{
	vec4 pos = x3d_ModelViewMatrix * x3d_Vertex;
 
	position = vec3 (pos .xyz) / pos .w;

	#ifdef HAS_NORMALS
		#ifdef HAS_TANGENTS
			vec3 normalW    = normalize (x3d_NormalMatrix * x3d_Normal);
			vec3 tangentW   = normalize (x3d_NormalMatrix * tangent .xyz);
			vec3 bitangentW = cross (normalW, tangentW) * tangent .w;

			TBN = mat3 (tangentW, bitangentW, normalW);
		#else // HAS_TANGENTS
			normal = normalize (x3d_NormalMatrix * x3d_Normal);
		#endif
	#endif

	#ifdef HAS_TEXCOORDS
		texCoord = vec2 (x3d_TexCoord .s, 1.0 - x3d_TexCoord .t);
	#else
		texCoord = vec2 (0.0, 0.0);
	#endif

	#ifndef HAS_BASE_COLOR_MAP
	#ifdef HAS_COLORS
		color = x3d_Color;;
	#endif
	#endif

	gl_Position = x3d_ProjectionMatrix * pos;
}
]]>
            </ShaderPart>
            <ShaderPart DEF='pbrMetallicRoughnessFragmentShader'
                type='FRAGMENT'>
<![CDATA[data:x-shader/x-fragment,

// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-

// BEGIN DEFINES
// END DEFINES

#extension GL_OES_standard_derivatives : enable

precision highp float;
precision highp int;

uniform x3d_LightSourceParameters x3d_LightSource [1];
uniform mat4 x3d_CameraSpaceMatrix;
#define lightDirection (-x3d_LightSource [0] .direction)
#define lightColor (x3d_LightSource [0] .color)

#ifdef USE_IBL
uniform samplerCube diffuseEnvironmentTexture;
uniform samplerCube specularEnvironmentTexture;
uniform sampler2D brdfLUT;
#endif

#ifdef HAS_BASE_COLOR_MAP
uniform sampler2D baseColorTexture;
#endif

#ifdef HAS_NORMAL_MAP
uniform sampler2D normalTexture;
uniform float normalScale;
#endif

#ifdef HAS_EMISSIVE_MAP
uniform sampler2D emissiveTexture;
uniform vec3 emissiveFactor;
#endif

#ifdef HAS_METAL_ROUGHNESS_MAP
uniform sampler2D metallicRoughnessTexture;
#endif

#ifdef HAS_OCCLUSION_MAP
uniform sampler2D occlusionTexture;
uniform float occlusionStrength;
#endif

uniform vec4 baseColorFactor;
uniform vec2 metallicRoughnessValues;

#define camera (vec3 (0.0))

varying vec3 position;
varying vec2 texCoord;

#ifndef HAS_BASE_COLOR_MAP
#ifdef HAS_COLORS
varying vec4 color;
#endif
#endif

#ifdef HAS_NORMALS
#ifdef HAS_TANGENTS
varying mat3 TBN;
#else
varying vec3 normal;
#endif
#endif

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
	float NdotL;                  // cos angle between normal and light direction
	float NdotV;                  // cos angle between normal and view direction
	float NdotH;                  // cos angle between normal and half vector
	float LdotH;                  // cos angle between light direction and half vector
	float VdotH;                  // cos angle between view direction and half vector
	float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
	float metalness;              // metallic value at the surface
	vec3 reflectance0;            // full reflectance color (normal incidence angle)
	vec3 reflectance90;           // reflectance color at grazing angle
	float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
	vec3 diffuseColor;            // color contribution from diffuse lighting
	vec3 specularColor;           // color contribution from specular lighting
};

const float M_PI           = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec4
SRGBtoLINEAR (vec4 srgbIn)
{
	#ifdef MANUAL_SRGB
		#ifdef SRGB_FAST_APPROXIMATION
			vec3 linOut = pow (srgbIn .xyz, vec3 (2.2));
		#else //SRGB_FAST_APPROXIMATION
			vec3 bLess  = step (vec3 (0.04045) ,srgbIn .xyz);
			vec3 linOut = mix (srgbIn .xyz / vec3 (12.92), pow ((srgbIn .xyz + vec3 (0.055)) / vec3 (1.055), vec3 (2.4)), bLess);
		#endif //SRGB_FAST_APPROXIMATION
		return vec4 (linOut, srgbIn .w);
	#else //MANUAL_SRGB
		return srgbIn;
	#endif //MANUAL_SRGB
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3
getNormal ()
{
	// Retrieve the tangent space matrix
	#ifndef HAS_TANGENTS
		vec3 pos_dx = dFdx (position);
		vec3 pos_dy = dFdy (position);
		vec3 tex_dx = dFdx (vec3 (texCoord, 0.0));
		vec3 tex_dy = dFdy (vec3 (texCoord, 0.0));
		vec3 t      = (tex_dy .t * pos_dx - tex_dx .t * pos_dy) / (tex_dx .s * tex_dy.t - tex_dy .s * tex_dx .t);

		#ifdef HAS_NORMALS
			vec3 ng = normalize (normal);
		#else
			vec3 ng = cross (pos_dx, pos_dy);
		#endif

		t = normalize (t - ng * dot (ng, t));
		
		vec3 b   = normalize (cross (ng, t));
		mat3 tbn = mat3 (t, b, ng);
	#else // HAS_TANGENTS
		mat3 tbn = TBN;
	#endif

	#ifdef HAS_NORMAL_MAP
		vec3 n = texture2D (normalTexture, texCoord) .rgb;
		
		n = normalize (tbn * ((n * 2.0 - 1.0) * vec3 (normalScale, normalScale, 1.0)));
	#else
		vec3 n = tbn [2] .xyz;
	#endif

	return n;
}

#ifdef USE_IBL
// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
vec3
getIBLContribution (PBRInfo pbrInputs, vec3 n, vec3 reflection)
{
	float mipCount = 9.0; // resolution of 512x512
	float lod      = pbrInputs .perceptualRoughness * mipCount;

	// retrieve a scale and bias to F0. See [1], Figure 3
	vec3 brdf         = SRGBtoLINEAR (texture2D (brdfLUT, vec2 (pbrInputs .NdotV, 1.0 - pbrInputs .perceptualRoughness))) .rgb;
	vec3 diffuseLight = SRGBtoLINEAR (textureCube (diffuseEnvironmentTexture, n)) .rgb;

	#ifdef USE_TEX_LOD
		vec3 specularLight = SRGBtoLINEAR (textureCubeLodEXT (specularEnvironmentTexture, reflection, lod)) .rgb;
	#else
		vec3 specularLight = SRGBtoLINEAR (textureCube (specularEnvironmentTexture, reflection)) .rgb;
	#endif

	vec3 diffuse  = diffuseLight * pbrInputs .diffuseColor;
	vec3 specular = specularLight * (pbrInputs .specularColor * brdf .x + brdf .y);

	return diffuse + specular;
}
#endif

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3
diffuse (PBRInfo pbrInputs)
{
	return pbrInputs .diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3
specularReflection (PBRInfo pbrInputs)
{
	return pbrInputs .reflectance0 + (pbrInputs .reflectance90 - pbrInputs .reflectance0) * pow (clamp (1.0 - pbrInputs .VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float
geometricOcclusion (PBRInfo pbrInputs)
{
	float NdotL = pbrInputs .NdotL;
	float NdotV = pbrInputs .NdotV;
	float r     = pbrInputs .alphaRoughness;

	float attenuationL = 2.0 * NdotL / (NdotL + sqrt (r * r + (1.0 - r * r) * (NdotL * NdotL)));
	float attenuationV = 2.0 * NdotV / (NdotV + sqrt (r * r + (1.0 - r * r) * (NdotV * NdotV)));
	
	return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float
microfacetDistribution (PBRInfo pbrInputs)
{
	float roughnessSq = pbrInputs .alphaRoughness * pbrInputs .alphaRoughness;
	float f           = (pbrInputs .NdotH * roughnessSq - pbrInputs .NdotH) * pbrInputs .NdotH + 1.0;
	
	return roughnessSq / (M_PI * f * f);
}

void
main ()
{
	// Metallic and Roughness material properties are packed together
	// In glTF, these factors can be specified by fixed scalar values
	// or from a metallic-roughness map
	float perceptualRoughness = metallicRoughnessValues .y;
	float metallic            = metallicRoughnessValues .x;
	
	#ifdef HAS_METAL_ROUGHNESS_MAP
		// Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.
		// This layout intentionally reserves the 'r' channel for (optional) occlusion map data
		vec4 mrSample = texture2D (metallicRoughnessTexture, texCoord);
		
		perceptualRoughness = mrSample .g * perceptualRoughness;
		metallic            = mrSample .b * metallic;
	#endif

	perceptualRoughness = clamp (perceptualRoughness, c_MinRoughness, 1.0);
	metallic            = clamp (metallic, 0.0, 1.0);
	// Roughness is authored as perceptual roughness; as is convention,
	// convert to material roughness by squaring the perceptual roughness [2].
	float alphaRoughness = perceptualRoughness * perceptualRoughness;

	// The albedo may be defined from a base texture or a flat color
	#ifdef HAS_BASE_COLOR_MAP
		vec4 baseColor = SRGBtoLINEAR (texture2D (baseColorTexture, texCoord)) * baseColorFactor;
	#else
		#ifdef HAS_COLORS
			vec4 baseColor = color * baseColorFactor;
		#else
			vec4 baseColor = baseColorFactor;
		#endif
	#endif

	vec3 f0           = vec3 (0.04);
	vec3 diffuseColor = baseColor .rgb * (vec3 (1.0) - f0);
	
	diffuseColor *= 1.0 - metallic;

	vec3 specularColor = mix (f0, baseColor .rgb, metallic);

	// Compute reflectance.
	float reflectance = max (max (specularColor .r, specularColor .g), specularColor .b);

	// For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
	// For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
	float reflectance90          = clamp (reflectance * 25.0, 0.0, 1.0);
	vec3  specularEnvironmentR0  = specularColor .rgb;
	vec3  specularEnvironmentR90 = vec3 (1.0, 1.0, 1.0) * reflectance90;

	vec3 n = getNormal ();                         // normal at surface point
	vec3 v = normalize (camera - position);        // Vector from surface point to camera
	vec3 l = normalize (lightDirection);           // Vector from surface point to light
	vec3 h = normalize (l + v);                    // Half vector between both l and v

	float NdotL = clamp (dot (n, l), 0.001, 1.0);
	float NdotV = abs (dot (n, v)) + 0.001;
	float NdotH = clamp (dot (n, h), 0.0, 1.0);
	float LdotH = clamp (dot (l, h), 0.0, 1.0);
	float VdotH = clamp (dot (v, h), 0.0, 1.0);

	PBRInfo pbrInputs = PBRInfo (
		NdotL,
		NdotV,
		NdotH,
		LdotH,
		VdotH,
		perceptualRoughness,
		metallic,
		specularEnvironmentR0,
		specularEnvironmentR90,
		alphaRoughness,
		diffuseColor,
		specularColor
	);

	// Calculate the shading terms for the microfacet specular shading model
	vec3  F = specularReflection (pbrInputs);
	float G = geometricOcclusion (pbrInputs);
	float D = microfacetDistribution (pbrInputs);

	// Calculation of analytical lighting contribution
	vec3 diffuseContrib = (1.0 - F) * diffuse (pbrInputs);
	vec3 specContrib    = F * G * D / (4.0 * NdotL * NdotV);
	vec3 finalColor     = NdotL * lightColor * (diffuseContrib + specContrib);

	// Calculate lighting contribution from image based lighting source (IBL)
	#ifdef USE_IBL
	vec3 reflection = -normalize (reflect (v, n));
	finalColor += getIBLContribution (pbrInputs, n, reflection);
	#endif

	// Apply optional PBR terms for additional (optional) shading
	#ifdef HAS_OCCLUSION_MAP
		float ao = texture2D (occlusionTexture, texCoord) .r;
		finalColor = mix (finalColor, finalColor * ao, occlusionStrength);
	#endif

	#ifdef HAS_EMISSIVE_MAP
		vec3 emissive = SRGBtoLINEAR (texture2D (emissiveTexture, texCoord)) .rgb * emissiveFactor;
		finalColor += emissive;
	#endif

	gl_FragColor = vec4 (pow (finalColor, vec3 (1.0 / 2.2)), baseColor .a);
}
]]>
            </ShaderPart>
          </ComposedShader>
        </Appearance>
        <Script DEF='pbrMetallicRoughnessScript'>
          <field accessType='inputOutput' type='MFString' name='defines'/>
          <field accessType='inputOutput' type='SFString' name='alphaMode'/>
          <field accessType='inputOutput' type='SFVec3f' name='baseColorFactor'/>
          <field accessType='inputOutput' type='SFFloat' name='alphaFactor'/>
          <field accessType='inputOutput' type='SFFloat' name='metallicFactor'/>
          <field accessType='inputOutput' type='SFFloat' name='roughnessFactor'/>
          <field accessType='inputOutput' type='SFNode' name='baseColorTexture'/>
          <field accessType='initializeOnly' type='SFNode' name='appearance'>
            <Appearance USE='_1'/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='material'>
            <Material/>
          </field>
          <field accessType='initializeOnly' type='SFNode' name='shader'>
            <ComposedShader USE='pbrShader'/>
          </field>
          <IS>
            <connect nodeField='defines' protoField='defines'/>
            <connect nodeField='alphaMode' protoField='alphaMode'/>
            <connect nodeField='baseColorFactor' protoField='baseColorFactor'/>
            <connect nodeField='alphaFactor' protoField='alphaFactor'/>
            <connect nodeField='metallicFactor' protoField='metallicFactor'/>
            <connect nodeField='roughnessFactor' protoField='roughnessFactor'/>
            <connect nodeField='baseColorTexture' protoField='baseColorTexture'/>
          </IS>
<![CDATA[ecmascript:

function initialize ()
{
	set_defines (defines, 0);
	set_alphaMode (alphaMode, 0);
	set_baseColorAlphaFactor ();
	set_metallicRoughnessValues ();
}

function set_defines (value, time)
{
	var DEFINES = new RegExp ("// BEGIN DEFINES\\n[\\s\\S]*?// END DEFINES\\n");

	var text = "";
	
	text += "// BEGIN DEFINES\n";

	for (var i = 0; i < defines .length; ++ i)
	{
		text += "#define " + defines [i] + "\n";
	}

	text += "// END DEFINES\n";

	for (var i = 0; i < shader .parts .length; ++ i)
	{
		var
			part = shader .parts [i],
			url  = part .url [0];

		part .url [0] = url .replace (DEFINES, text);
	}
}

function set_alphaMode ()
{
	switch (alphaMode)
	{
		case "MASK":
		case "BLEND":
		{
			appearance .material = material;
			appearance .texture  = baseColorTexture;
			break;
		}
		default:
		{
			appearance .material = null;
			appearance .texture  = null;
			break;
		}
	}
}

function set_baseColorFactor ()
{
	set_baseColorAlphaFactor ();
}

function set_alphaFactor ()
{
	set_baseColorAlphaFactor ();
}

function set_baseColorAlphaFactor ()
{
	shader .baseColorFactor .x = baseColorFactor .x;
	shader .baseColorFactor .y = baseColorFactor .y;
	shader .baseColorFactor .z = baseColorFactor .z;
	shader .baseColorFactor .w = alphaFactor;

	material .transparency = 1 - alphaFactor;
}

function set_metallicFactor ()
{
	set_metallicRoughnessValues ();
}

function set_roughnessFactor ()
{
	set_metallicRoughnessValues ();
}

function set_metallicRoughnessValues ()
{
	shader .metallicRoughnessValues .x = metallicFactor
	shader .metallicRoughnessValues .y = roughnessFactor;
}]]>
        </Script>
      </ProtoBody>
    </ProtoDeclare>
    <WorldInfo
        title='pbrAppearance'>
      <MetadataSet DEF='Titania'
          name='Titania'
          reference='http://titania.create3000.de'>
        <MetadataSet DEF='Selection' containerField='value'
            name='Selection'
            reference='http://titania.create3000.de'>
          <MetadataBoolean DEF='selectGeometry' containerField='value'
              name='selectGeometry'
              reference='http://titania.create3000.de'
              value='false'/>
          <MetadataSet DEF='nodes' containerField='value'
              name='nodes'
              reference='http://titania.create3000.de'>
            <!-- NULL -->
          </MetadataSet>
        </MetadataSet>
        <MetadataSet DEF='Page' containerField='value'
            name='Page'
            reference='http://titania.create3000.de'>
          <MetadataInteger DEF='activeView' containerField='value'
              name='activeView'
              reference='http://titania.create3000.de'
              value='1'/>
          <MetadataInteger DEF='multiView' containerField='value'
              name='multiView'
              reference='http://titania.create3000.de'
              value='0'/>
        </MetadataSet>
        <MetadataSet DEF='Prototype' containerField='value'
            name='Prototype'
            reference='http://titania.create3000.de'>
          <MetadataString DEF='path' containerField='value'
              name='path'
              reference='http://titania.create3000.de'
              value='"pbrMetallicRoughness"'/>
        </MetadataSet>
      </MetadataSet>
    </WorldInfo>
  </Scene>
</X3D>
