#X3D V3.3 utf8 Titania V0.6.7

META "generator" "Titania V0.6.7, http://titania.create3000.de"

PROTO DiskSensor [
  inputOutput SFBool     enabled TRUE
  inputOutput SFString   description ""
  inputOutput SFRotation axisRotation 0 0 1 0
  inputOutput SFFloat    factor 0.159155
  inputOutput SFFloat    minValue 0
  inputOutput SFFloat    maxValue -1
  inputOutput SFFloat    offset 0
  inputOutput SFBool     autoOffset TRUE
  outputOnly  SFBool     isActive
  outputOnly  SFBool     isOver
  outputOnly  SFVec3f    trackPoint_changed
  outputOnly  SFRotation rotation_changed
  outputOnly  SFFloat    value_changed
]
{
  DEF CylinderTouch CylinderSensor {
    enabled IS enabled
    description IS description
    axisRotation IS axisRotation
    diskAngle 1.5708
    autoOffset IS autoOffset
    trackPoint_changed IS trackPoint_changed
    isOver IS isOver
    isActive IS isActive
  }

  DEF DiskSensorScript Script {
    inputOnly      SFRotation set_rotation
    inputOnly      SFBool     set_active
    inputOutput    SFFloat    factor IS factor
    inputOutput    SFFloat    minValue IS minValue
    inputOutput    SFFloat    maxValue IS maxValue
    inputOutput    SFFloat    offset IS offset
    outputOnly     SFRotation rotation_changed IS rotation_changed
    outputOnly     SFFloat    value_changed IS value_changed
    initializeOnly SFVec3f    startVector 0 0 1
    initializeOnly SFFloat    value 0
    initializeOnly SFNode     sensor USE CylinderTouch

    url "ecmascript:

function initialize ()
{
	set_offset ();
}

function set_factor ()
{
	set_offset ();
}

function set_offset ()
{
	value          = offset;
	sensor .offset = offset / factor;
}

function set_rotation (rotation)
{
	var endVector     = rotation .multVec (sensor .axisRotation .multVec (new SFVec3f (0, 0, 1)));
	var deltaRotation = new SFRotation (startVector, endVector);

	startVector = endVector;

	var axis  = sensor .axisRotation .multVec (new SFVec3f (0, 1, 0));
	var angle = axis .dot (deltaRotation .getAxis ());
	var sign  = angle > 0 ? 1 : -1;

	value += sign * deltaRotation .angle * factor;

	if (minValue > maxValue || (value > minValue && value < maxValue))
	{
		rotation_changed = rotation_changed .multiply (deltaRotation);
		value_changed    = value;
	}
	else
	{
		value = Math .max (minValue, Math .min (maxValue, value));

		if (value != value_changed)
		{
			var axis = sensor .axisRotation .multVec (new SFVec3f (0, 1, 0));
			
			rotation_changed = new SFRotation (axis, -value / factor);
			value_changed    = value;
		}
	}
}

function set_active (active)
{
	if (active)
	{
		var axis = sensor .axisRotation .multVec (new SFVec3f (0, 1, 0));

		rotation_changed = new SFRotation (axis, sensor .offset);
		startVector      = rotation_changed .multVec (sensor .axisRotation .multVec (new SFVec3f (0, 0, 1)));
		value            = offset;
	}
	else
	{
		if (sensor .autoOffset)
			offset = value;
	}
}
"
    directOutput TRUE
  }

  ROUTE CylinderTouch.rotation_changed TO DiskSensorScript.set_rotation
  ROUTE CylinderTouch.isActive TO DiskSensorScript.set_active
}

