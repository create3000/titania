<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE X3D PUBLIC "ISO//Web3D//DTD X3D 3.3//EN" "http://www.web3d.org/specifications/x3d-3.3.dtd">
<X3D profile='Full' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
  <head>
    <meta name='comment' content='World of Titania'/>
    <meta name='created' content='Sun, 20 Sep 2015 06:48:36 GMT'/>
    <meta name='creator' content='Holger Seelig'/>
    <meta name='generator' content='Titania V1.1.0, http://titania.create3000.de'/>
    <meta name='modified' content='Sun, 20 Sep 2015 06:48:36 GMT'/>
  </head>
  <Scene>
    <ProtoDeclare name='RoundedRectangle2D'>
      <ProtoInterface>
        <field accessType='inputOutput' type='SFFloat' name='cornerRadius' value='1'/>
        <field accessType='inputOutput' type='SFVec2f' name='size' value='2 2'/>
        <field accessType='initializeOnly' type='SFBool' name='solid' value='true'/>
      </ProtoInterface>
      <ProtoBody>
        <IndexedFaceSet DEF='Geometry'>
          <IS>
            <connect nodeField='solid' protoField='solid'/>
          </IS>
          <Coordinate/>
        </IndexedFaceSet>
        <Script DEF='RoundedRectangle2D'
            directOutput='true'>
          <field accessType='inputOutput' type='SFFloat' name='cornerRadius'/>
          <field accessType='inputOutput' type='SFVec2f' name='size'/>
          <field accessType='initializeOnly' type='SFFloat' name='cornerDimension' value='10'/>
          <field accessType='initializeOnly' type='SFNode' name='geometry'>
            <IndexedFaceSet USE='Geometry'/>
          </field>
          <IS>
            <connect nodeField='cornerRadius' protoField='cornerRadius'/>
            <connect nodeField='size' protoField='size'/>
          </IS>
<![CDATA[ecmascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var radius = Math .min (Math .min (cornerRadius, size .x / 2), size .y / 2);

	var point         = new SFVec3f (radius, 0, 0);
	var startRotation = new SFRotation (0, 0, 1, 0);
	var endRotation   = new SFRotation (0, 0, 1, Math .PI / 2);
	var corner        = new MFVec3f ();
	var coordIndex    = new MFInt32 ();
	var points        = new MFVec3f ();

	for (var i = 0; i < cornerDimension * 4; ++ i)
		coordIndex [coordIndex .length] = i;

	for (var i = 0; i < cornerDimension; ++i)
		corner [i] = startRotation .slerp (endRotation, i / (cornerDimension - 1)) .multVec (point);
	
	var translation = new SFVec3f (size .x / 2 - radius, size .y / 2 - radius, 0);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = corner [i] .add (translation);

	var translation = new SFVec3f (-size .x / 2 + radius, size .y / 2 - radius, 0);
	var rotation    = new SFRotation (0, 0, 1, Math .PI * 0.5);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = rotation .multVec (corner [i]) .add (translation);

	var translation = new SFVec3f (-size .x / 2 + radius, -size .y / 2 + radius, 0);
	var rotation    = new SFRotation (0, 0, 1, Math .PI);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = rotation .multVec (corner [i]) .add (translation);

	var translation = new SFVec3f (size .x / 2 - radius, -size .y / 2 + radius, 0);
	var rotation    = new SFRotation (0, 0, 1, Math .PI * 1.5);

	for (var i = 0; i < cornerDimension; ++ i)
		points [points .length] = rotation .multVec (corner [i]) .add (translation);

	geometry .coord .point = points;	
	geometry .coordIndex   = coordIndex;
}
]]> 
        </Script>
      </ProtoBody>
    </ProtoDeclare>
  </Scene>
</X3D>
