#X3D V3.3 utf8 Titania V1.2.2

UNIT angle degree 0.0174532925199433

META "comment" "World of Titania"
META "created" "Sat, 16 Jan 2016 04:11:57 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V1.2.2, http://titania.create3000.de"
META "modified" "Sun, 17 Jan 2016 04:00:55 GMT"

PROTO DoubleClick [
  inputOnly   SFTime set_time
  inputOutput SFTime doubleClickInterval 0.5
  outputOnly  SFTime doubleClickTime
]
{
  DEF DoubleClick Script {
    inputOnly   SFTime set_time IS set_time
    inputOutput SFTime doubleClickInterval IS doubleClickInterval
    outputOnly  SFTime doubleClickTime IS doubleClickTime

    url "peaseblossom:

var firstTime = 0;

function set_time (value, time)
{
	if (firstTime == 0)
		firstTime = time;
	
	else if (time - firstTime < doubleClickInterval)
	{
		firstTime = 0;
		doubleClickTime = time;
	}
	else
		firstTime = time;
}
"
  }
}

PROTO Arrow [
  inputOutput SFBool  active FALSE
  inputOutput SFColor color 1 1 1
  inputOutput SFVec3f position 0.0153129 0 0
  outputOnly  SFTime  doubleClickTime
  outputOnly  SFTime  touchTime
]
{
  Group {
    children [
      DEF _1 Transform {
        translation IS position
        children DEF TriangleSet2D Transform {
          translation -0.5 0 0
          children ScreenGroup {
            children Transform {
              translation 0 8 0
              rotation 0 0 1 3.14159
              scale 8 8 8
              children [
                Shape {
                  appearance Appearance {
                    material Material {
                      diffuseColor 0 0 0
                      emissiveColor IS color
                    }
                  }
                  geometry TriangleSet2D {
                    vertices [
                      0 1,
                      -0.866025 -0.5,
                      0.866025 -0.5
                    ]
                  }
                }
                DEF _2 Switch {
                  #file:///home/holger/Projekte/Titania/Titania/share/titania/ui/Editors/BackgroundEditor.x3dv
                  children Shape {
                    appearance Appearance {
                      fillProperties FillProperties {
                        filled FALSE
                        hatched FALSE
                      }
                      lineProperties LineProperties {
                        linewidthScaleFactor 2
                      }
                      material Material {
                        diffuseColor 0 0 0
                      }
                    }
                    geometry TriangleSet2D {
                      vertices [
                        0 1,
                        -0.866025 -0.5,
                        0.866025 -0.5
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      }
      DEF _3 TouchSensor {
        touchTime IS touchTime
      }
      DEF _4 PlaneSensor {
        offset IS position
        maxPosition 1 0
      }
    ]
  }

  DEF _5 DoubleClick {
    doubleClickTime IS doubleClickTime
  }

  DEF _6 BooleanToggle {
    toggle IS active
  }

  DEF _7 BooleanFilter { }

  DEF _8 IntegerTrigger {
    integerKey -1
  }

  DEF _9 IntegerTrigger { }

  ROUTE _4.translation_changed TO _1.set_translation
  ROUTE _3.touchTime TO _5.set_time
  ROUTE _6.toggle_changed TO _7.set_boolean
  ROUTE _7.inputFalse TO _8.set_boolean
  ROUTE _8.triggerValue TO _2.set_whichChoice
  ROUTE _7.inputTrue TO _9.set_boolean
  ROUTE _9.triggerValue TO _2.set_whichChoice
}

PROTO Gradient [
  inputOutput MFFloat position [
    0,
    1
  ]
  inputOutput MFColor color [
    0 0 0,
    1 1 1
  ]
]
{
  Shape {
    appearance Appearance {
      material Material { }
    }
    geometry DEF _10 IndexedQuadSet {
      index [
        0,
        2,
        3,
        1,
        2,
        4,
        5,
        3
      ]
      color Color {
        color [
          0 0 0,
          0 0 0,
          1 1 1,
          1 1 1,
          0 0 0,
          0 0 0
        ]
      }
      coord Coordinate {
        point [
          0 -1 0,
          0 1 0,
          1 -1 0,
          1 1 0,
          1 0 0,
          1 1 0
        ]
      }
    }
  }

  DEF GradientScript Script {
    inputOutput    MFFloat position IS position
    inputOutput    MFColor color IS color
    initializeOnly SFNode  geometry USE _10

    url "ecmascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var
		c = [ ],
		p = [ ];


	if (position .length)
	{
		for (var i = 0, length = position .length; i < length; ++ i)
		{
			p .push (position [i]);
			c .push (color [i]);
		}
	
		if (position [0] > 0)
		{
			c .unshift (c [0]);
			p .unshift (0);
		}

		if (position [position .length - 1] < 1)
		{
			c .push (c [c .length - 1]);
			p .push (1);
		}
	}
	else
	{
		c .push (new SFColor ());
		c .push (new SFColor (1, 1, 1));
		p .push (0);
		p .push (1);
	}

	for (var i = 0, length = p .length; i < length; ++ i)
	{
		geometry .color .color [i * 2]     = c [i];
		geometry .color .color [i * 2 + 1] = c [i];
	}

	var point = geometry .coord .point;
	
	for (var i = 0, length = p .length; i < length; ++ i)
	{
		var x = p [i];

		point [i * 2]     = new SFVec3f (x, -1, 0);
		point [i * 2 + 1] = new SFVec3f (x,  1, 0);
	}
	
	var index = new MFInt32 ();
	
	for (var i = 0, length = p .length; i < length; ++ i)
	{
		index [i * 4]     = i * 2;
		index [i * 4 + 1] = i * 2 + 2;
		index [i * 4 + 2] = i * 2 + 3;
		index [i * 4 + 3] = i * 2 + 1;
	}
	
	geometry .index = index;
}
"
  }
}

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF NavigationInfo MetadataSet {
        name "NavigationInfo"
        reference "http://titania.create3000.de"
        value DEF type MetadataString {
          name "type"
          reference "http://titania.create3000.de"
          value "NONE"
        }
      }
      DEF Viewpoint MetadataSet {
        name "Viewpoint"
        reference "http://titania.create3000.de"
        value [
          DEF position MetadataDouble {
            name "position"
            reference "http://titania.create3000.de"
            value [
              0,
              0,
              10
            ]
          }
          DEF orientation MetadataDouble {
            name "orientation"
            reference "http://titania.create3000.de"
            value [
              0,
              0,
              1,
              0
            ]
          }
          DEF centerOfRotation MetadataDouble {
            name "centerOfRotation"
            reference "http://titania.create3000.de"
            value [
              0,
              0,
              0
            ]
          }
        ]
      }
      DEF LayerSet MetadataSet {
        name "LayerSet"
        reference "http://titania.create3000.de"
        value DEF activeLayer MetadataInteger {
          name "activeLayer"
          reference "http://titania.create3000.de"
          value -1
        }
      }
    ]
  }
}

LayerSet {
  activeLayer -1
  order 1
  layers DEF HUD LayoutLayer {
    metadata DEF Titania_1 MetadataSet {
      name "Titania"
      reference "http://titania.create3000.de"
      value [
        DEF AngleGrid MetadataSet {
          name "AngleGrid"
          reference "http://titania.create3000.de"
          value [
            DEF enabled MetadataBoolean {
              name "enabled"
              reference "http://titania.create3000.de"
              value FALSE
            }
            DEF rotation MetadataFloat {
              name "rotation"
              reference "http://titania.create3000.de"
              value [
                1,
                0,
                0,
                1.5708
              ]
            }
            DEF scale MetadataFloat {
              name "scale"
              reference "http://titania.create3000.de"
              value [
                0.1,
                0.1,
                0.1
              ]
            }
          ]
        }
        DEF Grid MetadataSet {
          name "Grid"
          reference "http://titania.create3000.de"
          value [
            DEF enabled_1 MetadataBoolean {
              name "enabled"
              reference "http://titania.create3000.de"
              value TRUE
            }
            DEF rotation_1 MetadataFloat {
              name "rotation"
              reference "http://titania.create3000.de"
              value [
                1,
                0,
                0,
                1.5708
              ]
            }
            DEF scale_1 MetadataFloat {
              name "scale"
              reference "http://titania.create3000.de"
              value [
                0.25,
                0.25,
                0.25
              ]
            }
            DEF dimension MetadataInteger {
              name "dimension"
              reference "http://titania.create3000.de"
              value [
                4,
                10,
                4
              ]
            }
            DEF snapDistance MetadataDouble {
              name "snapDistance"
              reference "http://titania.create3000.de"
              value 0.6
            }
          ]
        }
      ]
    }
    layout Layout { }
    viewport Viewport { }
    children [
      DEF Colors Group {
        children [
          DEF _11 Arrow {
            color 0.862188 0.702531 0.267938
            position 0.336562 0 0
          }
          DEF _12 Arrow {
            color 0.472521 0.694605 0.629244
            position 0.731158 0 0
          }
          DEF _13 Arrow {
            color 0.529893 0.132893 0.912987
            position 0.847208 0 0
          }
          DEF _14 Arrow {
            active TRUE
            color 0.260084 0.0188011 0.067607
            position 0.5374 0 0
          }
          DEF _15 Arrow {
            color 0.643032 0.378889 0.422449
            position 0.151379 0 0
          }
        ]
      }
      Transform {
        translation -0.5 -0.25 0
        scale 1 0.25 1
        children [
          DEF _16 Gradient {
            position [
              0.151379,
              0.336562,
              0.5374,
              0.731158,
              0.847208
            ]
            color [
              0.643032 0.378889 0.422449,
              0.862188 0.702531 0.267938,
              0.260084 0.0188011 0.067607,
              0.472521 0.694605 0.629244,
              0.529893 0.132893 0.912987
            ]
          }
          DEF _17 TouchSensor { }
          DEF _18 DoubleClick { }
        ]
      }
      DEF GradientEditorScript Script {
        inputOnly      SFTime  set_touchTime
        inputOnly      SFTime  add
        inputOnly      SFTime  remove
        inputOnly      SFVec3f set_translation
        inputOnly      MFNode  set_children
        inputOutput    MFFloat position [
          0.151379,
          0.336562,
          0.5374,
          0.731158,
          0.847208
        ]
        inputOutput    MFColor color [
          0.643032 0.378889 0.422449,
          0.862188 0.702531 0.267938,
          0.260084 0.0188011 0.067607,
          0.472521 0.694605 0.629244,
          0.529893 0.132893 0.912987
        ]
        outputOnly     SFInt32 active_changed
        initializeOnly SFNode  arrows USE Colors
        initializeOnly SFNode  gradientTouch USE _17

        url "ecmascript:

function set_touchTime (value)
{
	for (var i = 0; i < arrows .children .length; ++ i)
	{
		arrows .children [i] .active = false;
	}
	
	for (var i = 0; i < arrows .children .length; ++ i)
	{
		if (value == arrows .children [i] .touchTime)
			break;
	}

	if (i < arrows .children .length)
	{
		arrows .children [i] .active = true;
	}
}

function add (value)
{
	var
		value  = gradientTouch .hitPoint_changed .x,
		index1 = lowerBound (position, 0, position .length, value, less),
		index0 = index1 - 1;
	
	
	if (index1 < position .length)
	{
		if (index0 < 0)
		{
			add_color (index1, value, color [index1]);
		}
		else
		{
			var
				color0 = color [index0],
				color1 = color [index1],
				t      = (value - position [index0]) / (position [index1] - position [index0]);
				
			add_color (index0, value, color0 .lerp (color1, t));
		}
	}
	else
	{
		if (position .length)
		{
			add_color (index0, value, color [index0]);
		}
		else
		{
			add_color (0, value, new SFColor (1, 1, 1));
		}
	}
}

function add_color (index, value, color)
{
	print (index, \" : \", value, \" : \", color);
	
	set_touchTime (-1);
	
	// Create arrow
	
	var arrow = Browser .currentScene .createProto (\"Arrow\");
	
	arrow .color       = color;
	arrow .color       = new SFColor (Math .random (), Math .random (), Math .random ());
	arrow .position .x = value;
	
	arrows .addChildren = new MFNode (arrow);
	
	// Add routes
	
	var self = Browser .currentScene .getNamedNode (\"GradientEditorScript\");
	

	Browser .addRoute (arrow, \"touchTime\",       self, \"set_touchTime\");
	Browser .addRoute (arrow, \"doubleClickTime\", self, \"remove\");
	Browser .addRoute (arrow, \"position\",        self, \"set_translation\");
}

function remove (value)
{
	for (var i = 0; i < arrows .children .length; ++ i)
	{
		if (value == arrows .children [i] .doubleClickTime)
			break;
	}

	if (i < arrows .children .length)
	{
		arrows .removeChildren = new MFNode (arrows .children [i]);
	}
}

function set_children ()
{
	set_translation ();
}

function set_translation ()
{
	var arrows = get_arrows ();

	for (var i = 0; i < arrows .length; ++ i)
	{
		position [i] = arrows [i] .position .x;
		color [i]    = arrows [i] .color;
	}

	position .length = arrows .length;
	color    .length = arrows .length;
}

function get_arrows ()
{
	var a = [ ];

	for (var i = 0; i < arrows .children .length; ++ i)
		a .push (arrows .children [i]);

	return a .sort (compare);
}

function less (lhs, rhs)
{
	return lhs < rhs;
}

function compare (lhs, rhs)
{
	if (lhs .position .x < rhs .position .x)
		return -1;
		
	if (lhs .position .x > rhs .position .x)
		return 1;

	return 0;
}

function lowerBound (array, first, last, value, comp)
{
   // http://en.cppreference.com/w/cpp/algorithm/lower_bound

	var
		index = 0,
		step  = 0,
		count = last - first;

	while (count > 0)
	{
		step  = count >>> 1;
		index = first + step;

		if (comp (array [index], value))
		{
			first  = ++ index;
			count -= step + 1;
		}
		else
			count = step;
	}

	return first;
}
"
      }
    ]
  }
}

ROUTE GradientEditorScript.position_changed TO _16.set_position
ROUTE GradientEditorScript.color_changed TO _16.set_color
ROUTE _17.touchTime TO _18.set_time
ROUTE _18.doubleClickTime TO GradientEditorScript.add
ROUTE Colors.children_changed TO GradientEditorScript.set_children
ROUTE _11.touchTime TO GradientEditorScript.set_touchTime
ROUTE _11.doubleClickTime TO GradientEditorScript.remove
ROUTE _11.position_changed TO GradientEditorScript.set_translation
ROUTE _12.touchTime TO GradientEditorScript.set_touchTime
ROUTE _12.doubleClickTime TO GradientEditorScript.remove
ROUTE _12.position_changed TO GradientEditorScript.set_translation
ROUTE _13.touchTime TO GradientEditorScript.set_touchTime
ROUTE _13.doubleClickTime TO GradientEditorScript.remove
ROUTE _13.position_changed TO GradientEditorScript.set_translation
ROUTE _14.touchTime TO GradientEditorScript.set_touchTime
ROUTE _14.doubleClickTime TO GradientEditorScript.remove
ROUTE _14.position_changed TO GradientEditorScript.set_translation
ROUTE _15.touchTime TO GradientEditorScript.set_touchTime
ROUTE _15.doubleClickTime TO GradientEditorScript.remove
ROUTE _15.position_changed TO GradientEditorScript.set_translation
