#X3D V3.3 utf8 Titania V4.3.8

PROFILE Full

UNIT angle degree 0.0174532925199433

META "comment" "World of Titania"
META "created" "Sat, 16 Jan 2016 04:11:57 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V4.3.8, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/Titania/share/titania/ui/Editors/GradientTool.x3dv"
META "modified" "Mon, 07 Jan 2019 02:04:28 GMT"

PROTO DoubleClick [
  inputOnly   SFTime set_time
  inputOutput SFTime doubleClickInterval 0.5
  outputOnly  SFTime doubleClickTime
]
{
  DEF DoubleClick Script {
    inputOnly   SFTime set_time IS set_time
    inputOutput SFTime doubleClickInterval IS doubleClickInterval
    outputOnly  SFTime doubleClickTime IS doubleClickTime

    url "ecmascript:

var firstTime = 0;

function set_time (value, time)
{
	if (firstTime == 0)
		firstTime = time;
	
	else if (time - firstTime < doubleClickInterval)
	{
		firstTime = 0;
		doubleClickTime = time;
	}
	else
		firstTime = time;
}
"
  }
}

PROTO Arrow [
  inputOutput SFBool  enabled TRUE
  inputOutput SFBool  active FALSE
  inputOutput SFColor color 1 1 1
  inputOutput SFFloat transparency 0
  inputOutput SFVec3f offset 0.0153129 0 0
  outputOnly  SFVec3f translation_changed
  outputOnly  SFBool  isActive
  outputOnly  SFTime  doubleClickTime
  outputOnly  SFTime  touchTime
]
{
  Group {
    children [
      DEF _1 Transform {
        translation IS offset
        children DEF TriangleSet2D Transform {
          translation -0.5 0 0
          children ScreenGroup {
            children Transform {
              translation 0 8 0
              rotation 0 0 1 179.999847960504
              scale 8 8 8
              children [
                Shape {
                  appearance Appearance {
                    material Material {
                      diffuseColor 0 0 0
                      emissiveColor IS color
                      transparency IS transparency
                    }
                  }
                  geometry TriangleSet2D {
                    vertices [
                      0 1,
                      -0.866025 -0.5,
                      0.866025 -0.5
                    ]
                  }
                }
                DEF _2 Switch {
                  #file:///home/holger/Projekte/Titania/Titania/share/titania/ui/Editors/BackgroundEditor.x3dv
                  children [
                    Shape {
                      appearance Appearance {
                        fillProperties DEF _3 FillProperties {
                          filled FALSE
                          hatched FALSE
                        }
                        lineProperties LineProperties {
                          linewidthScaleFactor 1
                        }
                        material Material {
                          diffuseColor 0 0 0
                          emissiveColor 1 1 1
                        }
                      }
                      geometry DEF _4 TriangleSet2D {
                        vertices [
                          0 1,
                          -0.866025 -0.5,
                          0.866025 -0.5
                        ]
                      }
                    }
                    Shape {
                      appearance Appearance {
                        fillProperties USE _3
                        lineProperties LineProperties {
                          linewidthScaleFactor 2
                        }
                        material Material {
                          diffuseColor 0 0 0
                        }
                      }
                      geometry USE _4
                    }
                  ]
                }
              ]
            }
          }
        }
      }
      DEF _5 TouchSensor {
        isActive IS isActive
        touchTime IS touchTime
      }
      DEF _6 PlaneSensor {
        enabled IS enabled
        offset IS offset
        maxPosition 1 0
        translation_changed IS translation_changed
      }
    ]
  }

  DEF _7 DoubleClick {
    doubleClickTime IS doubleClickTime
  }

  DEF _8 BooleanToggle {
    toggle IS active
  }

  DEF _9 BooleanFilter { }

  DEF _10 IntegerTrigger {
    integerKey 0
  }

  DEF _11 IntegerTrigger {
    integerKey 1
  }

  ROUTE _6.translation_changed TO _1.set_translation
  ROUTE _5.touchTime TO _7.set_time
  ROUTE _8.toggle_changed TO _9.set_boolean
  ROUTE _9.inputFalse TO _10.set_boolean
  ROUTE _10.triggerValue TO _2.set_whichChoice
  ROUTE _9.inputTrue TO _11.set_boolean
  ROUTE _11.triggerValue TO _2.set_whichChoice
  ROUTE _6.translation_changed TO _6.set_offset
}

PROTO Gradient [
  inputOutput MFFloat     position [
    0,
    1
  ]
  inputOutput MFColorRGBA color [
    0 0 0 1,
    1 1 1 1
  ]
]
{
  Shape {
    appearance Appearance {
      material Material { }
    }
    geometry DEF _12 IndexedQuadSet {
      index [
        0,
        2,
        3,
        1,
        2,
        4,
        5,
        3
      ]
      color ColorRGBA {
        color [
          0 0 0 1,
          0 0 0 1,
          1 1 1 1,
          1 1 1 1
        ]
      }
      coord Coordinate {
        point [
          0 -1 0,
          0 1 0,
          1 -1 0,
          1 1 0
        ]
      }
    }
  }

  DEF GradientScript Script {
    inputOutput    MFFloat     position IS position
    inputOutput    MFColorRGBA color IS color
    initializeOnly SFNode      geometry USE _12

    url "ecmascript:

function initialize ()
{
	eventsProcessed ();
}

function eventsProcessed ()
{
	var
		c = [ ],
		p = [ ];

	if (position .length)
	{
		for (var i = 0, length = position .length; i < length; ++ i)
		{
			c .push (color [i]);
			p .push (position [i]);
		}
	
		if (position [0] > 0)
		{
			c .unshift (c [0]);
			p .unshift (0);
		}

		if (position [position .length - 1] < 1)
		{
			c .push (c [c .length - 1]);
			p .push (1);
		}
	}
	else
	{
		c .push (new SFColorRGBA (1, 1, 1, 1));
		c .push (new SFColorRGBA (0, 0, 0, 1));
		p .push (0);
		p .push (1);
	}

	// color

	for (var i = 0, length = c .length; i < length; ++ i)
	{
		geometry .color .color [i * 2]     = c [i];
		geometry .color .color [i * 2 + 1] = c [i];
	}
	
	geometry .color .color .length = length * 2;

	// point

	var point = geometry .coord .point;
	
	for (var i = 0, length = p .length; i < length; ++ i)
	{
		var x = p [i];

		point [i * 2]     = new SFVec3f (x, -1, 0);
		point [i * 2 + 1] = new SFVec3f (x,  1, 0);
	}
	
	point .length = length * 2;
	
	// index
	
	var index = new MFInt32 ();
	
	for (var i = 0, length = p .length; i < length; ++ i)
	{
		index [i * 4]     = i * 2;
		index [i * 4 + 1] = i * 2 + 2;
		index [i * 4 + 2] = i * 2 + 3;
		index [i * 4 + 3] = i * 2 + 1;
	}
	
	geometry .index = index;
}
"
    directOutput TRUE
  }
}

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF Page MetadataSet {
        name "Page"
        reference "http://titania.create3000.de"
        value [
          DEF activeView MetadataInteger {
            name "activeView"
            reference "http://titania.create3000.de"
            value 1
          }
          DEF multiView MetadataInteger {
            name "multiView"
            reference "http://titania.create3000.de"
            value 0
          }
        ]
      }
      DEF Selection MetadataSet {
        name "Selection"
        reference "http://titania.create3000.de"
        value [
          DEF selectGeometry MetadataBoolean {
            name "selectGeometry"
            reference "http://titania.create3000.de"
            value FALSE
          }
          DEF nodes MetadataSet {
            name "nodes"
            reference "http://titania.create3000.de"
            value NULL
          }
        ]
      }
    ]
  }
}

LayerSet {
  activeLayer -1
  order [
    1,
    2
  ]
  layers [
    DEF Gradient LayoutLayer {
      layout Layout {
        align [
          "CENTER",
          "BOTTOM"
        ]
        offsetUnits [
          "FRACTION",
          "PIXEL"
        ]
        offset [
          0,
          -16
        ]
        sizeUnits [
          "FRACTION",
          "FRACTION"
        ]
        scaleMode [
          "FRACTION",
          "FRACTION"
        ]
      }
      viewport Viewport { }
      children [
        DEF Gradient_13 Transform {
          translation -0.5 0 0
          scale 1 0.5 1
          children [
            DEF _14 Gradient {
              position [
                0.147972,
                0.850492
              ]
              color [
                0.643032 0.378889 0.422449 0.844259,
                0 0 0 0
              ]
            }
            DEF _15 TouchSensor { }
            DEF _16 DoubleClick { }
          ]
        }
        DEF GradientEditorScript Script {
          inputOnly      MFFloat     inputPosition
          inputOnly      MFColorRGBA inputColor
          inputOnly      SFInt32     inputWhichChoice
          inputOnly      SFBool      set_active
          inputOnly      SFVec3f     set_translation
          inputOutput    SFBool      enableFirst TRUE
          inputOutput    SFTime      addTime 0
          inputOutput    SFTime      removeTime 0
          inputOutput    MFFloat     position [
            0.147972,
            0.850492
          ]
          inputOutput    MFColorRGBA color [
            0.643032 0.378889 0.422449 1,
            0.844259 0.651834 0.281599 1
          ]
          outputOnly     SFBool      isActive
          outputOnly     SFInt32     outputWhichChoice
          outputOnly     MFFloat     outputPosition
          outputOnly     MFColorRGBA outputColor
          outputOnly     SFTime      outputAddTime
          outputOnly     SFTime      outputRemoveTime
          initializeOnly SFInt32     whichChoice 0
          initializeOnly SFNode      arrows DEF Colors Group {
            children [
              DEF _17 Arrow {
                color 0.844259 0.651834 0.281599
              }
              DEF _18 Arrow {
                color 0.643032 0.378889 0.422449
              }
            ]
          }
          initializeOnly SFNode      gradientTouch USE _15

          url "ecmascript:

function set_enableFirst (value)
{
	if (arrows .children .length)
		arrows .children [0] .enabled = value;
}

function inputPosition (value)
{
	set_values (value, color)
}

function inputColor (value)
{
	set_values (position, value)
}

function set_values (p, c)
{
	position = p;
	color    = c;
	
	arrows .children .length = 0;
	
	for (var i = 0, length = position .length; i < length; ++ i)
		add_color (i, position [i], color [i])

	if (length == 0)
		whichChoice = 0;
		
	else if (whichChoice >= length)
		whichChoice = length - 1;

	set_enableFirst (enableFirst);
	set_inputWhichChoice (whichChoice);
}

function set_inputWhichChoice (value)
{
	whichChoice = value;

	var arrows = get_arrows ();

	for (var i = 0; i < arrows .length; ++ i)
	{
		arrows [i] .active = false;
	}

	if (whichChoice >= 0 && arrows .length)
		arrows [Math .min (whichChoice, arrows .length - 1)] .active = true;
}

function set_active (value)
{
	//print (\"active: \", value);

	isActive = value;
	
	if (value)
	{
		var arrows = get_arrows ();

		for (var i = 0; i < arrows .length; ++ i)
		{
			arrows [i] .active = false;
		}
	
		for (var i = 0; i < arrows .length; ++ i)
		{
			if (arrows [i] .isActive)
				break;
		}

		if (i < arrows .length)
		{
			arrows [i] .active = true;
			
			//if (i !== outputWhichChoice)
			//{
				whichChoice       = i;
				outputWhichChoice = i;
			//}
		}
	}
}

function set_addTime (value, time)
{
	var
		value  = gradientTouch .hitPoint_changed .x,
		index1 = lowerBound (position, 0, position .length, value, less),
		index0 = index1 - 1;
	
	if (index1 < position .length)
	{
		if (index0 < 0)
		{
			add_color (index1, value, color [index1]);
		}
		else
		{
			var
				color0 = color [index0],
				color1 = color [index1],
				t      = (value - position [index0]) / (position [index1] - position [index0]);
				
			var col = new SFColorRGBA (lerp (color0 .r, color1 .r, t),
			                           lerp (color0 .g, color1 .g, t),
			                           lerp (color0 .b, color1 .b, t),
			                           lerp (color0 .a, color1 .a, t));
			
			add_color (index0, value, col);
		}
	}
	else
	{
		if (position .length)
		{
			add_color (index0, value, color [index0]);
		}
		else
		{
			add_color (0, value, new SFColorRGBA (1, 1, 1, 1));
		}
	}

	updateFields ();
	
	// set_translation is later called
	
	// select added arrow
	{
		arrows .children [arrows .children .length - 1] .active = true;

		whichChoice       = index1;
		outputWhichChoice = index1;
	}

	outputAddTime = time;
}

function lerp (source, destination, t)
{
	return source + t * (destination - source);
}

function add_color (index, value, color)
{
	//print (index, \" : \", value, \" : \", color);
	
	// Create arrow
	
	var arrow = Browser .currentScene .createProto (\"Arrow\");
	
	arrow .color        = new SFColor (color .r, color .g, color .b);
	arrow .transparency = 1 - color .a;
	arrow .offset .x    = value;
	
	if (! enableFirst && arrows .children .length == 0)
	{
		arrow .offset .x = 0;
		arrow .offset .z = -1;
	}

	arrows .children [arrows .children .length] = arrow;

	// Add routes
	
	var self = Browser .currentScene .getNamedNode (\"GradientEditorScript\");

	Browser .addRoute (arrow, \"isActive\",            self, \"set_active\");
	Browser .addRoute (arrow, \"doubleClickTime\",     self, \"removeTime\");
	Browser .addRoute (arrow, \"translation_changed\", self, \"set_translation\");
}

function set_removeTime (value, time)
{
	//print (\"set_removeTime: \", value);

	for (var i = 0, length = arrows .children .length; i < length; ++ i)
	{
		if (value == arrows .children [i] .doubleClickTime)
			break;
	}

	if (! enableFirst && i == 0 && length > 1)
		return;

	for (++ i; i < arrows .children .length; ++ i)
		arrows .children [i - 1] = arrows .children [i];

	-- arrows .children .length;

	if (whichChoice >= arrows .children .length)
	{
		whichChoice       = arrows .children .length - 1;
		outputWhichChoice = arrows .children .length - 1;
	}

	updateFields ();
	set_inputWhichChoice (whichChoice);

	outputRemoveTime = time;
}

function set_translation (value)
{
	print (\"set_translation: \", value);

	var arrows = get_arrows ();

	for (var i = 0; i < arrows .length; ++ i)
	{
		if (arrows [i] .isActive)
			break;
	}

	if (i < arrows .length)
	{
		arrows [i] .offset = value;
	
		if (i !== outputWhichChoice)
		{
			whichChoice       = i;
			outputWhichChoice = i;
		}
	}

	updateFields ();
	
	outputPosition = position;
	outputColor    = color;
}

function updateFields ()
{
	var arrows = get_arrows ();

	for (var i = 0; i < arrows .length; ++ i)
	{
		var arrow = arrows [i];

		position [i] = arrow .offset .x;
		color [i]    = new SFColorRGBA (arrow .color .r, arrow .color .g, arrow .color .b, 1 - arrow .transparency);
	}

	position .length = arrows .length;
	color    .length = arrows .length;
}

function get_arrows ()
{
	var a = [ ];

	for (var i = 0; i < arrows .children .length; ++ i)
		a .push (arrows .children [i]);

	return a .sort (compare);
}

function less (lhs, rhs)
{
	return lhs < rhs;
}

function compare (lhs, rhs)
{
	if (lhs .offset .x < rhs .offset .x)
		return -1;
		
	if (lhs .offset .x > rhs .offset .x)
		return 1;

	return 0;
}

function lowerBound (array, first, last, value, comp)
{
   // http://en.cppreference.com/w/cpp/algorithm/lower_bound

	var
		index = 0,
		step  = 0,
		count = last - first;

	while (count > 0)
	{
		step  = count >>> 1;
		index = first + step;

		if (comp (array [index], value))
		{
			first  = ++ index;
			count -= step + 1;
		}
		else
			count = step;
	}

	return first;
}
"
          directOutput TRUE
        }
      ]
    }
    DEF Arrows LayoutLayer {
      layout Layout {
        align [
          "CENTER",
          "TOP"
        ]
        offsetUnits [
          "FRACTION",
          "PIXEL"
        ]
        offset [
          0,
          -6
        ]
        sizeUnits [
          "FRACTION",
          "PIXEL"
        ]
        size [
          1,
          16
        ]
        scaleMode [
          "FRACTION",
          "PIXEL"
        ]
      }
      children Transform {
        children USE Colors
      }
    }
  ]
}

ROUTE _15.touchTime TO _16.set_time
ROUTE _17.isActive TO GradientEditorScript.set_active
ROUTE _18.isActive TO GradientEditorScript.set_active
ROUTE _16.doubleClickTime TO GradientEditorScript.set_addTime
ROUTE _18.doubleClickTime TO GradientEditorScript.set_removeTime
ROUTE _17.doubleClickTime TO GradientEditorScript.set_removeTime
ROUTE GradientEditorScript.position_changed TO _14.set_position
ROUTE GradientEditorScript.color_changed TO _14.set_color

EXPORT GradientEditorScript AS Tool
