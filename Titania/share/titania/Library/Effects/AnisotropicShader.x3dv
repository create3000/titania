#X3D V3.3 utf8 Titania V4.3.7

PROFILE Full

META "comment" "World of Titania"
META "created" "Mon, 24 Dec 2018 02:30:49 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V4.3.7, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/Titania/share/titania/Library/Effects/AnisotropicMaterial.x3dv"
META "modified" "Mon, 24 Dec 2018 13:24:10 GMT"

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF AngleGrid MetadataSet {
        name "AngleGrid"
        reference "http://titania.create3000.de"
        value DEF enabled MetadataBoolean {
          name "enabled"
          reference "http://titania.create3000.de"
          value FALSE
        }
      }
      DEF Grid MetadataSet {
        name "Grid"
        reference "http://titania.create3000.de"
        value DEF enabled_1 MetadataBoolean {
          name "enabled"
          reference "http://titania.create3000.de"
          value TRUE
        }
      }
      DEF Selection MetadataSet {
        name "Selection"
        reference "http://titania.create3000.de"
        value [
          DEF selectGeometry MetadataBoolean {
            name "selectGeometry"
            reference "http://titania.create3000.de"
            value FALSE
          }
          DEF nodes MetadataSet {
            name "nodes"
            reference "http://titania.create3000.de"
            value DEF AnisotropicVertexShader ShaderPart {
              url "data:x-shader/x-vertex,

precision mediump float;

uniform mat4 x3d_CameraSpaceMatrix;
uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat3 x3d_NormalMatrix;

attribute vec3 x3d_Normal;
attribute vec4 x3d_Vertex;

varying vec3 position;
varying vec3 normal;
varying vec3 tangent;

vec3
getTangent (vec3 position)
{
	return cross (position .xyz, vec3 (0.0, 0.0, 1.0));
}

void
main ()
{
	vec4 p = x3d_ModelViewMatrix * x3d_Vertex;
	
	position = vec3 (p);
	normal   = x3d_NormalMatrix * x3d_Normal;
	tangent  = vec3 (x3d_CameraSpaceMatrix * x3d_ModelViewMatrix * vec4 (getTangent (position), 0.0));

	gl_Position = x3d_ProjectionMatrix * p;
}
"
            }
          }
        ]
      }
      DEF BrowserPanel MetadataSet {
        name "BrowserPanel"
        reference "http://titania.create3000.de"
        value [
          DEF type_2 MetadataString {
            name "type"
            reference "http://titania.create3000.de"
            value [
              "TOP_VIEW",
              "MAIN_VIEW",
              "PERSPECTIVE_VIEW",
              "FRONT_VIEW"
            ]
          }
          DEF viewpoints MetadataSet {
            name "viewpoints"
            reference "http://titania.create3000.de"
            value [
              DEF PerspectiveViewpoint MetadataSet {
                name "PerspectiveViewpoint"
                reference "http://titania.create3000.de"
                value [
                  DEF position_3 MetadataDouble {
                    name "position"
                    reference "http://titania.create3000.de"
                    value [
                      5.87788534164429,
                      6.46984958648682,
                      13.8524446487427
                    ]
                  }
                  DEF orientation_4 MetadataDouble {
                    name "orientation"
                    reference "http://titania.create3000.de"
                    value [
                      -0.704047459676966,
                      0.695566763479169,
                      0.143192360360206,
                      0.568941728424774
                    ]
                  }
                  DEF centerOfRotation_5 MetadataDouble {
                    name "centerOfRotation"
                    reference "http://titania.create3000.de"
                    value [
                      0,
                      0,
                      0
                    ]
                  }
                  DEF fieldOfViewScale MetadataDouble {
                    name "fieldOfViewScale"
                    reference "http://titania.create3000.de"
                    value 1
                  }
                ]
              }
              DEF TopViewpoint MetadataSet {
                name "TopViewpoint"
                reference "http://titania.create3000.de"
                value [
                  DEF position_6 MetadataDouble {
                    name "position"
                    reference "http://titania.create3000.de"
                    value [
                      0,
                      10000,
                      0
                    ]
                  }
                  DEF orientation_7 MetadataDouble {
                    name "orientation"
                    reference "http://titania.create3000.de"
                    value [
                      1,
                      0,
                      0,
                      4.71238898038469
                    ]
                  }
                  DEF centerOfRotation_8 MetadataDouble {
                    name "centerOfRotation"
                    reference "http://titania.create3000.de"
                    value [
                      -0.0320612526145463,
                      0,
                      0.0937320149966475
                    ]
                  }
                  DEF fieldOfViewScale_9 MetadataDouble {
                    name "fieldOfViewScale"
                    reference "http://titania.create3000.de"
                    value 1.21023944190259
                  }
                ]
              }
              DEF FrontViewpoint MetadataSet {
                name "FrontViewpoint"
                reference "http://titania.create3000.de"
                value [
                  DEF position_10 MetadataDouble {
                    name "position"
                    reference "http://titania.create3000.de"
                    value [
                      0,
                      0,
                      10000
                    ]
                  }
                  DEF orientation_11 MetadataDouble {
                    name "orientation"
                    reference "http://titania.create3000.de"
                    value [
                      0,
                      0,
                      1,
                      0
                    ]
                  }
                  DEF centerOfRotation_12 MetadataDouble {
                    name "centerOfRotation"
                    reference "http://titania.create3000.de"
                    value [
                      -0.00884759203065143,
                      0.0177734813359099,
                      0
                    ]
                  }
                  DEF fieldOfViewScale_13 MetadataDouble {
                    name "fieldOfViewScale"
                    reference "http://titania.create3000.de"
                    value 1.212467484375
                  }
                ]
              }
            ]
          }
          DEF shading MetadataString {
            name "shading"
            reference "http://titania.create3000.de"
            value [
              "",
              "GOURAUD",
              "",
              ""
            ]
          }
        ]
      }
      DEF Page MetadataSet {
        name "Page"
        reference "http://titania.create3000.de"
        value [
          DEF activeView MetadataInteger {
            name "activeView"
            reference "http://titania.create3000.de"
            value 1
          }
          DEF multiView MetadataInteger {
            name "multiView"
            reference "http://titania.create3000.de"
            value 0
          }
        ]
      }
    ]
  }
}

DEF AnisotropicMaterial Transform {
  children Shape {
    appearance Appearance {
      material Material {
        ambientIntensity 0.0955322
        diffuseColor 0.372322 0.371574 0.373173
        specularColor 0.890909 0.887832 0.890909
        shininess 0.127551
      }
      shaders DEF AnisotropicShader ComposedShader {
        inputOutput SFFloat alphaX 1
        inputOutput SFFloat alphaY 0.3

        language "GLSL"
        parts [
          USE AnisotropicVertexShader
          DEF AnisotropicFragmentShader ShaderPart {
            type "FRAGMENT"
            url "data:x-shader/x-fragment,

precision mediump float;

uniform int x3d_NumLights;
uniform x3d_LightSourceParameters x3d_LightSource [x3d_MaxLights];
uniform x3d_MaterialParameters x3d_FrontMaterial;

uniform float alphaX;
uniform float alphaY;

varying vec3 position;
varying vec3 normal;
varying vec3 tangent;

vec4
getMaterialColor (x3d_MaterialParameters material)
{
	vec3 normalDirection  = normalize (normal);
	vec3 tangentDirection = normalize (tangent);
	vec3 viewDirection    = normalize (-position);

	vec3 finalColor = vec3 (0.0, 0.0, 0.0);

	for (int i = 0; i < x3d_MaxLights; i ++)
	{
		if (i == x3d_NumLights)
			break;

		x3d_LightSourceParameters light = x3d_LightSource [i];

		vec3  lightDirection = vec3 (0.0);
		float attenuation    = 0.0;

		if (light .type == x3d_DirectionalLight) // directional light?
		{
			attenuation    = 1.0; // no attenuation
			lightDirection = -light .direction;
		} 
		else // point or spot light
		{
			vec3  vertexToLightSource = light .location - position;
			float distance            = length (vertexToLightSource);
			
			attenuation    = 1.0 / distance; // linear attenuation 
			lightDirection = normalize (vertexToLightSource);
		}

		vec3  halfwayVector     = normalize (lightDirection + viewDirection);
		vec3  binormalDirection = cross (normalDirection, tangentDirection);
		float dotLN             = dot (lightDirection, normalDirection); 
		// compute this dot product only once

		vec3 diffuseReflection  = attenuation * light .color * light .intensity * material .diffuseColor * max (0.0, dotLN);
		vec3 specularReflection = vec3 (0.0, 0.0, 0.0);

		if (dotLN < 0.0) // light source on the wrong side?
		{
			specularReflection = vec3 (0.0, 0.0, 0.0); 
			// no specular reflection
		}
		else // light source on the right side
		{
			float dotHN       = dot (halfwayVector, normalDirection);
			float dotVN       = dot (viewDirection, normalDirection);
			float dotHTAlphaX = dot (halfwayVector, tangentDirection) / alphaX;
			float dotHBAlphaY = dot (halfwayVector, binormalDirection) / alphaY;

			specularReflection = attenuation * material .specularColor
				* sqrt (max (0.0, dotLN / dotVN)) 
				* exp (-2.0 * (dotHTAlphaX * dotHTAlphaX + dotHBAlphaY * dotHBAlphaY) / (1.0 + dotHN));
		}
		
		finalColor += diffuseReflection + specularReflection;
	}
	
	return vec4 (finalColor, 1.0 - material .transparency);
}

void
main ()
{
	gl_FragColor = getMaterialColor (x3d_FrontMaterial);
}
"
          }
        ]
      }
    }
    geometry Box {
      solid FALSE
    }
  }
}
