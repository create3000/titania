#X3D V3.0 utf8 Titania V3.0.3

PROFILE Full

UNIT angle degree 0.0174532925199432958

META "comment" "World of Titania"
META "created" "Sun, 02 Nov 2014 08:24:22 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V3.0.3, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/Titania/share/titania/Library/Effects/Water3.x3dv"
META "modified" "Fri, 21 Apr 2017 17:54:36 GMT"
META "outputStyle" "Nicest"

PROTO Water3 [
  inputOutput SFFloat amplitude 0.25
  inputOutput SFFloat frequency 0.8
  inputOutput SFVec2f velocity 0 1
  inputOutput SFFloat turbulence 0.5
  inputOutput SFFloat contrast 0.8
  inputOutput SFFloat skyIntensity 0.4
  inputOutput SFColor skyColor 0.35 0.35 0.4
]
{
  DEF WaterShader ComposedShader {
    inputOnly   SFFloat set_time
    inputOutput SFFloat amplitude IS amplitude
    inputOutput SFFloat frequency IS frequency
    inputOutput SFVec2f velocity IS velocity
    inputOutput SFFloat turbulence IS turbulence
    inputOutput SFFloat contrast IS contrast
    inputOutput SFFloat skyIntensity IS skyIntensity
    inputOutput SFColor skyColor IS skyColor

    language "GLSL"
    parts [
      DEF WaterVertex ShaderPart {
        url "data:text/plain,

precision mediump float;

uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;
uniform mat3 x3d_NormalMatrix;
uniform mat4 x3d_TextureMatrix [x3d_MaxTextures];

#define WAVE_MAX 8

uniform float set_time;
uniform float amplitude;
uniform float frequency;
uniform vec2  velocity;
uniform float turbulence;

attribute vec4 x3d_Color;
attribute vec4 x3d_TexCoord;
attribute vec3 x3d_Normal;
attribute vec4 x3d_Vertex;

varying vec2 p;
varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

float hash (in float n)
{
	return fract (sin (n) * 43758.5453123);
}

float nnoise (in vec2 x)
{
	vec2 p = floor (x);
	vec2 f = fract (x);

	f = f * f * (3.0 - 2.0 * f);

	float n   = p.x + p.y * 57.0;
	float res = mix (mix (hash (n +  0.0), hash (n +  1.0), f.x),
	                 mix (hash (n + 57.0), hash (n + 58.0), f.x), f.y);

	return res * 2.0 - 1.0;
}

float
getWaveHeight (in vec2 xy)
{
	// Octave transform matrix from Alexander Alekseev aka TDM 
	const mat2 octave_m = mat2 (1.8, 1.2, -1.2, 1.8);

	float m = amplitude;
	float w = m * 0.5;
	float h = 0.0;

	xy -= velocity * set_time;
	xy *= frequency;

	for (int i = 0; i < 6; i++)
	{
		h  += nnoise (xy    + set_time * turbulence) * m;
		h  += nnoise (xy.yx - set_time * turbulence * 0.666) * w;
		w  *= 0.5;
		m  *= 0.25;
		xy *= octave_m;
	}

	return h;
}

void
main ()
{
	vec4 vertex = x3d_Vertex;
	p           = vertex .xz;
	vertex.xyz += x3d_Normal * getWaveHeight (vertex .xz);

	vec4 mv = x3d_ModelViewMatrix * vertex;

	vN = normalize (x3d_NormalMatrix * x3d_Normal);

	t = x3d_TextureMatrix [0] * x3d_TexCoord;
	C = x3d_Color;
	v = mv .xyz;

	gl_Position = x3d_ProjectionMatrix * mv;
}"
      }
      DEF WaterFragment ShaderPart {
        type "FRAGMENT"
        url "data:text/plain;charset=utf-8,
// -*- Mode: C++; coding: utf-8; tab-width: 3; indent-tabs-mode: tab; c-basic-offset: 3 -*-
//
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
// 
//  Copyright create3000, ScheffelstraÃŸe 31a, Leipzig, Germany 2011.
// 
//  All rights reserved. Holger Seelig <holger.seelig@yahoo.de>.
// 
//  The copyright notice above does not evidence any actual of intended
//  publication of such source code, and is an unpublished work by create3000.
//  This material contains CONFIDENTIAL INFORMATION that is the property of
//  create3000.
// 
//  No permission is granted to copy, distribute, or create derivative works from
//  the contents of this software, in whole or in part, without the prior written
//  permission of create3000.
// 
//  NON-MILITARY USE ONLY
// 
//  All create3000 software are effectively free software with a non-military use
//  restriction. It is free. Well commented source is provided. You may reuse the
//  source in any way you please with the exception anything that uses it must be
//  marked to indicate is contains 'non-military use only' components.
// 
//  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
// 
//  Copyright 2015, 2016 Holger Seelig <holger.seelig@yahoo.de>.
// 
//  This file is part of the Cobweb Project.
// 
//  Cobweb is free software: you can redistribute it and/or modify it under the
//  terms of the GNU General Public License version 3 only, as published by the
//  Free Software Foundation.
// 
//  Cobweb is distributed in the hope that it will be useful, but WITHOUT ANY
//  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
//  A PARTICULAR PURPOSE. See the GNU General Public License version 3 for more
//  details (a copy is included in the LICENSE file that accompanied this code).
// 
//  You should have received a copy of the GNU General Public License version 3
//  along with Cobweb.  If not, see <http://www.gnu.org/licenses/gpl.html> for a
//  copy of the GPLv3 License.
// 
//  For Silvio, Joy and Adi.


precision mediump float;

uniform int x3d_GeometryType;

uniform vec4 x3d_ClipPlane [x3d_MaxClipPlanes];

uniform int   x3d_FogType;
uniform vec3  x3d_FogColor;
uniform float x3d_FogVisibilityRange;

uniform float x3d_LinewidthScaleFactor;
uniform bool  x3d_Lighting;      // true if a X3DMaterialNode is attached, otherwise false
uniform bool  x3d_ColorMaterial; // true if a X3DColorNode is attached, otherwise false

uniform int   x3d_LightType [x3d_MaxLights];
uniform bool  x3d_LightOn [x3d_MaxLights];
uniform vec3  x3d_LightColor [x3d_MaxLights];
uniform float x3d_LightIntensity [x3d_MaxLights];
uniform float x3d_LightAmbientIntensity [x3d_MaxLights];
uniform vec3  x3d_LightAttenuation [x3d_MaxLights];
uniform vec3  x3d_LightLocation [x3d_MaxLights];
uniform vec3  x3d_LightDirection [x3d_MaxLights];
uniform float x3d_LightRadius [x3d_MaxLights];
uniform float x3d_LightBeamWidth [x3d_MaxLights];
uniform float x3d_LightCutOffAngle [x3d_MaxLights];

uniform bool x3d_SeparateBackColor;

uniform float x3d_AmbientIntensity;
uniform vec3  x3d_DiffuseColor;
uniform vec3  x3d_SpecularColor;
uniform vec3  x3d_EmissiveColor;
uniform float x3d_Shininess;
uniform float x3d_Transparency;

uniform float x3d_BackAmbientIntensity;
uniform vec3  x3d_BackDiffuseColor;
uniform vec3  x3d_BackSpecularColor;
uniform vec3  x3d_BackEmissiveColor;
uniform float x3d_BackShininess;
uniform float x3d_BackTransparency;

uniform int         x3d_TextureType [x3d_MaxTextures]; // true if a X3DTexture2DNode is attached, otherwise false
uniform sampler2D   x3d_Texture2D [x3d_MaxTextures];
uniform samplerCube x3d_CubeMapTexture [x3d_MaxTextures];

uniform mat3  x3d_NormalMatrix;

#define WAVE_MAX 8

uniform float set_time;
uniform float amplitude;
uniform float frequency;
uniform vec2  velocity;
uniform float turbulence;
uniform float contrast; // range [0,1]
uniform float skyIntensity;
uniform vec3  skyColor;

varying vec2 p;
varying vec4 C;  // color
varying vec4 t;  // texCoord
varying vec3 vN; // normalized normal vector at this point on geometry
varying vec3 v;  // point on geometry

const int MAX_WAVES = 6;

float hash (in float n)
{
	return fract (sin (n) * 43758.5453123);
}

float nnoise (in vec2 x)
{
	vec2 p = floor (x);
	vec2 f = fract (x);

	f = f * f * (3.0 - 2.0 * f);

	float n   = p.x + p.y * 57.0;
	float res = mix (mix (hash (n +  0.0), hash (n +  1.0), f.x),
	                 mix (hash (n + 57.0), hash (n + 58.0), f.x), f.y);

	return res * 2.0 - 1.0;
}

float
getWaveHeight (in vec2 xy)
{
	// Octave transform matrix from Alexander Alekseev aka TDM 
	const mat2 octave_m = mat2 (1.8, 1.2, -1.2, 1.8);

	float m = amplitude;
	float w = m * 0.5;
	float h = 0.0;

	xy -= velocity * set_time;
	xy *= frequency;

	for (int i = 0; i < MAX_WAVES; i++)
	{
		h  += nnoise (xy    + set_time * turbulence) * m;
		h  += nnoise (xy.yx - set_time * turbulence * 0.666) * w;
		w  *= 0.5;
		m  *= 0.25;
		xy *= octave_m;
	}

	return h;
}

vec3
getWaveNormal (in vec2 pos)
{
	const float DISTANCE_MIN = 0.001;
	const vec2  delta        = vec2 (DISTANCE_MIN, -DISTANCE_MIN);

	vec2 p1 = pos + delta .xx;
	vec2 p2 = pos + delta .yy;
	vec2 p3 = pos + delta .yx;
	vec2 p4 = pos + delta .xy;

	vec3 n1 = vec3 (p1.x, getWaveHeight (p1), p1.y);
	vec3 n2 = vec3 (p2.x, getWaveHeight (p2), p2.y);
	vec3 n3 = vec3 (p3.x, getWaveHeight (p3), p3.y);
	vec3 n4 = vec3 (p4.x, getWaveHeight (p4), p4.y);
   
   vec3 n = cross (n3 - n4, n1 - n2);
   
   return normalize (n);
}

void
clip ()
{
	for (int i = 0; i < x3d_MaxClipPlanes; ++ i)
	{
		if (x3d_ClipPlane [i] == x3d_NoneClipPlane)
			break;

		if (dot (v, x3d_ClipPlane [i] .xyz) - x3d_ClipPlane [i] .w < 0.0)
			discard;
	}
}

float
getSpotFactor (in float cutOffAngle, in float beamWidth, in vec3 L, in vec3 d)
{
	float spotAngle = acos (clamp (dot (-L, d), -1.0, 1.0));
	
	if (spotAngle >= cutOffAngle)
		return 0.0;
	else if (spotAngle <= beamWidth)
		return 1.0;

	return (spotAngle - cutOffAngle) / (beamWidth - cutOffAngle);
}

vec3
getSkyColor (in vec3 rd, in vec3 lightDirection)
{
	float sunAmount = max (dot (rd, lightDirection), 0.0);
	float v         = pow (1.0 - max (rd .y, 0.0), 6.0);
	vec3  color     = mix (skyColor * skyIntensity, skyColor, v);

	color += sunAmount * sunAmount * 0.25;
	color += min (pow (sunAmount, 800.0) * 1.5, 0.3);

	return clamp (color, 0.0, 1.0);
}
uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

vec4
getMaterialColor ()
{
	// If amplitude factors are 0.5 and 0.25 then AMPLITUDE_MAX is:
	float AMPLITUDE_MAX = amplitude * 4.0 / 3.0;

	float y  = getWaveHeight (p);
	vec3  Nw = x3d_NormalMatrix * getWaveNormal (p);
	
	if (x3d_Lighting)
	{
		vec3  N  = normalize ((gl_FrontFacing ? vN : -vN) + Nw);
		vec3  V  = normalize (-v); // normalized vector from point on geometry to viewer's position
		float dV = length (v);

		// Calculate diffuseFactor & alpha

		bool frontColor = gl_FrontFacing || ! x3d_SeparateBackColor;

		float ambientIntensity = frontColor ? x3d_AmbientIntensity : x3d_BackAmbientIntensity;
		vec3  diffuseColor     = frontColor ? x3d_DiffuseColor     : x3d_BackDiffuseColor;
		vec3  specularColor    = frontColor ? x3d_SpecularColor    : x3d_BackSpecularColor;
		vec3  emissiveColor    = frontColor ? x3d_EmissiveColor    : x3d_BackEmissiveColor;
		float shininess        = frontColor ? x3d_Shininess        : x3d_BackShininess;
		float transparency     = frontColor ? x3d_Transparency     : x3d_BackTransparency;

		float alpha = 1.0 - transparency;

		if (x3d_ColorMaterial)
		{
			diffuseColor = C .rgb;
			alpha       *= C .a;
		}

		float fresnel     = 0.0;
		bool  reflections = true;

		if (reflections)
		{
			fresnel  = pow (1.0 - dot (V, N), 5.0);
			fresnel  = mix (0.0, 1.0, min (1.0, fresnel));
			//fresnel *= max (0.0, dot (N, yUp));
		}
		
		vec3 ambientTerm = diffuseColor * ambientIntensity;

		// Apply light sources

		vec3 finalColor = vec3 (0.0, 0.0, 0.0);

		for (int i = 0; i < x3d_MaxLights; ++ i)
		{
			int lightType = x3d_LightType [i];

			if (lightType == x3d_NoneLight)
				break;

			vec3  vL = x3d_LightLocation [i] - v;
			float dL = length (vL);
			bool  di = lightType == x3d_DirectionalLight;

			if (di || dL <= x3d_LightRadius [i])
			{
				vec3 d = x3d_LightDirection [i];
				vec3 c = x3d_LightAttenuation [i];
				vec3 L = di ? -d : normalize (vL);      // Normalized vector from point on geometry to light source i position.
				vec3 H = normalize (L + V);             // Specular term

				float lightAngle     = max (0.0, dot (N, L));
				float specularFactor = pow (max (0.0, dot (H, N)), shininess * 4096.0) * 128.0;
				vec3  ambientColor   = x3d_LightAmbientIntensity [i] * ambientTerm;

				vec3 waterColor = clamp ((specularFactor * lightAngle * (1.0 - fresnel)) * specularColor, 0.0, 1.0);

				if (fresnel > 0.0)
				{
					waterColor += getSkyColor (reflect (-V, N), L) * fresnel;
				}

				// Normalized height between (0,1)
				float height = (y + AMPLITUDE_MAX) / (AMPLITUDE_MAX * 2.0);

				waterColor += diffuseColor * (1.0 - (1.0 - height) * contrast);
				waterColor *= x3d_LightColor [i];
				waterColor += ambientColor;
 				waterColor *= x3d_LightIntensity [i];
 
  				finalColor += waterColor;
  			}
		}

		finalColor += emissiveColor;

		return vec4 (finalColor, alpha);
	}
	else
	{
		vec4 finalColor = vec4 (1.0, 1.0, 1.0, 1.0);
	
		if (x3d_ColorMaterial)
		{
			finalColor = C;
		}

		return finalColor;
	}
}

vec3
getFogColor (in vec3 color)
{
	if (x3d_FogType == x3d_NoneFog)
		return color;

	float dV = length (v);

	if (dV >= x3d_FogVisibilityRange)
		return x3d_FogColor;

	if (x3d_FogType == x3d_LinearFog)
		return mix (x3d_FogColor, color, (x3d_FogVisibilityRange - dV) / x3d_FogVisibilityRange);

	if (x3d_FogType == x3d_ExponentialFog)
		return mix (x3d_FogColor, color, exp (-dV / (x3d_FogVisibilityRange - dV)));

	return color;
}

void
main ()
{
	clip ();
 
	gl_FragColor = getMaterialColor ();

	gl_FragColor .rgb = getFogColor (gl_FragColor .rgb);
}
"
      }
    ]
  }

  DEF Timer TimeSensor {
    cycleInterval 31104000
    loop TRUE
  }

  DEF ElapsedTime ScalarInterpolator {
    key [
      0,
      1
    ]
    keyValue [
      0,
      3.1104e+07
    ]
  }

  ROUTE Timer.fraction_changed TO ElapsedTime.set_fraction
  ROUTE ElapsedTime.value_changed TO WaterShader.set_time
}

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF NavigationInfo MetadataSet {
        name "NavigationInfo"
        reference "http://titania.create3000.de"
        value DEF type MetadataString {
          name "type"
          reference "http://titania.create3000.de"
          value "EXAMINE"
        }
      }
      DEF Viewpoint MetadataSet {
        name "Viewpoint"
        reference "http://titania.create3000.de"
        value [
          DEF position MetadataDouble {
            name "position"
            reference "http://titania.create3000.de"
            value [
              18.9758881102997,
              3.03618653730859,
              26.9996277700277
            ]
          }
          DEF orientation MetadataDouble {
            name "orientation"
            reference "http://titania.create3000.de"
            value [
              -0.61498038252512,
              0.773829943791914,
              0.151612490251497,
              0.826871496661767
            ]
          }
          DEF centerOfRotation MetadataDouble {
            name "centerOfRotation"
            reference "http://titania.create3000.de"
            value [
              13.5829125741742,
              -1.86767858860803,
              20.1536127471417
            ]
          }
        ]
      }
    ]
  }
  title "Water3"
}

DEF Water3 Transform {
  children [
    DirectionalLight {
      metadata DEF DirectionalLight MetadataSet {
        name "DirectionalLight"
        reference "http://titania.create3000.de"
        value DEF location MetadataFloat {
          name "location"
          reference "http://titania.create3000.de"
          value [
            31.5049,
            13.4016,
            15.7048
          ]
        }
      }
      global FALSE
      color 0.7 0.8 0.9
      ambientIntensity 1
      direction 0.194835 -0.624691 0.756175
    }
    Shape {
      appearance Appearance {
        material Material {
          ambientIntensity 0
          diffuseColor 0.0513333 0.077 0.0624556
          specularColor 0.064 0.064 0.064
          emissiveColor 0.0286667 0.043 0.0348778
          shininess 0.309
        }
        shaders Water3 {
          amplitude 0.05
          frequency 1
          velocity 0 0.5
          turbulence 0.9
          contrast 0.2
          skyIntensity 0.6
          skyColor 1 1 1
        }
      }
      geometry ElevationGrid {
        xDimension 61
        zDimension 61
        height [
          0,
          0,
          0,
          0
        ]
      }
    }
  ]
}
