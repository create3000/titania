#X3D V3.0 utf8 Titania V1.4.10

META "comment" "World of Titania"
META "created" "Sun, 02 Nov 2014 08:24:22 GMT"
META "creator" "Holger Seelig"
META "generator" "Titania V1.4.10, http://titania.create3000.de"
META "identifier" "file:///home/holger/Projekte/Titania/Titania/share/titania/Library/Effects/Water2.x3dv"
META "modified" "Sat, 17 Sep 2016 12:00:12 GMT"
META "title" "Water Shader 2"

WorldInfo {
  metadata DEF Titania MetadataSet {
    name "Titania"
    reference "http://titania.create3000.de"
    value [
      DEF NavigationInfo MetadataSet {
        name "NavigationInfo"
        reference "http://titania.create3000.de"
        value DEF type MetadataString {
          name "type"
          reference "http://titania.create3000.de"
          value "EXAMINE"
        }
      }
      DEF Viewpoint MetadataSet {
        name "Viewpoint"
        reference "http://titania.create3000.de"
        value [
          DEF position MetadataDouble {
            name "position"
            reference "http://titania.create3000.de"
            value [
              105.389083862305,
              48.4969329833984,
              74.6039733886719
            ]
          }
          DEF orientation MetadataDouble {
            name "orientation"
            reference "http://titania.create3000.de"
            value [
              -0.410539746047784,
              0.886633038009617,
              0.212929502006788,
              1.13561952114105
            ]
          }
          DEF centerOfRotation MetadataDouble {
            name "centerOfRotation"
            reference "http://titania.create3000.de"
            value [
              29.5,
              0,
              29.4999923706055
            ]
          }
        ]
      }
      DEF Selection MetadataSet {
        name "Selection"
        reference "http://titania.create3000.de"
        value [
          DEF previous MetadataSet {
            name "previous"
            reference "http://titania.create3000.de"
          }
          DEF children MetadataSet {
            name "children"
            reference "http://titania.create3000.de"
            value DEF WaterFragment ShaderPart {
              type "FRAGMENT"
              url "data:text/plain,

precision mediump float;

uniform float       x3d_Transparency;
uniform samplerCube texture;

varying vec3 texCoord;

void
main ()
{
	vec3 color   = vec3 (textureCube (texture, texCoord));
	gl_FragColor = vec4 (color, 1.0 - x3d_Transparency);
}
"
            }
          }
        ]
      }
    ]
  }
  title "Water2"
}

DEF Water2 Transform {
  children [
    DEF Timer TimeSensor {
      cycleInterval 31104000
      loop TRUE
    }
    DEF ElapsedTime ScalarInterpolator {
      key [
        0,
        1
      ]
      keyValue [
        0,
        3.1104e+07
      ]
    }
    DEF _1 ProximitySensor {
      size 1000 1000 1000
    }
    Shape {
      appearance Appearance {
        material Material {
          ambientIntensity 0
          diffuseColor 0 0 0
          shininess 0
          transparency 0.22619
        }
        shaders DEF WaterShader ComposedShader {
          inputOnly   SFFloat set_time
          inputOutput SFVec3f position 105.389 48.4969 74.604
          inputOutput MFFloat amplitude [
            0.222428,
            0.164403,
            0.0967078,
            0.0967078,
            0.0967078,
            0,
            0,
            0,
            0
          ]
          inputOutput MFFloat frequency [
            2.66008,
            2.55473,
            1.13251,
            0.974485,
            0.763786,
            0,
            0,
            0,
            0
          ]
          inputOutput MFVec2f direction [
            2 -2,
            2 -1,
            2 -0,
            2 1,
            2 2
          ]
          inputOutput SFNode  texture ComposedCubeMapTexture {
            front ImageTexture {
              url [
                "http://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-front.jpg",
                "https://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-front.jpg",
                "http://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-front.jpg",
                "https://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-front.jpg"
              ]
            }
            back ImageTexture {
              url [
                "http://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-back.jpg",
                "https://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-back.jpg",
                "http://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-back.jpg",
                "https://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-back.jpg"
              ]
            }
            left ImageTexture {
              url [
                "http://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-left.jpg",
                "https://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-left.jpg",
                "http://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-left.jpg",
                "https://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-left.jpg"
              ]
            }
            right ImageTexture {
              url [
                "http://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-right.jpg",
                "https://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-right.jpg",
                "http://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-right.jpg",
                "https://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-right.jpg"
              ]
            }
            top ImageTexture {
              url [
                "http://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-top.jpg",
                "https://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-top.jpg",
                "http://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-top.jpg",
                "https://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-top.jpg"
              ]
            }
            bottom ImageTexture {
              url [
                "http://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-bottom.jpg",
                "https://cdn.rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-bottom.jpg",
                "http://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-bottom.jpg",
                "https://rawgit.com/create3000/Library/master/Textures/CubeMapTextures/CloudySky/CloudySky-bottom.jpg"
              ]
            }
          }
          inputOutput MFFloat speed [
            2.11983,
            2.11983,
            2.11983,
            2.11983,
            2.11983,
            0,
            0,
            0
          ]

          language "GLSL"
          parts [
            DEF WaterVertex ShaderPart {
              url "data:text/plain,

precision mediump float;

uniform mat3 x3d_NormalMatrix;
uniform mat4 x3d_ProjectionMatrix;
uniform mat4 x3d_ModelViewMatrix;

attribute vec4 x3d_Vertex;

#define WAVE_MAX 8

uniform float set_time;
uniform vec3  position;
uniform float amplitude [WAVE_MAX];
uniform float frequency [WAVE_MAX];
uniform float speed [WAVE_MAX];
uniform vec2  direction [WAVE_MAX];

varying vec3 texCoord;

float
getHeight (int i, vec2 vertex)
{
	float theta = -dot (vertex, normalize (direction [i]));

	return amplitude [i] * sin (theta * frequency [i] + set_time * speed [i]);
}

float
getWaveHeight (vec2 vertex)
{
	float height = 0.0;

	for (int i = 0; i < WAVE_MAX; ++ i)
	{
		if (amplitude [i] == 0.0)
			continue;

		height += getHeight (i, vertex);
	}

	return height;
}

float
getNormalHeight (int i, vec2 vertex)
{
	float theta = -dot (vertex, normalize (direction [i]));

	return amplitude [i] * cos (theta * frequency [i] + set_time * speed [i]);
}

vec3
getWaveNormal (vec2 vertex)
{
	int  waves  = 0;
	vec3 normal = vec3 (0.0, 0.0, 0.0);

	for (int i = 0; i < WAVE_MAX; ++ i)
	{
		if (amplitude [i] == 0.0)
			continue;

		++ waves;

		float h = getNormalHeight (i, vertex);
		vec2  d = normalize (direction [i]);
		vec3  s = vec3 (d .x, h, d .y);
		vec3  n = cross (vec3 (-d .y, 0, d .x), s);

		normal += normalize (n);
	}

	return waves != 0 ? normalize (normal) : vec3 (0.0, 1.0, 0.0);
}

void
main ()
{
	vec4 vertex = x3d_Vertex;
	vertex .y   = getWaveHeight (vec2 (vertex .x, vertex .z));
	gl_Position = x3d_ProjectionMatrix * x3d_ModelViewMatrix * vertex;

	vec3 eye    = position - vertex .xyz / vertex .w;
	vec3 normal = getWaveNormal (vec2 (vertex .x, vertex .z));
	texCoord    = -reflect (eye, normal);
}"
            }
            USE WaterFragment
          ]
        }
      }
      geometry ElevationGrid {
        xDimension 61
        zDimension 61
      }
    }
  ]
}

ROUTE Timer.fraction_changed TO ElapsedTime.set_fraction
ROUTE _1.position_changed TO WaterShader.set_position
ROUTE ElapsedTime.value_changed TO WaterShader.set_time
