[MetadataBoolean]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	reference = reference;inputOutput;SFString;""
	value = value;inputOutput;MFBool;[ ]
	containerField = metadata
	componentName = Core

[Anchor]
	metadata = metadata;inputOutput;SFNode;NULL
	description = description;inputOutput;SFString;""
	url = url;inputOutput;MFString;[ ]
	parameter = parameter;inputOutput;MFString;[ ]
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Networking

[Appearance]
	metadata = metadata;inputOutput;SFNode;NULL
	fillProperties = fillProperties;inputOutput;SFNode;NULL
	lineProperties = lineProperties;inputOutput;SFNode;NULL
	material = material;inputOutput;SFNode;NULL
	texture = texture;inputOutput;SFNode;NULL
	textureTransform = textureTransform;inputOutput;SFNode;NULL
	shaders = shaders;inputOutput;MFNode;[ ]
	containerField = appearance
	componentName = Shape

[Arc2D]
	metadata = metadata;inputOutput;SFNode;NULL
	startAngle = startAngle;inputOutput;SFFloat;0
	endAngle = endAngle;inputOutput;SFFloat;1.5708
	radius = radius;initializeOnly;SFFloat;1
	containerField = geometry
	componentName = Geometry2D

[ArcClose2D]
	metadata = metadata;inputOutput;SFNode;NULL
	closureType = closureType;inputOutput;SFString;"PIE"
	startAngle = startAngle;inputOutput;SFFloat;0
	endAngle = endAngle;inputOutput;SFFloat;1.5708
	radius = radius;initializeOnly;SFFloat;1
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry2D

[AudioClip]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	description = description;inputOutput;SFString;""
	url = url;inputOutput;MFString;[ ]
	speed = speed;inputOutput;SFFloat;1
	pitch = pitch;inputOutput;SFFloat;1
	loop = loop;inputOutput;SFBool;FALSE
	startTime = startTime;inputOutput;SFTime;0
	resumeTime = resumeTime;inputOutput;SFTime;0
	pauseTime = pauseTime;inputOutput;SFTime;0
	stopTime = stopTime;inputOutput;SFTime;0
	isPaused = isPaused;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	cycleTime = cycleTime;outputOnly;SFTime;
	elapsedTime = elapsedTime;outputOnly;SFTime;
	duration_changed = duration_changed;outputOnly;SFTime;
	containerField = source
	componentName = Sound

[Background]
	metadata = metadata;inputOutput;SFNode;NULL
	set_bind = set_bind;inputOnly;SFBool;
	frontUrl = frontUrl;inputOutput;MFString;[ ]
	backUrl = backUrl;inputOutput;MFString;[ ]
	leftUrl = leftUrl;inputOutput;MFString;[ ]
	rightUrl = rightUrl;inputOutput;MFString;[ ]
	topUrl = topUrl;inputOutput;MFString;[ ]
	bottomUrl = bottomUrl;inputOutput;MFString;[ ]
	skyAngle = skyAngle;inputOutput;MFFloat;[ ]
	skyColor = skyColor;inputOutput;MFColor;0 0 0
	groundAngle = groundAngle;inputOutput;MFFloat;[ ]
	groundColor = groundColor;inputOutput;MFColor;[ ]
	transparency = transparency;inputOutput;SFFloat;0
	isBound = isBound;outputOnly;SFBool;
	bindTime = bindTime;outputOnly;SFTime;
	containerField = children
	componentName = EnvironmentalEffects

[BallJoint]
	metadata = metadata;inputOutput;SFNode;NULL
	body1 = body1;inputOutput;SFNode;NULL
	body2 = body2;inputOutput;SFNode;NULL
	forceOutput = forceOutput;inputOutput;MFString;"NONE"
	anchorPoint = anchorPoint;inputOutput;SFVec3f;0 0 0
	body1AnchorPoint = body1AnchorPoint;outputOnly;SFVec3f;
	body2AnchorPoint = body2AnchorPoint;outputOnly;SFVec3f;
	containerField = joints
	componentName = RigidBodyPhysics

[Billboard]
	metadata = metadata;inputOutput;SFNode;NULL
	axisOfRotation = axisOfRotation;inputOutput;SFVec3f;0 1 0
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Navigation

[BooleanFilter]
	metadata = metadata;inputOutput;SFNode;NULL
	set_boolean = set_boolean;inputOnly;SFBool;
	inputFalse = inputFalse;outputOnly;SFBool;
	inputTrue = inputTrue;outputOnly;SFBool;
	inputNegate = inputNegate;outputOnly;SFBool;
	containerField = children
	componentName = EventUtilities

[BooleanSequencer]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	previous = previous;inputOnly;SFBool;
	next = next;inputOnly;SFBool;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFBool;[ ]
	value_changed = value_changed;outputOnly;SFBool;
	containerField = children
	componentName = EventUtilities

[BooleanToggle]
	metadata = metadata;inputOutput;SFNode;NULL
	set_boolean = set_boolean;inputOnly;SFBool;
	toggle = toggle;inputOutput;SFBool;FALSE
	containerField = children
	componentName = EventUtilities

[BooleanTrigger]
	metadata = metadata;inputOutput;SFNode;NULL
	set_triggerTime = set_triggerTime;inputOnly;SFTime;
	triggerTrue = triggerTrue;outputOnly;SFBool;
	containerField = children
	componentName = EventUtilities

[BoundedPhysicsModel]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	geometry = geometry;inputOutput;SFNode;NULL
	containerField = physics
	componentName = ParticleSystems

[Box]
	metadata = metadata;inputOutput;SFNode;NULL
	size = size;initializeOnly;SFVec3f;2 2 2
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry3D

[CADAssembly]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = CADGeometry

[CADFace]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	shape = shape;inputOutput;SFNode;NULL
	containerField = children
	componentName = CADGeometry

[CADLayer]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	visible = visible;inputOutput;MFBool;[ ]
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = CADGeometry

[CADPart]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	translation = translation;inputOutput;SFVec3f;0 0 0
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	scaleOrientation = scaleOrientation;inputOutput;SFRotation;0 0 1 0
	center = center;inputOutput;SFVec3f;0 0 0
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = CADGeometry

[Circle2D]
	metadata = metadata;inputOutput;SFNode;NULL
	radius = radius;initializeOnly;SFFloat;1
	containerField = geometry
	componentName = Geometry2D

[ClipPlane]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	plane = plane;inputOutput;SFVec4f;0 1 0 0
	containerField = children
	componentName = Rendering

[CollidableOffset]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	enabled = enabled;inputOutput;SFBool;TRUE
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	translation = translation;inputOutput;SFVec3f;0 0 0
	collidable = collidable;initializeOnly;SFNode;NULL
	containerField = children
	componentName = RigidBodyPhysics

[CollidableShape]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	enabled = enabled;inputOutput;SFBool;TRUE
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	translation = translation;inputOutput;SFVec3f;0 0 0
	shape = shape;initializeOnly;SFNode;NULL
	containerField = children
	componentName = RigidBodyPhysics

[Collision]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	collideTime = collideTime;outputOnly;SFTime;
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	proxy = proxy;initializeOnly;SFNode;NULL
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Navigation

[CollisionCollection]
	metadata = metadata;inputOutput;SFNode;NULL
	appliedParameters = appliedParameters;inputOutput;MFString;"BOUNCE"
	bounce = bounce;inputOutput;SFFloat;0
	collidables = collidables;inputOutput;MFNode;[ ]
	enabled = enabled;inputOutput;SFBool;FALSE
	frictionCoefficients = frictionCoefficients;inputOutput;SFVec2f;0 0
	minBounceSpeed = minBounceSpeed;inputOutput;SFFloat;0
	slipFactors = slipFactors;inputOutput;SFVec2f;0 0
	softnessConstantForceMix = softnessConstantForceMix;inputOutput;SFFloat;0
	softnessErrorCorrection = softnessErrorCorrection;inputOutput;SFFloat;0
	surfaceSpeed = surfaceSpeed;inputOutput;SFVec2f;0 0
	containerField = collidables
	componentName = RigidBodyPhysics

[CollisionSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	collider = collider;inputOutput;SFNode;NULL
	intersections = intersections;outputOnly;MFNode;
	contacts = contacts;outputOnly;MFNode;
	containerField = children
	componentName = RigidBodyPhysics

[CollisionSpace]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	useGeometry = useGeometry;inputOutput;SFBool;FALSE
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	collidables = collidables;inputOutput;MFNode;[ ]
	containerField = children
	componentName = RigidBodyPhysics

[Color]
	metadata = metadata;inputOutput;SFNode;NULL
	color = color;inputOutput;MFColor;[ ]
	containerField = color
	componentName = Rendering

[ColorChaser]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFColor;
	set_destination = set_destination;inputOnly;SFColor;
	initialValue = initialValue;initializeOnly;SFColor;0.8 0.8 0.8
	initialDestination = initialDestination;initializeOnly;SFColor;0.8 0.8 0.8
	duration = duration;initializeOnly;SFTime;1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFColor;
	containerField = children
	componentName = Followers

[ColorDamper]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFColor;
	set_destination = set_destination;inputOnly;SFColor;
	initialValue = initialValue;initializeOnly;SFColor;0.8 0.8 0.8
	initialDestination = initialDestination;initializeOnly;SFColor;0.8 0.8 0.8
	order = order;initializeOnly;SFInt32;3
	tau = tau;inputOutput;SFTime;0.3
	tolerance = tolerance;inputOutput;SFFloat;-1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFColor;
	containerField = children
	componentName = Followers

[ColorInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFColor;[ ]
	value_changed = value_changed;outputOnly;SFColor;
	containerField = children
	componentName = Interpolation

[ColorRGBA]
	metadata = metadata;inputOutput;SFNode;NULL
	color = color;inputOutput;MFColorRGBA;[ ]
	containerField = color
	componentName = Rendering

[ComposedCubeMapTexture]
	metadata = metadata;inputOutput;SFNode;NULL
	front = front;inputOutput;SFNode;NULL
	back = back;inputOutput;SFNode;NULL
	left = left;inputOutput;SFNode;NULL
	right = right;inputOutput;SFNode;NULL
	top = top;inputOutput;SFNode;NULL
	bottom = bottom;inputOutput;SFNode;NULL
	containerField = texture
	componentName = CubeMapTexturing

[ComposedShader]
	metadata = metadata;inputOutput;SFNode;NULL
	activate = activate;inputOnly;SFBool;
	isSelected = isSelected;outputOnly;SFBool;
	isValid = isValid;outputOnly;SFBool;
	language = language;initializeOnly;SFString;""
	parts = parts;inputOutput;MFNode;[ ]
	containerField = shaders
	componentName = Shaders

[ComposedTexture3D]
	metadata = metadata;inputOutput;SFNode;NULL
	repeatS = repeatS;initializeOnly;SFBool;FALSE
	repeatT = repeatT;initializeOnly;SFBool;FALSE
	repeatR = repeatR;initializeOnly;SFBool;FALSE
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	texture = texture;inputOutput;MFNode;[ ]
	containerField = texture
	componentName = Texturing3D

[Cone]
	metadata = metadata;inputOutput;SFNode;NULL
	side = side;initializeOnly;SFBool;TRUE
	bottom = bottom;initializeOnly;SFBool;TRUE
	height = height;initializeOnly;SFFloat;2
	bottomRadius = bottomRadius;initializeOnly;SFFloat;1
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry3D

[ConeEmitter]
	metadata = metadata;inputOutput;SFNode;NULL
	position = position;inputOutput;SFVec3f;0 0 0
	direction = direction;inputOutput;SFVec3f;0 1 0
	angle = angle;inputOutput;SFFloat;0.785398
	speed = speed;inputOutput;SFFloat;0
	variation = variation;inputOutput;SFFloat;0.25
	mass = mass;initializeOnly;SFFloat;0
	surfaceArea = surfaceArea;initializeOnly;SFFloat;0
	containerField = emitter
	componentName = ParticleSystems

[Contact]
	metadata = metadata;inputOutput;SFNode;NULL
	appliedParameters = appliedParameters;inputOutput;MFString;"BOUNCE"
	body1 = body1;inputOutput;SFNode;NULL
	body2 = body2;inputOutput;SFNode;NULL
	bounce = bounce;inputOutput;SFFloat;0
	contactNormal = contactNormal;inputOutput;SFVec3f;0 1 0
	depth = depth;inputOutput;SFFloat;0
	frictionCoefficients = frictionCoefficients;inputOutput;SFVec2f;0 0
	frictionDirection = frictionDirection;inputOutput;SFVec3f;0 1 0
	geometry1 = geometry1;inputOutput;SFNode;NULL
	geometry2 = geometry2;inputOutput;SFNode;NULL
	minbounceSpeed = minbounceSpeed;inputOutput;SFFloat;0
	position = position;inputOutput;SFVec3f;0 0 0
	slipCoefficients = slipCoefficients;inputOutput;SFVec2f;0 0
	softnessConstantForceMix = softnessConstantForceMix;inputOutput;SFFloat;0.0001
	softnessErrorCorrection = softnessErrorCorrection;inputOutput;SFFloat;0.8
	surfaceSpeed = surfaceSpeed;inputOutput;SFVec2f;0 0
	containerField = children
	componentName = RigidBodyPhysics

[Contour2D]
	metadata = metadata;inputOutput;SFNode;NULL
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = trimmingContour
	componentName = NURBS

[ContourPolyline2D]
	metadata = metadata;inputOutput;SFNode;NULL
	controlPoint = controlPoint;inputOutput;MFVec2d;[ ]
	containerField = children
	componentName = NURBS

[Coordinate]
	metadata = metadata;inputOutput;SFNode;NULL
	point = point;inputOutput;MFVec3f;[ ]
	containerField = coord
	componentName = Rendering

[CoordinateChaser]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;MFVec3f;
	set_destination = set_destination;inputOnly;MFVec3f;
	initialValue = initialValue;initializeOnly;MFVec3f;0 0 0
	initialDestination = initialDestination;initializeOnly;MFVec3f;0 0 0
	duration = duration;initializeOnly;SFTime;1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;MFVec3f;
	containerField = children
	componentName = Followers

[CoordinateDamper]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;MFVec3f;
	set_destination = set_destination;inputOnly;MFVec3f;
	initialValue = initialValue;initializeOnly;MFVec3f;0 0 0
	initialDestination = initialDestination;initializeOnly;MFVec3f;0 0 0
	order = order;initializeOnly;SFInt32;3
	tau = tau;inputOutput;SFTime;0.3
	tolerance = tolerance;inputOutput;SFFloat;-1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;MFVec3f;
	containerField = children
	componentName = Followers

[CoordinateDouble]
	metadata = metadata;inputOutput;SFNode;NULL
	point = point;inputOutput;MFVec3d;[ ]
	containerField = coord
	componentName = NURBS

[CoordinateInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec3f;[ ]
	value_changed = value_changed;outputOnly;MFVec3f;
	containerField = children
	componentName = Interpolation

[CoordinateInterpolator2D]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec2f;[ ]
	value_changed = value_changed;outputOnly;MFVec2f;
	containerField = children
	componentName = Interpolation

[Cylinder]
	metadata = metadata;inputOutput;SFNode;NULL
	top = top;initializeOnly;SFBool;TRUE
	side = side;initializeOnly;SFBool;TRUE
	bottom = bottom;initializeOnly;SFBool;TRUE
	height = height;initializeOnly;SFFloat;2
	radius = radius;initializeOnly;SFFloat;1
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry3D

[CylinderSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	description = description;inputOutput;SFString;""
	axisRotation = axisRotation;inputOutput;SFRotation;0 0 1 0
	diskAngle = diskAngle;inputOutput;SFFloat;0.261799
	minAngle = minAngle;inputOutput;SFFloat;0
	maxAngle = maxAngle;inputOutput;SFFloat;-1
	offset = offset;inputOutput;SFFloat;0
	autoOffset = autoOffset;inputOutput;SFBool;TRUE
	trackPoint_changed = trackPoint_changed;outputOnly;SFVec3f;
	rotation_changed = rotation_changed;outputOnly;SFRotation;
	isOver = isOver;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	containerField = children
	componentName = PointingDeviceSensor

[DISEntityManager]
	metadata = metadata;inputOutput;SFNode;NULL
	address = address;inputOutput;SFString;"localhost"
	applicationID = applicationID;inputOutput;SFInt32;1
	mapping = mapping;inputOutput;MFNode;[ ]
	port = port;inputOutput;SFInt32;0
	siteID = siteID;inputOutput;SFInt32;0
	addedEntities = addedEntities;outputOnly;MFNode;
	removedEntities = removedEntities;outputOnly;MFNode;
	containerField = children
	componentName = DIS

[DISEntityTypeMapping]
	metadata = metadata;inputOutput;SFNode;NULL
	url = url;inputOutput;MFString;[ ]
	category = category;initializeOnly;SFInt32;0
	country = country;initializeOnly;SFInt32;0
	domain = domain;initializeOnly;SFInt32;0
	extra = extra;initializeOnly;SFInt32;0
	kind = kind;initializeOnly;SFInt32;0
	specific = specific;initializeOnly;SFInt32;0
	subcategory = subcategory;initializeOnly;SFInt32;0
	containerField = mapping
	componentName = DIS

[DirectionalLight]
	metadata = metadata;inputOutput;SFNode;NULL
	global = global;inputOutput;SFBool;TRUE
	on = on;inputOutput;SFBool;TRUE
	color = color;inputOutput;SFColor;1 1 1
	intensity = intensity;inputOutput;SFFloat;1
	ambientIntensity = ambientIntensity;inputOutput;SFFloat;0
	direction = direction;inputOutput;SFVec3f;0 0 -1
	shadowIntensity = shadowIntensity;inputOutput;SFFloat;0
	shadowMapSize = shadowMapSize;inputOutput;SFInt32;1024
	containerField = children
	componentName = Lighting

[Disk2D]
	metadata = metadata;inputOutput;SFNode;NULL
	innerRadius = innerRadius;inputOutput;SFFloat;0
	outerRadius = outerRadius;inputOutput;SFFloat;1
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry2D

[DoubleAxisHingeJoint]
	metadata = metadata;inputOutput;SFNode;NULL
	body1 = body1;inputOutput;SFNode;NULL
	body2 = body2;inputOutput;SFNode;NULL
	forceOutput = forceOutput;inputOutput;MFString;"NONE"
	anchorPoint = anchorPoint;inputOutput;SFVec3f;0 0 0
	axis1 = axis1;inputOutput;SFVec3f;0 0 0
	axis2 = axis2;inputOutput;SFVec3f;0 0 0
	desiredAngularVelocity1 = desiredAngularVelocity1;inputOutput;SFFloat;0
	desiredAngularVelocity2 = desiredAngularVelocity2;inputOutput;SFFloat;0
	maxAngle1 = maxAngle1;inputOutput;SFFloat;0
	maxTorque1 = maxTorque1;inputOutput;SFFloat;0
	maxTorque2 = maxTorque2;inputOutput;SFFloat;0
	minAngle1 = minAngle1;inputOutput;SFFloat;0
	stopBounce1 = stopBounce1;inputOutput;SFFloat;0
	stopConstantForceMix1 = stopConstantForceMix1;inputOutput;SFFloat;0.001
	stopErrorCorrection1 = stopErrorCorrection1;inputOutput;SFFloat;0.8
	suspensionErrorCorrection = suspensionErrorCorrection;inputOutput;SFFloat;0.8
	suspensionForce = suspensionForce;inputOutput;SFFloat;0
	body1AnchorPoint = body1AnchorPoint;outputOnly;SFVec3f;
	body1Axis = body1Axis;outputOnly;SFVec3f;
	body2AnchorPoint = body2AnchorPoint;outputOnly;SFVec3f;
	body2Axis = body2Axis;outputOnly;SFVec3f;
	hinge1Angle = hinge1Angle;outputOnly;SFFloat;
	hinge1AngleRate = hinge1AngleRate;outputOnly;SFFloat;
	hinge2Angle = hinge2Angle;outputOnly;SFFloat;
	hinge2AngleRate = hinge2AngleRate;outputOnly;SFFloat;
	containerField = joints
	componentName = RigidBodyPhysics

[EaseInEaseOut]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	easeInEaseOut = easeInEaseOut;inputOutput;MFVec2f;[ ]
	modifiedFraction_changed = modifiedFraction_changed;outputOnly;SFFloat;
	containerField = children
	componentName = Interpolation

[ElevationGrid]
	metadata = metadata;inputOutput;SFNode;NULL
	xDimension = xDimension;initializeOnly;SFInt32;0
	zDimension = zDimension;initializeOnly;SFInt32;0
	xSpacing = xSpacing;initializeOnly;SFFloat;1
	zSpacing = zSpacing;initializeOnly;SFFloat;1
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	creaseAngle = creaseAngle;initializeOnly;SFFloat;0
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	height = height;inputOutput;MFFloat;[ ]
	containerField = geometry
	componentName = Geometry3D

[EspduTransform]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	isActive = isActive;outputOnly;SFBool;
	set_articulationParameterValue0 = set_articulationParameterValue0;inputOnly;SFFloat;
	set_articulationParameterValue1 = set_articulationParameterValue1;inputOnly;SFFloat;
	set_articulationParameterValue2 = set_articulationParameterValue2;inputOnly;SFFloat;
	set_articulationParameterValue3 = set_articulationParameterValue3;inputOnly;SFFloat;
	set_articulationParameterValue4 = set_articulationParameterValue4;inputOnly;SFFloat;
	set_articulationParameterValue5 = set_articulationParameterValue5;inputOnly;SFFloat;
	set_articulationParameterValue6 = set_articulationParameterValue6;inputOnly;SFFloat;
	set_articulationParameterValue7 = set_articulationParameterValue7;inputOnly;SFFloat;
	address = address;inputOutput;SFString;"localhost"
	applicationID = applicationID;inputOutput;SFInt32;1
	articulationParameterCount = articulationParameterCount;inputOutput;SFInt32;0
	articulationParameterDesignatorArray = articulationParameterDesignatorArray;inputOutput;MFInt32;[ ]
	articulationParameterChangeIndicatorArray = articulationParameterChangeIndicatorArray;inputOutput;MFInt32;[ ]
	articulationParameterIdPartAttachedToArray = articulationParameterIdPartAttachedToArray;inputOutput;MFInt32;[ ]
	articulationParameterTypeArray = articulationParameterTypeArray;inputOutput;MFInt32;[ ]
	articulationParameterArray = articulationParameterArray;inputOutput;MFFloat;[ ]
	center = center;inputOutput;SFVec3f;0 0 0
	collisionType = collisionType;inputOutput;SFInt32;0
	deadReckoning = deadReckoning;inputOutput;SFInt32;0
	detonationLocation = detonationLocation;inputOutput;SFVec3f;0 0 0
	detonationRelativeLocation = detonationRelativeLocation;inputOutput;SFVec3f;0 0 0
	detonationResult = detonationResult;inputOutput;SFInt32;0
	entityCategory = entityCategory;inputOutput;SFInt32;0
	entityCountry = entityCountry;inputOutput;SFInt32;0
	entityDomain = entityDomain;inputOutput;SFInt32;0
	entityExtra = entityExtra;inputOutput;SFInt32;0
	entityID = entityID;inputOutput;SFInt32;0
	entityKind = entityKind;inputOutput;SFInt32;0
	entitySpecific = entitySpecific;inputOutput;SFInt32;0
	entitySubCategory = entitySubCategory;inputOutput;SFInt32;0
	eventApplicationID = eventApplicationID;inputOutput;SFInt32;1
	eventEntityID = eventEntityID;inputOutput;SFInt32;0
	eventNumber = eventNumber;inputOutput;SFInt32;0
	eventSiteID = eventSiteID;inputOutput;SFInt32;0
	fired1 = fired1;inputOutput;SFBool;FALSE
	fired2 = fired2;inputOutput;SFBool;FALSE
	fireMissionIndex = fireMissionIndex;inputOutput;SFInt32;0
	firingRange = firingRange;inputOutput;SFFloat;0
	firingRate = firingRate;inputOutput;SFInt32;0
	forceID = forceID;inputOutput;SFInt32;0
	fuse = fuse;inputOutput;SFInt32;0
	linearVelocity = linearVelocity;inputOutput;SFVec3f;0 0 0
	linearAcceleration = linearAcceleration;inputOutput;SFVec3f;0 0 0
	marking = marking;inputOutput;SFString;""
	multicastRelayHost = multicastRelayHost;inputOutput;SFString;""
	multicastRelayPort = multicastRelayPort;inputOutput;SFInt32;0
	munitionApplicationID = munitionApplicationID;inputOutput;SFInt32;1
	munitionEndPoint = munitionEndPoint;inputOutput;SFVec3f;0 0 0
	munitionEntityID = munitionEntityID;inputOutput;SFInt32;0
	munitionQuantity = munitionQuantity;inputOutput;SFInt32;0
	munitionSiteID = munitionSiteID;inputOutput;SFInt32;0
	munitionStartPoint = munitionStartPoint;inputOutput;SFVec3f;0 0 0
	networkMode = networkMode;inputOutput;SFString;"standAlone"
	port = port;inputOutput;SFInt32;0
	readInterval = readInterval;inputOutput;SFTime;0.1
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	scaleOrientation = scaleOrientation;inputOutput;SFRotation;0 0 1 0
	siteID = siteID;inputOutput;SFInt32;0
	translation = translation;inputOutput;SFVec3f;0 0 0
	warhead = warhead;inputOutput;SFInt32;0
	writeInterval = writeInterval;inputOutput;SFTime;1
	articulationParameterValue0_changed = articulationParameterValue0_changed;outputOnly;SFFloat;
	articulationParameterValue1_changed = articulationParameterValue1_changed;outputOnly;SFFloat;
	articulationParameterValue2_changed = articulationParameterValue2_changed;outputOnly;SFFloat;
	articulationParameterValue3_changed = articulationParameterValue3_changed;outputOnly;SFFloat;
	articulationParameterValue4_changed = articulationParameterValue4_changed;outputOnly;SFFloat;
	articulationParameterValue5_changed = articulationParameterValue5_changed;outputOnly;SFFloat;
	articulationParameterValue6_changed = articulationParameterValue6_changed;outputOnly;SFFloat;
	articulationParameterValue7_changed = articulationParameterValue7_changed;outputOnly;SFFloat;
	collideTime = collideTime;outputOnly;SFTime;
	detonateTime = detonateTime;outputOnly;SFTime;
	firedTime = firedTime;outputOnly;SFTime;
	isCollided = isCollided;outputOnly;SFBool;
	isDetonated = isDetonated;outputOnly;SFBool;
	isNetworkReader = isNetworkReader;outputOnly;SFBool;
	isNetworkWriter = isNetworkWriter;outputOnly;SFBool;
	isRtpHeaderHeard = isRtpHeaderHeard;outputOnly;SFBool;
	isStandAlone = isStandAlone;outputOnly;SFBool;
	timestamp = timestamp;outputOnly;SFTime;
	rtpHeaderExpected = rtpHeaderExpected;initializeOnly;SFBool;FALSE
	containerField = children
	componentName = DIS

[ExplosionEmitter]
	metadata = metadata;inputOutput;SFNode;NULL
	position = position;inputOutput;SFVec3f;0 0 0
	speed = speed;inputOutput;SFFloat;0
	variation = variation;inputOutput;SFFloat;0.25
	mass = mass;initializeOnly;SFFloat;0
	surfaceArea = surfaceArea;initializeOnly;SFFloat;0
	containerField = emitter
	componentName = ParticleSystems

[Extrusion]
	metadata = metadata;inputOutput;SFNode;NULL
	beginCap = beginCap;initializeOnly;SFBool;TRUE
	endCap = endCap;initializeOnly;SFBool;TRUE
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	convex = convex;initializeOnly;SFBool;TRUE
	creaseAngle = creaseAngle;initializeOnly;SFFloat;0
	crossSection = crossSection;inputOutput;MFVec2f;[ 1 1, 1 -1, -1 -1, -1 1, 1 1 ]
	orientation = orientation;inputOutput;MFRotation;0 0 1 0
	scale = scale;inputOutput;MFVec2f;1 1
	spine = spine;inputOutput;MFVec3f;[ 0 0 0, 0 1 0 ]
	containerField = geometry
	componentName = Geometry3D

[FillProperties]
	metadata = metadata;inputOutput;SFNode;NULL
	filled = filled;inputOutput;SFBool;TRUE
	hatched = hatched;inputOutput;SFBool;TRUE
	hatchStyle = hatchStyle;inputOutput;SFInt32;1
	hatchColor = hatchColor;inputOutput;SFColor;1 1 1
	containerField = fillProperties
	componentName = Shape

[FloatVertexAttribute]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;initializeOnly;SFString;""
	numComponents = numComponents;initializeOnly;SFInt32;4
	value = value;inputOutput;MFFloat;[ ]
	containerField = attrib
	componentName = Shaders

[Fog]
	metadata = metadata;inputOutput;SFNode;NULL
	set_bind = set_bind;inputOnly;SFBool;
	fogType = fogType;inputOutput;SFString;"LINEAR"
	color = color;inputOutput;SFColor;1 1 1
	visibilityRange = visibilityRange;inputOutput;SFFloat;0
	isBound = isBound;outputOnly;SFBool;
	bindTime = bindTime;outputOnly;SFTime;
	containerField = children
	componentName = EnvironmentalEffects

[FogCoordinate]
	metadata = metadata;inputOutput;SFNode;NULL
	depth = depth;inputOutput;MFFloat;[ ]
	containerField = fogCoord
	componentName = EnvironmentalEffects

[FontStyle]
	metadata = metadata;inputOutput;SFNode;NULL
	language = language;initializeOnly;SFString;""
	family = family;initializeOnly;MFString;"SERIF"
	style = style;initializeOnly;SFString;"PLAIN"
	size = size;initializeOnly;SFFloat;1
	spacing = spacing;initializeOnly;SFFloat;1
	horizontal = horizontal;initializeOnly;SFBool;TRUE
	leftToRight = leftToRight;initializeOnly;SFBool;TRUE
	topToBottom = topToBottom;initializeOnly;SFBool;TRUE
	justify = justify;initializeOnly;MFString;"BEGIN"
	containerField = fontStyle
	componentName = Text

[GeneratedCubeMapTexture]
	metadata = metadata;inputOutput;SFNode;NULL
	update = update;inputOutput;SFString;"NONE"
	size = size;initializeOnly;SFInt32;128
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	containerField = texture
	componentName = CubeMapTexturing

[GeoCoordinate]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	point = point;inputOutput;MFVec3d;[ ]
	containerField = coord
	componentName = Geospatial

[GeoElevationGrid]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	geoGridOrigin = geoGridOrigin;initializeOnly;SFVec3d;0 0 0
	xDimension = xDimension;initializeOnly;SFInt32;0
	zDimension = zDimension;initializeOnly;SFInt32;0
	xSpacing = xSpacing;initializeOnly;SFDouble;1
	zSpacing = zSpacing;initializeOnly;SFDouble;1
	yScale = yScale;inputOutput;SFFloat;1
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	creaseAngle = creaseAngle;initializeOnly;SFDouble;0
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	height = height;inputOutput;MFDouble;[ ]
	containerField = geometry
	componentName = Geospatial

[GeoLOD]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	rootUrl = rootUrl;initializeOnly;MFString;[ ]
	child1Url = child1Url;initializeOnly;MFString;[ ]
	child2Url = child2Url;initializeOnly;MFString;[ ]
	child3Url = child3Url;initializeOnly;MFString;[ ]
	child4Url = child4Url;initializeOnly;MFString;[ ]
	center = center;initializeOnly;SFVec3d;0 0 0
	range = range;initializeOnly;SFFloat;10
	level_changed = level_changed;outputOnly;SFInt32;
	rootNode = rootNode;initializeOnly;MFNode;[ ]
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	children = children;outputOnly;MFNode;
	containerField = children
	componentName = Geospatial

[GeoLocation]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	geoCoords = geoCoords;inputOutput;SFVec3d;0 0 0
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Geospatial

[GeoMetadata]
	metadata = metadata;inputOutput;SFNode;NULL
	url = url;inputOutput;MFString;[ ]
	summary = summary;inputOutput;MFString;[ ]
	data = data;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Geospatial

[GeoOrigin]
	metadata = metadata;inputOutput;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	geoCoords = geoCoords;inputOutput;SFVec3d;0 0 0
	rotateYUp = rotateYUp;initializeOnly;SFBool;FALSE
	containerField = geoOrigin
	componentName = Geospatial

[GeoPositionInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec3d;[ ]
	value_changed = value_changed;outputOnly;SFVec3d;
	geovalue_changed = geovalue_changed;outputOnly;SFVec3d;
	containerField = children
	componentName = Geospatial

[GeoProximitySensor]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	enabled = enabled;inputOutput;SFBool;TRUE
	size = size;inputOutput;SFVec3f;0 0 0
	center = center;inputOutput;SFVec3f;0 0 0
	isActive = isActive;outputOnly;SFBool;
	enterTime = enterTime;outputOnly;SFTime;
	exitTime = exitTime;outputOnly;SFTime;
	geoCoord_changed = geoCoord_changed;outputOnly;SFVec3d;
	position_changed = position_changed;outputOnly;SFVec3f;
	orientation_changed = orientation_changed;outputOnly;SFRotation;
	centerOfRotation_changed = centerOfRotation_changed;outputOnly;SFVec3f;
	containerField = children
	componentName = Geospatial

[GeoTouchSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	description = description;inputOutput;SFString;""
	enabled = enabled;inputOutput;SFBool;TRUE
	hitTexCoord_changed = hitTexCoord_changed;outputOnly;SFVec2f;
	hitNormal_changed = hitNormal_changed;outputOnly;SFVec3f;
	hitPoint_changed = hitPoint_changed;outputOnly;SFVec3f;
	hitGeoCoord_changed = hitGeoCoord_changed;outputOnly;SFVec3d;
	isOver = isOver;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	touchTime = touchTime;outputOnly;SFTime;
	containerField = children
	componentName = Geospatial

[GeoTransform]
	metadata = metadata;inputOutput;SFNode;NULL
	translation = translation;inputOutput;SFVec3f;0 0 0
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	scaleOrientation = scaleOrientation;inputOutput;SFRotation;0 0 1 0
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	geoCenter = geoCenter;inputOutput;SFVec3d;0 0 0
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Geospatial

[GeoViewpoint]
	metadata = metadata;inputOutput;SFNode;NULL
	geoOrigin = geoOrigin;initializeOnly;SFNode;NULL
	geoSystem = geoSystem;initializeOnly;MFString;[ "GD", "WE" ]
	set_bind = set_bind;inputOnly;SFBool;
	description = description;inputOutput;SFString;""
	position = position;inputOutput;SFVec3d;0 0 100000
	orientation = orientation;inputOutput;SFRotation;0 0 1 0
	centerOfRotation = centerOfRotation;inputOutput;SFVec3d;0 0 0
	fieldOfView = fieldOfView;inputOutput;SFFloat;0.785398
	jump = jump;inputOutput;SFBool;TRUE
	retainUserOffsets = retainUserOffsets;inputOutput;SFBool;FALSE
	speedFactor = speedFactor;initializeOnly;SFFloat;1
	isBound = isBound;outputOnly;SFBool;
	bindTime = bindTime;outputOnly;SFTime;
	containerField = children
	componentName = Geospatial

[ForcePhysicsModel]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	force = force;inputOutput;SFVec3f;0 -9.8 0
	containerField = physics
	componentName = ParticleSystems

[Group]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Grouping

[HAnimDisplacer]
	metadata = metadata;inputOutput;SFNode;NULL
	coordIndex = coordIndex;inputOutput;MFInt32;[ ]
	displacements = displacements;inputOutput;MFVec3f;[ ]
	name = name;inputOutput;SFString;""
	weight = weight;inputOutput;SFFloat;0
	containerField = displacers
	componentName = H-Anim

[HAnimHumanoid]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	center = center;inputOutput;SFVec3f;0 0 0
	info = info;inputOutput;MFString;[ ]
	joints = joints;inputOutput;MFNode;[ ]
	name = name;inputOutput;SFString;""
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	scaleOrientation = scaleOrientation;inputOutput;SFRotation;0 0 1 0
	segments = segments;inputOutput;MFNode;[ ]
	sites = sites;inputOutput;MFNode;[ ]
	skeleton = skeleton;inputOutput;MFNode;[ ]
	skin = skin;inputOutput;MFNode;[ ]
	skinCoord = skinCoord;inputOutput;SFNode;NULL
	skinNormal = skinNormal;inputOutput;SFNode;NULL
	translation = translation;inputOutput;SFVec3f;0 0 0
	version = version;inputOutput;SFString;""
	viewpoints = viewpoints;inputOutput;MFNode;[ ]
	containerField = children
	componentName = H-Anim

[HAnimJoint]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	center = center;inputOutput;SFVec3f;0 0 0
	displacers = displacers;inputOutput;MFNode;[ ]
	limitOrientation = limitOrientation;inputOutput;SFRotation;0 0 1 0
	llimit = llimit;inputOutput;MFFloat;[ ]
	name = name;inputOutput;SFString;""
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	scaleOrientation = scaleOrientation;inputOutput;SFRotation;0 0 1 0
	skinCoordIndex = skinCoordIndex;inputOutput;MFInt32;[ ]
	skinCoordWeight = skinCoordWeight;inputOutput;MFFloat;[ ]
	stiffness = stiffness;inputOutput;MFFloat;[ 0, 0, 0 ]
	translation = translation;inputOutput;SFVec3f;0 0 0
	ulimit = ulimit;inputOutput;MFFloat;[ ]
	containerField = children
	componentName = H-Anim

[HAnimSegment]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	centerOfMass = centerOfMass;inputOutput;SFVec3f;0 0 0
	coord = coord;inputOutput;SFNode;NULL
	displacers = displacers;inputOutput;MFNode;[ ]
	mass = mass;inputOutput;SFFloat;0
	momentsOfInertia = momentsOfInertia;inputOutput;MFFloat;[ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
	name = name;inputOutput;SFString;""
	containerField = children
	componentName = H-Anim

[HAnimSite]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	center = center;inputOutput;SFVec3f;0 0 0
	name = name;inputOutput;SFString;""
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	scaleOrientation = scaleOrientation;inputOutput;SFRotation;0 0 1 0
	translation = translation;inputOutput;SFVec3f;0 0 0
	containerField = children
	componentName = H-Anim

[ImageCubeMapTexture]
	metadata = metadata;inputOutput;SFNode;NULL
	url = url;inputOutput;MFString;[ ]
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	containerField = texture
	componentName = CubeMapTexturing

[ImageTexture]
	metadata = metadata;inputOutput;SFNode;NULL
	url = url;inputOutput;MFString;[ ]
	repeatS = repeatS;initializeOnly;SFBool;TRUE
	repeatT = repeatT;initializeOnly;SFBool;TRUE
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	containerField = texture
	componentName = Texturing

[ImageTexture3D]
	metadata = metadata;inputOutput;SFNode;NULL
	url = url;inputOutput;MFString;[ ]
	repeatS = repeatS;initializeOnly;SFBool;FALSE
	repeatT = repeatT;initializeOnly;SFBool;FALSE
	repeatR = repeatR;initializeOnly;SFBool;FALSE
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	containerField = texture
	componentName = Texturing3D

[IndexedFaceSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	convex = convex;initializeOnly;SFBool;TRUE
	creaseAngle = creaseAngle;initializeOnly;SFFloat;0
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	colorIndex = colorIndex;inputOutput;MFInt32;[ ]
	texCoordIndex = texCoordIndex;inputOutput;MFInt32;[ ]
	normalIndex = normalIndex;inputOutput;MFInt32;[ ]
	coordIndex = coordIndex;inputOutput;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Geometry3D

[IndexedLineSet]
	metadata = metadata;inputOutput;SFNode;NULL
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	colorIndex = colorIndex;inputOutput;MFInt32;[ ]
	coordIndex = coordIndex;inputOutput;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[IndexedQuadSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	index = index;inputOutput;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = CADGeometry

[IndexedTriangleFanSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	index = index;initializeOnly;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[IndexedTriangleSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	index = index;initializeOnly;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[IndexedTriangleStripSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	index = index;initializeOnly;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[Inline]
	metadata = metadata;inputOutput;SFNode;NULL
	load = load;inputOutput;SFBool;TRUE
	url = url;inputOutput;MFString;[ ]
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	containerField = children
	componentName = Networking

[IntegerSequencer]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	previous = previous;inputOnly;SFBool;
	next = next;inputOnly;SFBool;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFInt32;[ ]
	value_changed = value_changed;outputOnly;SFInt32;
	containerField = children
	componentName = EventUtilities

[IntegerTrigger]
	metadata = metadata;inputOutput;SFNode;NULL
	set_boolean = set_boolean;inputOnly;SFBool;
	integerKey = integerKey;inputOutput;SFInt32;0
	triggerValue = triggerValue;outputOnly;SFInt32;
	containerField = children
	componentName = EventUtilities

[KeySensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	controlKey = controlKey;outputOnly;SFBool;
	shiftKey = shiftKey;outputOnly;SFBool;
	altKey = altKey;outputOnly;SFBool;
	actionKeyPress = actionKeyPress;outputOnly;SFInt32;
	actionKeyRelease = actionKeyRelease;outputOnly;SFInt32;
	keyPress = keyPress;outputOnly;SFString;
	keyRelease = keyRelease;outputOnly;SFString;
	isActive = isActive;outputOnly;SFBool;
	containerField = children
	componentName = KeyDeviceSensor

[LOD]
	metadata = metadata;inputOutput;SFNode;NULL
	forceTransitions = forceTransitions;initializeOnly;SFBool;FALSE
	center = center;initializeOnly;SFVec3f;0 0 0
	range = range;initializeOnly;MFFloat;[ ]
	level_changed = level_changed;outputOnly;SFInt32;
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Navigation

[Layer]
	metadata = metadata;inputOutput;SFNode;NULL
	isPickable = isPickable;inputOutput;SFBool;TRUE
	viewport = viewport;inputOutput;SFNode;NULL
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = layers
	componentName = Layering

[LayerSet]
	metadata = metadata;inputOutput;SFNode;NULL
	activeLayer = activeLayer;inputOutput;SFInt32;0
	order = order;inputOutput;MFInt32;0
	layers = layers;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Layering

[Layout]
	metadata = metadata;inputOutput;SFNode;NULL
	align = align;inputOutput;MFString;[ "CENTER", "CENTER" ]
	offsetUnits = offsetUnits;inputOutput;MFString;[ "WORLD", "WORLD" ]
	offset = offset;inputOutput;MFFloat;[ 0, 0 ]
	sizeUnits = sizeUnits;inputOutput;MFString;[ "WORLD", "WORLD" ]
	size = size;inputOutput;MFFloat;[ 1, 1 ]
	scaleMode = scaleMode;inputOutput;MFString;[ "NONE", "NONE" ]
	containerField = layout
	componentName = Layout

[LayoutGroup]
	metadata = metadata;inputOutput;SFNode;NULL
	layout = layout;inputOutput;SFNode;NULL
	viewport = viewport;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Layout

[LayoutLayer]
	metadata = metadata;inputOutput;SFNode;NULL
	isPickable = isPickable;inputOutput;SFBool;TRUE
	layout = layout;inputOutput;SFNode;NULL
	viewport = viewport;inputOutput;SFNode;NULL
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = layers
	componentName = Layout

[LinePickSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	objectType = objectType;inputOutput;MFString;"ALL"
	pickingGeometry = pickingGeometry;inputOutput;SFNode;NULL
	pickTarget = pickTarget;inputOutput;MFNode;[ ]
	pickedGeometry = pickedGeometry;outputOnly;MFNode;
	intersectionType = intersectionType;initializeOnly;SFString;"BOUNDS"
	sortOrder = sortOrder;initializeOnly;SFString;"CLOSEST"
	pickedNormal = pickedNormal;outputOnly;MFVec3f;
	pickedPoint = pickedPoint;outputOnly;MFVec3f;
	pickedTextureCoordinate = pickedTextureCoordinate;outputOnly;MFVec3f;
	containerField = children
	componentName = Picking

[LineProperties]
	metadata = metadata;inputOutput;SFNode;NULL
	applied = applied;inputOutput;SFBool;TRUE
	linetype = linetype;inputOutput;SFInt32;1
	linewidthScaleFactor = linewidthScaleFactor;inputOutput;SFFloat;0
	containerField = lineProperties
	componentName = Shape

[LineSet]
	metadata = metadata;inputOutput;SFNode;NULL
	vertexCount = vertexCount;inputOutput;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[LoadSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	timeOut = timeOut;inputOutput;SFTime;0
	isActive = isActive;outputOnly;SFBool;
	isLoaded = isLoaded;outputOnly;SFBool;
	progress = progress;outputOnly;SFFloat;
	loadTime = loadTime;outputOnly;SFTime;
	watchList = watchList;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Networking

[LocalFog]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	fogType = fogType;inputOutput;SFString;"LINEAR"
	color = color;inputOutput;SFColor;1 1 1
	visibilityRange = visibilityRange;inputOutput;SFFloat;0
	containerField = children
	componentName = EnvironmentalEffects

[Material]
	metadata = metadata;inputOutput;SFNode;NULL
	ambientIntensity = ambientIntensity;inputOutput;SFFloat;0.2
	diffuseColor = diffuseColor;inputOutput;SFColor;0.8 0.8 0.8
	specularColor = specularColor;inputOutput;SFColor;0 0 0
	emissiveColor = emissiveColor;inputOutput;SFColor;0 0 0
	shininess = shininess;inputOutput;SFFloat;0.2
	transparency = transparency;inputOutput;SFFloat;0
	containerField = material
	componentName = Shape

[Matrix3VertexAttribute]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;initializeOnly;SFString;""
	value = value;inputOutput;MFMatrix3f;[ ]
	containerField = attrib
	componentName = Shaders

[Matrix4VertexAttribute]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;initializeOnly;SFString;""
	value = value;inputOutput;MFMatrix4f;[ ]
	containerField = attrib
	componentName = Shaders

[MetadataBoolean]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	reference = reference;inputOutput;SFString;""
	value = value;inputOutput;MFBool;[ ]
	containerField = metadata
	componentName = Core

[MetadataDouble]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	reference = reference;inputOutput;SFString;""
	value = value;inputOutput;MFDouble;[ ]
	containerField = metadata
	componentName = Core

[MetadataFloat]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	reference = reference;inputOutput;SFString;""
	value = value;inputOutput;MFFloat;[ ]
	containerField = metadata
	componentName = Core

[MetadataInteger]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	reference = reference;inputOutput;SFString;""
	value = value;inputOutput;MFInt32;[ ]
	containerField = metadata
	componentName = Core

[MetadataSet]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	reference = reference;inputOutput;SFString;""
	value = value;inputOutput;MFNode;[ ]
	containerField = metadata
	componentName = Core

[MetadataString]
	metadata = metadata;inputOutput;SFNode;NULL
	name = name;inputOutput;SFString;""
	reference = reference;inputOutput;SFString;""
	value = value;inputOutput;MFString;[ ]
	containerField = metadata
	componentName = Core

[MotorJoint]
	metadata = metadata;inputOutput;SFNode;NULL
	body1 = body1;inputOutput;SFNode;NULL
	body2 = body2;inputOutput;SFNode;NULL
	forceOutput = forceOutput;inputOutput;MFString;"NONE"
	axis1Angle = axis1Angle;inputOutput;SFFloat;0
	axis1Torque = axis1Torque;inputOutput;SFFloat;0
	axis2Angle = axis2Angle;inputOutput;SFFloat;0
	axis2Torque = axis2Torque;inputOutput;SFFloat;0
	axis3Angle = axis3Angle;inputOutput;SFFloat;0
	axis3Torque = axis3Torque;inputOutput;SFFloat;0
	enabledAxes = enabledAxes;inputOutput;SFInt32;1
	motor1Axis = motor1Axis;inputOutput;SFVec3f;0 0 0
	motor2Axis = motor2Axis;inputOutput;SFVec3f;0 0 0
	motor3Axis = motor3Axis;inputOutput;SFVec3f;0 0 0
	stop1Bounce = stop1Bounce;inputOutput;SFFloat;0
	stop1ErrorCorrection = stop1ErrorCorrection;inputOutput;SFFloat;0.8
	stop2Bounce = stop2Bounce;inputOutput;SFFloat;0
	stop2ErrorCorrection = stop2ErrorCorrection;inputOutput;SFFloat;0.8
	stop3Bounce = stop3Bounce;inputOutput;SFFloat;0
	stop3ErrorCorrection = stop3ErrorCorrection;inputOutput;SFFloat;0.8
	motor1Angle = motor1Angle;outputOnly;SFFloat;
	motor1AngleRate = motor1AngleRate;outputOnly;SFFloat;
	motor2Angle = motor2Angle;outputOnly;SFFloat;
	motor2AngleRate = motor2AngleRate;outputOnly;SFFloat;
	motor3Angle = motor3Angle;outputOnly;SFFloat;
	motor3AngleRate = motor3AngleRate;outputOnly;SFFloat;
	autoCalc = autoCalc;initializeOnly;SFBool;FALSE
	containerField = joints
	componentName = RigidBodyPhysics

[MovieTexture]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	description = description;inputOutput;SFString;""
	url = url;inputOutput;MFString;[ ]
	speed = speed;inputOutput;SFFloat;1
	pitch = pitch;inputOutput;SFFloat;1
	loop = loop;inputOutput;SFBool;FALSE
	startTime = startTime;inputOutput;SFTime;0
	resumeTime = resumeTime;inputOutput;SFTime;0
	pauseTime = pauseTime;inputOutput;SFTime;0
	stopTime = stopTime;inputOutput;SFTime;0
	isPaused = isPaused;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	cycleTime = cycleTime;outputOnly;SFTime;
	elapsedTime = elapsedTime;outputOnly;SFTime;
	duration_changed = duration_changed;outputOnly;SFTime;
	repeatS = repeatS;initializeOnly;SFBool;TRUE
	repeatT = repeatT;initializeOnly;SFBool;TRUE
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	containerField = texture
	componentName = Texturing

[MultiTexture]
	metadata = metadata;inputOutput;SFNode;NULL
	color = color;inputOutput;SFColor;1 1 1
	alpha = alpha;inputOutput;SFFloat;1
	mode = mode;inputOutput;MFString;[ ]
	source = source;inputOutput;MFString;[ ]
	function = function;inputOutput;MFString;[ ]
	texture = texture;inputOutput;MFNode;[ ]
	containerField = texture
	componentName = Texturing

[MultiTextureCoordinate]
	metadata = metadata;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;MFNode;[ ]
	containerField = texCoord
	componentName = Texturing

[MultiTextureTransform]
	metadata = metadata;inputOutput;SFNode;NULL
	textureTransform = textureTransform;inputOutput;MFNode;[ ]
	containerField = textureTransform
	componentName = Texturing

[NavigationInfo]
	metadata = metadata;inputOutput;SFNode;NULL
	set_bind = set_bind;inputOnly;SFBool;
	type = type;inputOutput;MFString;[ "EXAMINE", "ANY" ]
	avatarSize = avatarSize;inputOutput;MFFloat;[ 0.25, 1.6, 0.75 ]
	speed = speed;inputOutput;SFFloat;1
	headlight = headlight;inputOutput;SFBool;TRUE
	visibilityLimit = visibilityLimit;inputOutput;SFFloat;0
	transitionType = transitionType;inputOutput;MFString;"LINEAR"
	transitionTime = transitionTime;inputOutput;SFTime;1
	transitionComplete = transitionComplete;outputOnly;SFBool;
	isBound = isBound;outputOnly;SFBool;
	bindTime = bindTime;outputOnly;SFTime;
	containerField = children
	componentName = Navigation

[Normal]
	metadata = metadata;inputOutput;SFNode;NULL
	vector = vector;inputOutput;MFVec3f;[ ]
	containerField = normal
	componentName = Rendering

[NormalInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec3f;[ ]
	value_changed = value_changed;outputOnly;MFVec3f;
	containerField = children
	componentName = Interpolation

[NurbsCurve]
	metadata = metadata;inputOutput;SFNode;NULL
	controlPoint = controlPoint;inputOutput;SFNode;NULL
	tessellation = tessellation;inputOutput;SFInt32;0
	weight = weight;inputOutput;MFDouble;[ ]
	closed = closed;initializeOnly;SFBool;FALSE
	knot = knot;initializeOnly;MFDouble;[ ]
	order = order;initializeOnly;SFInt32;3
	containerField = geometry
	componentName = NURBS

[NurbsCurve2D]
	metadata = metadata;inputOutput;SFNode;NULL
	tessellation = tessellation;inputOutput;SFInt32;0
	closed = closed;initializeOnly;SFBool;FALSE
	order = order;initializeOnly;SFInt32;3
	knot = knot;initializeOnly;MFDouble;[ ]
	weight = weight;inputOutput;MFDouble;[ ]
	controlPoint = controlPoint;inputOutput;MFVec2d;[ ]
	containerField = children
	componentName = NURBS

[NurbsOrientationInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	controlPoint = controlPoint;inputOutput;SFNode;NULL
	knot = knot;inputOutput;MFDouble;[ ]
	order = order;inputOutput;SFInt32;3
	weight = weight;inputOutput;MFDouble;[ ]
	value_changed = value_changed;outputOnly;SFRotation;
	containerField = children
	componentName = NURBS

[NurbsPatchSurface]
	metadata = metadata;inputOutput;SFNode;NULL
	uTessellation = uTessellation;inputOutput;SFInt32;0
	vTessellation = vTessellation;inputOutput;SFInt32;0
	uClosed = uClosed;initializeOnly;SFBool;FALSE
	vClosed = vClosed;initializeOnly;SFBool;FALSE
	solid = solid;initializeOnly;SFBool;TRUE
	uOrder = uOrder;initializeOnly;SFInt32;3
	vOrder = vOrder;initializeOnly;SFInt32;3
	uDimension = uDimension;initializeOnly;SFInt32;0
	vDimension = vDimension;initializeOnly;SFInt32;0
	uKnot = uKnot;initializeOnly;MFDouble;[ ]
	vKnot = vKnot;initializeOnly;MFDouble;[ ]
	weight = weight;inputOutput;MFDouble;[ ]
	texCoord = texCoord;inputOutput;SFNode;NULL
	controlPoint = controlPoint;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = NURBS

[NurbsPositionInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	controlPoint = controlPoint;inputOutput;SFNode;NULL
	knot = knot;inputOutput;MFDouble;[ ]
	order = order;inputOutput;SFInt32;3
	weight = weight;inputOutput;MFDouble;[ ]
	value_changed = value_changed;outputOnly;SFVec3f;
	containerField = children
	componentName = NURBS

[NurbsSet]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addGeometry = addGeometry;inputOnly;MFNode;
	removeGeometry = removeGeometry;inputOnly;MFNode;
	geometry = geometry;inputOutput;MFNode;[ ]
	tessellationScale = tessellationScale;inputOutput;SFFloat;1
	containerField = children
	componentName = NURBS

[NurbsSurfaceInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFVec2f;
	controlPoint = controlPoint;inputOutput;SFNode;NULL
	weight = weight;inputOutput;MFDouble;[ ]
	position_changed = position_changed;outputOnly;SFVec3f;
	normal_changed = normal_changed;outputOnly;SFVec3f;
	uDimension = uDimension;initializeOnly;SFInt32;0
	uKnot = uKnot;initializeOnly;MFDouble;[ ]
	uOrder = uOrder;initializeOnly;SFInt32;3
	vDimension = vDimension;initializeOnly;SFInt32;0
	vKnot = vKnot;initializeOnly;MFDouble;[ ]
	vOrder = vOrder;initializeOnly;SFInt32;3
	containerField = children
	componentName = NURBS

[NurbsSweptSurface]
	metadata = metadata;inputOutput;SFNode;NULL
	crossSectionCurve = crossSectionCurve;inputOutput;SFNode;NULL
	trajectoryCurve = trajectoryCurve;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = NURBS

[NurbsSwungSurface]
	metadata = metadata;inputOutput;SFNode;NULL
	profileCurve = profileCurve;inputOutput;SFNode;NULL
	trajectoryCurve = trajectoryCurve;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = NURBS

[NurbsTextureCoordinate]
	metadata = metadata;inputOutput;SFNode;NULL
	controlPoint = controlPoint;inputOutput;MFVec2f;[ ]
	weight = weight;inputOutput;MFFloat;[ ]
	uDimension = uDimension;initializeOnly;SFInt32;0
	uKnot = uKnot;initializeOnly;MFDouble;[ ]
	uOrder = uOrder;initializeOnly;SFInt32;3
	vDimension = vDimension;initializeOnly;SFInt32;0
	vKnot = vKnot;initializeOnly;MFDouble;[ ]
	vOrder = vOrder;initializeOnly;SFInt32;3
	containerField = texCoord
	componentName = NURBS

[NurbsTrimmedSurface]
	metadata = metadata;inputOutput;SFNode;NULL
	uTessellation = uTessellation;inputOutput;SFInt32;0
	vTessellation = vTessellation;inputOutput;SFInt32;0
	uClosed = uClosed;initializeOnly;SFBool;FALSE
	vClosed = vClosed;initializeOnly;SFBool;FALSE
	solid = solid;initializeOnly;SFBool;TRUE
	uOrder = uOrder;initializeOnly;SFInt32;3
	vOrder = vOrder;initializeOnly;SFInt32;3
	uDimension = uDimension;initializeOnly;SFInt32;0
	vDimension = vDimension;initializeOnly;SFInt32;0
	uKnot = uKnot;initializeOnly;MFDouble;[ ]
	vKnot = vKnot;initializeOnly;MFDouble;[ ]
	weight = weight;inputOutput;MFDouble;[ ]
	texCoord = texCoord;inputOutput;SFNode;NULL
	controlPoint = controlPoint;inputOutput;SFNode;NULL
	addTrimmingContour = addTrimmingContour;inputOnly;MFNode;
	removeTrimmingContour = removeTrimmingContour;inputOnly;MFNode;
	trimmingContour = trimmingContour;inputOutput;MFNode;[ ]
	containerField = geometry
	componentName = NURBS

[OrientationChaser]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFRotation;
	set_destination = set_destination;inputOnly;SFRotation;
	initialValue = initialValue;initializeOnly;SFRotation;0 0 1 0
	initialDestination = initialDestination;initializeOnly;SFRotation;0 0 1 0
	duration = duration;initializeOnly;SFTime;1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFRotation;
	containerField = children
	componentName = Followers

[OrientationDamper]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFRotation;
	set_destination = set_destination;inputOnly;SFRotation;
	initialValue = initialValue;initializeOnly;SFRotation;0 0 1 0
	initialDestination = initialDestination;initializeOnly;SFRotation;0 0 1 0
	order = order;initializeOnly;SFInt32;3
	tau = tau;inputOutput;SFTime;0.3
	tolerance = tolerance;inputOutput;SFFloat;-1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFRotation;
	containerField = children
	componentName = Followers

[OrientationInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFRotation;[ ]
	value_changed = value_changed;outputOnly;SFRotation;
	containerField = children
	componentName = Interpolation

[OrthoViewpoint]
	metadata = metadata;inputOutput;SFNode;NULL
	set_bind = set_bind;inputOnly;SFBool;
	description = description;inputOutput;SFString;""
	position = position;inputOutput;SFVec3f;0 0 10
	orientation = orientation;inputOutput;SFRotation;0 0 1 0
	centerOfRotation = centerOfRotation;inputOutput;SFVec3f;0 0 0
	fieldOfView = fieldOfView;inputOutput;MFFloat;[ -1, -1, 1, 1 ]
	jump = jump;inputOutput;SFBool;TRUE
	retainUserOffsets = retainUserOffsets;inputOutput;SFBool;FALSE
	isBound = isBound;outputOnly;SFBool;
	bindTime = bindTime;outputOnly;SFTime;
	containerField = children
	componentName = Navigation

[PackagedShader]
	metadata = metadata;inputOutput;SFNode;NULL
	url = url;inputOutput;MFString;[ ]
	activate = activate;inputOnly;SFBool;
	isSelected = isSelected;outputOnly;SFBool;
	isValid = isValid;outputOnly;SFBool;
	language = language;initializeOnly;SFString;""
	containerField = shaders
	componentName = Shaders

[ParticleSystem]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	geometryType = geometryType;initializeOnly;SFString;"QUAD"
	maxParticles = maxParticles;inputOutput;SFInt32;200
	createParticles = createParticles;inputOutput;SFBool;TRUE
	particleLifetime = particleLifetime;inputOutput;SFFloat;5
	lifetimeVariation = lifetimeVariation;inputOutput;SFFloat;0.25
	particleSize = particleSize;inputOutput;SFVec2f;0.02 0.02
	emitter = emitter;initializeOnly;SFNode;NULL
	physics = physics;initializeOnly;MFNode;[ ]
	colorKey = colorKey;initializeOnly;MFFloat;[ ]
	colorRamp = colorRamp;initializeOnly;SFNode;NULL
	texCoordKey = texCoordKey;initializeOnly;MFFloat;[ ]
	texCoordRamp = texCoordRamp;initializeOnly;SFNode;NULL
	isActive = isActive;outputOnly;SFBool;
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	appearance = appearance;inputOutput;SFNode;NULL
	geometry = geometry;inputOutput;SFNode;NULL
	containerField = children
	componentName = ParticleSystems

[PickableGroup]
	metadata = metadata;inputOutput;SFNode;NULL
	pickable = pickable;inputOutput;SFBool;TRUE
	objectType = objectType;inputOutput;MFString;"ALL"
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Picking

[PixelTexture]
	metadata = metadata;inputOutput;SFNode;NULL
	image = image;inputOutput;SFImage;0 0 0
	repeatS = repeatS;initializeOnly;SFBool;TRUE
	repeatT = repeatT;initializeOnly;SFBool;TRUE
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	containerField = texture
	componentName = Texturing

[PixelTexture3D]
	metadata = metadata;inputOutput;SFNode;NULL
	repeatS = repeatS;initializeOnly;SFBool;FALSE
	repeatT = repeatT;initializeOnly;SFBool;FALSE
	repeatR = repeatR;initializeOnly;SFBool;FALSE
	image = image;inputOutput;MFInt32;[ 0, 0, 0, 0 ]
	textureProperties = textureProperties;initializeOnly;SFNode;NULL
	containerField = texture
	componentName = Texturing3D

[PlaneSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	description = description;inputOutput;SFString;""
	axisRotation = axisRotation;inputOutput;SFRotation;0 0 1 0
	autoOffset = autoOffset;inputOutput;SFBool;TRUE
	offset = offset;inputOutput;SFVec3f;0 0 0
	minPosition = minPosition;inputOutput;SFVec2f;0 0
	maxPosition = maxPosition;inputOutput;SFVec2f;-1 -1
	trackPoint_changed = trackPoint_changed;outputOnly;SFVec3f;
	translation_changed = translation_changed;outputOnly;SFVec3f;
	isOver = isOver;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	containerField = children
	componentName = PointingDeviceSensor

[PointEmitter]
	metadata = metadata;inputOutput;SFNode;NULL
	position = position;inputOutput;SFVec3f;0 0 0
	direction = direction;inputOutput;SFVec3f;0 1 0
	speed = speed;inputOutput;SFFloat;0
	variation = variation;inputOutput;SFFloat;0.25
	mass = mass;initializeOnly;SFFloat;0
	surfaceArea = surfaceArea;initializeOnly;SFFloat;0
	containerField = emitter
	componentName = ParticleSystems

[PointLight]
	metadata = metadata;inputOutput;SFNode;NULL
	global = global;inputOutput;SFBool;TRUE
	on = on;inputOutput;SFBool;TRUE
	color = color;inputOutput;SFColor;1 1 1
	intensity = intensity;inputOutput;SFFloat;1
	ambientIntensity = ambientIntensity;inputOutput;SFFloat;0
	attenuation = attenuation;inputOutput;SFVec3f;1 0 0
	location = location;inputOutput;SFVec3f;0 0 0
	radius = radius;inputOutput;SFFloat;100
	shadowIntensity = shadowIntensity;inputOutput;SFFloat;0
	shadowMapSize = shadowMapSize;inputOutput;SFInt32;1024
	containerField = children
	componentName = Lighting

[PointPickSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	objectType = objectType;inputOutput;MFString;"ALL"
	pickingGeometry = pickingGeometry;inputOutput;SFNode;NULL
	pickTarget = pickTarget;inputOutput;MFNode;[ ]
	pickedGeometry = pickedGeometry;outputOnly;MFNode;
	intersectionType = intersectionType;initializeOnly;SFString;"BOUNDS"
	sortOrder = sortOrder;initializeOnly;SFString;"CLOSEST"
	pickedPoint = pickedPoint;outputOnly;MFVec3f;
	containerField = children
	componentName = Picking

[PointSet]
	metadata = metadata;inputOutput;SFNode;NULL
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[Polyline2D]
	metadata = metadata;inputOutput;SFNode;NULL
	lineSegments = lineSegments;inputOutput;MFVec2f;[ ]
	containerField = geometry
	componentName = Geometry2D

[PolylineEmitter]
	metadata = metadata;inputOutput;SFNode;NULL
	direction = direction;inputOutput;SFVec3f;0 1 0
	speed = speed;inputOutput;SFFloat;0
	variation = variation;inputOutput;SFFloat;0.25
	mass = mass;initializeOnly;SFFloat;0
	surfaceArea = surfaceArea;initializeOnly;SFFloat;0
	coordIndex = coordIndex;inputOutput;MFInt32;-1
	coord = coord;inputOutput;SFNode;NULL
	containerField = emitter
	componentName = ParticleSystems

[Polypoint2D]
	metadata = metadata;inputOutput;SFNode;NULL
	point = point;inputOutput;MFVec2f;[ ]
	containerField = geometry
	componentName = Geometry2D

[PositionChaser]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFVec3f;
	set_destination = set_destination;inputOnly;SFVec3f;
	initialValue = initialValue;initializeOnly;SFVec3f;0 0 0
	initialDestination = initialDestination;initializeOnly;SFVec3f;0 0 0
	duration = duration;initializeOnly;SFTime;1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFVec3f;
	containerField = children
	componentName = Followers

[PositionChaser2D]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFVec2f;
	set_destination = set_destination;inputOnly;SFVec2f;
	initialValue = initialValue;initializeOnly;SFVec2f;0 0
	initialDestination = initialDestination;initializeOnly;SFVec2f;0 0
	duration = duration;initializeOnly;SFTime;1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFVec2f;
	containerField = children
	componentName = Followers

[PositionDamper]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFVec3f;
	set_destination = set_destination;inputOnly;SFVec3f;
	initialValue = initialValue;initializeOnly;SFVec3f;0 0 0
	initialDestination = initialDestination;initializeOnly;SFVec3f;0 0 0
	order = order;initializeOnly;SFInt32;3
	tolerance = tolerance;inputOutput;SFFloat;-1
	tau = tau;inputOutput;SFTime;0.3
	value_changed = value_changed;outputOnly;SFVec3f;
	isActive = isActive;outputOnly;SFBool;
	containerField = children
	componentName = Followers

[PositionDamper2D]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFVec2f;
	set_destination = set_destination;inputOnly;SFVec2f;
	initialValue = initialValue;initializeOnly;SFVec2f;0 0
	initialDestination = initialDestination;initializeOnly;SFVec2f;0 0
	order = order;initializeOnly;SFInt32;3
	tau = tau;inputOutput;SFTime;0.3
	tolerance = tolerance;inputOutput;SFFloat;-1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFVec2f;
	containerField = children
	componentName = Followers

[PositionInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec3f;[ ]
	value_changed = value_changed;outputOnly;SFVec3f;
	containerField = children
	componentName = Interpolation

[PositionInterpolator2D]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec2f;[ ]
	value_changed = value_changed;outputOnly;SFVec2f;
	containerField = children
	componentName = Interpolation

[PrimitivePickSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	objectType = objectType;inputOutput;MFString;"ALL"
	pickingGeometry = pickingGeometry;inputOutput;SFNode;NULL
	pickTarget = pickTarget;inputOutput;MFNode;[ ]
	pickedGeometry = pickedGeometry;outputOnly;MFNode;
	intersectionType = intersectionType;initializeOnly;SFString;"BOUNDS"
	sortOrder = sortOrder;initializeOnly;SFString;"CLOSEST"
	containerField = children
	componentName = Picking

[ProgramShader]
	metadata = metadata;inputOutput;SFNode;NULL
	activate = activate;inputOnly;SFBool;
	isSelected = isSelected;outputOnly;SFBool;
	isValid = isValid;outputOnly;SFBool;
	language = language;initializeOnly;SFString;""
	programs = programs;inputOutput;MFNode;[ ]
	containerField = shaders
	componentName = Shaders

[ProximitySensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	size = size;inputOutput;SFVec3f;0 0 0
	center = center;inputOutput;SFVec3f;0 0 0
	enterTime = enterTime;outputOnly;SFTime;
	exitTime = exitTime;outputOnly;SFTime;
	isActive = isActive;outputOnly;SFBool;
	position_changed = position_changed;outputOnly;SFVec3f;
	orientation_changed = orientation_changed;outputOnly;SFRotation;
	centerOfRotation_changed = centerOfRotation_changed;outputOnly;SFVec3f;
	containerField = children
	componentName = EnvironmentalSensor

[QuadSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = CADGeometry

[ReceiverPdu]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	address = address;inputOutput;SFString;"localhost"
	applicationID = applicationID;inputOutput;SFInt32;1
	entityID = entityID;inputOutput;SFInt32;0
	multicastRelayHost = multicastRelayHost;inputOutput;SFString;""
	multicastRelayPort = multicastRelayPort;inputOutput;SFInt32;0
	networkMode = networkMode;inputOutput;SFString;"standAlone"
	port = port;inputOutput;SFInt32;0
	radioID = radioID;inputOutput;SFInt32;0
	readInterval = readInterval;inputOutput;SFFloat;0.1
	receivedPower = receivedPower;inputOutput;SFFloat;0
	receiverState = receiverState;inputOutput;SFInt32;0
	rtpHeaderExpected = rtpHeaderExpected;inputOutput;SFBool;FALSE
	siteID = siteID;inputOutput;SFInt32;0
	transmitterApplicationID = transmitterApplicationID;inputOutput;SFInt32;1
	transmitterEntityID = transmitterEntityID;inputOutput;SFInt32;0
	transmitterRadioID = transmitterRadioID;inputOutput;SFInt32;0
	transmitterSiteID = transmitterSiteID;inputOutput;SFInt32;0
	whichGeometry = whichGeometry;inputOutput;SFInt32;1
	writeInterval = writeInterval;inputOutput;SFFloat;1
	isNetworkReader = isNetworkReader;outputOnly;SFBool;
	isNetworkWriter = isNetworkWriter;outputOnly;SFBool;
	isRtpHeaderHeard = isRtpHeaderHeard;outputOnly;SFBool;
	isStandAlone = isStandAlone;outputOnly;SFBool;
	timestamp = timestamp;outputOnly;SFTime;
	containerField = children
	componentName = DIS

[Rectangle2D]
	metadata = metadata;inputOutput;SFNode;NULL
	size = size;initializeOnly;SFVec2f;2 2
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry2D

[RigidBody]
	metadata = metadata;inputOutput;SFNode;NULL
	angularDampingFactor = angularDampingFactor;inputOutput;SFFloat;0.001
	angularVelocity = angularVelocity;inputOutput;SFVec3f;0 0 0
	autoDamp = autoDamp;inputOutput;SFBool;FALSE
	autoDisable = autoDisable;inputOutput;SFBool;FALSE
	centerOfMass = centerOfMass;inputOutput;SFVec3f;0 0 0
	disableAngularSpeed = disableAngularSpeed;inputOutput;SFFloat;0
	disableLinearSpeed = disableLinearSpeed;inputOutput;SFFloat;0
	disableTime = disableTime;inputOutput;SFFloat;0
	enabled = enabled;inputOutput;SFBool;TRUE
	finiteRotationAxis = finiteRotationAxis;inputOutput;SFVec3f;0 0 0
	fixed = fixed;inputOutput;SFBool;FALSE
	forces = forces;inputOutput;MFVec3f;[ ]
	geometry = geometry;inputOutput;MFNode;[ ]
	inertia = inertia;inputOutput;SFMatrix3f;1 0 0 0 1 0 0 0 1
	containerField = bodies
	componentName = RigidBodyPhysics

[RigidBodyCollection]
	metadata = metadata;inputOutput;SFNode;NULL
	set_contacts = set_contacts;inputOnly;MFNode;
	autoDisable = autoDisable;inputOutput;SFBool;FALSE
	bodies = bodies;inputOutput;MFNode;[ ]
	constantForceMix = constantForceMix;inputOutput;SFFloat;0.0001
	contactSurfaceThickness = contactSurfaceThickness;inputOutput;SFFloat;0
	disableAngularSpeed = disableAngularSpeed;inputOutput;SFFloat;0
	disableLinearSpeed = disableLinearSpeed;inputOutput;SFFloat;0
	disableTime = disableTime;inputOutput;SFFloat;0
	enabled = enabled;inputOutput;SFBool;TRUE
	errorCorrection = errorCorrection;inputOutput;SFFloat;0.8
	gravity = gravity;inputOutput;SFVec3f;0 -9.8 0
	iterations = iterations;inputOutput;SFInt32;10
	joints = joints;inputOutput;MFNode;[ ]
	maxCorrectionSpeed = maxCorrectionSpeed;inputOutput;SFFloat;-1
	preferAccuracy = preferAccuracy;inputOutput;SFBool;FALSE
	collider = collider;initializeOnly;SFNode;NULL
	containerField = children
	componentName = RigidBodyPhysics

[ScalarChaser]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFFloat;
	set_destination = set_destination;inputOnly;SFFloat;
	initialValue = initialValue;initializeOnly;SFFloat;0
	initialDestination = initialDestination;initializeOnly;SFFloat;0
	duration = duration;initializeOnly;SFTime;1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFFloat;
	containerField = children
	componentName = Followers

[ScalarDamper]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;SFFloat;
	set_destination = set_destination;inputOnly;SFFloat;
	initialValue = initialValue;initializeOnly;SFFloat;0
	initialDestination = initialDestination;initializeOnly;SFFloat;0
	order = order;initializeOnly;SFInt32;3
	tau = tau;inputOutput;SFTime;0.3
	tolerance = tolerance;inputOutput;SFFloat;-1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;SFFloat;
	containerField = children
	componentName = Followers

[ScalarInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFFloat;[ ]
	value_changed = value_changed;outputOnly;SFFloat;
	containerField = children
	componentName = Interpolation

[ScreenFontStyle]
	metadata = metadata;inputOutput;SFNode;NULL
	language = language;initializeOnly;SFString;""
	family = family;initializeOnly;MFString;"SERIF"
	style = style;initializeOnly;SFString;"PLAIN"
	pointSize = pointSize;initializeOnly;SFFloat;12
	spacing = spacing;initializeOnly;SFFloat;1
	horizontal = horizontal;initializeOnly;SFBool;TRUE
	leftToRight = leftToRight;initializeOnly;SFBool;TRUE
	topToBottom = topToBottom;initializeOnly;SFBool;TRUE
	justify = justify;initializeOnly;MFString;"BEGIN"
	containerField = fontStyle
	componentName = Layout

[ScreenGroup]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Layout

[Script]
	metadata = metadata;inputOutput;SFNode;NULL
	url = url;inputOutput;MFString;[ ]
	directOutput = directOutput;initializeOnly;SFBool;FALSE
	mustEvaluate = mustEvaluate;initializeOnly;SFBool;FALSE
	containerField = children
	componentName = Scripting

[ShaderPart]
	metadata = metadata;inputOutput;SFNode;NULL
	type = type;initializeOnly;SFString;"VERTEX"
	url = url;inputOutput;MFString;[ ]
	containerField = parts
	componentName = Shaders

[ShaderProgram]
	metadata = metadata;inputOutput;SFNode;NULL
	type = type;initializeOnly;SFString;"VERTEX"
	url = url;inputOutput;MFString;[ ]
	containerField = programs
	componentName = Shaders

[Shape]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	appearance = appearance;inputOutput;SFNode;NULL
	geometry = geometry;inputOutput;SFNode;NULL
	containerField = children
	componentName = Shape

[SignalPdu]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	address = address;inputOutput;SFString;"localhost"
	applicationID = applicationID;inputOutput;SFInt32;1
	data = data;inputOutput;MFInt32;[ ]
	dataLength = dataLength;inputOutput;SFInt32;0
	encodingScheme = encodingScheme;inputOutput;SFInt32;0
	entityID = entityID;inputOutput;SFInt32;0
	multicastRelayHost = multicastRelayHost;inputOutput;SFString;""
	multicastRelayPort = multicastRelayPort;inputOutput;SFInt32;0
	networkMode = networkMode;inputOutput;SFString;"standAlone"
	port = port;inputOutput;SFInt32;0
	radioID = radioID;inputOutput;SFInt32;0
	readInterval = readInterval;inputOutput;SFFloat;0.1
	rtpHeaderExpected = rtpHeaderExpected;inputOutput;SFBool;FALSE
	sampleRate = sampleRate;inputOutput;SFInt32;0
	samples = samples;inputOutput;SFInt32;0
	siteID = siteID;inputOutput;SFInt32;0
	tdlType = tdlType;inputOutput;SFInt32;0
	whichGeometry = whichGeometry;inputOutput;SFInt32;1
	writeInterval = writeInterval;inputOutput;SFFloat;1
	isNetworkReader = isNetworkReader;outputOnly;SFBool;
	isNetworkWriter = isNetworkWriter;outputOnly;SFBool;
	isRtpHeaderHeard = isRtpHeaderHeard;outputOnly;SFBool;
	isStandAlone = isStandAlone;outputOnly;SFBool;
	timestamp = timestamp;outputOnly;SFTime;
	containerField = children
	componentName = DIS

[SingleAxisHingeJoint]
	metadata = metadata;inputOutput;SFNode;NULL
	body1 = body1;inputOutput;SFNode;NULL
	body2 = body2;inputOutput;SFNode;NULL
	forceOutput = forceOutput;inputOutput;MFString;"NONE"
	anchorPoint = anchorPoint;inputOutput;SFVec3f;0 0 0
	axis = axis;inputOutput;SFVec3f;0 0 0
	maxAngle = maxAngle;inputOutput;SFFloat;0
	minAngle = minAngle;inputOutput;SFFloat;0
	stopBounce = stopBounce;inputOutput;SFFloat;0
	stopErrorCorrection = stopErrorCorrection;inputOutput;SFFloat;0.8
	angle = angle;outputOnly;SFFloat;
	angleRate = angleRate;outputOnly;SFFloat;
	body1AnchorPoint = body1AnchorPoint;outputOnly;SFVec3f;
	body2AnchorPoint = body2AnchorPoint;outputOnly;SFVec3f;
	containerField = joints
	componentName = RigidBodyPhysics

[SliderJoint]
	metadata = metadata;inputOutput;SFNode;NULL
	body1 = body1;inputOutput;SFNode;NULL
	body2 = body2;inputOutput;SFNode;NULL
	forceOutput = forceOutput;inputOutput;MFString;"NONE"
	axis = axis;inputOutput;SFVec3f;0 1 0
	maxSeparation = maxSeparation;inputOutput;SFFloat;1
	minSeparation = minSeparation;inputOutput;SFFloat;0
	stopBounce = stopBounce;inputOutput;SFFloat;0
	stopErrorCorrection = stopErrorCorrection;inputOutput;SFFloat;1
	separation = separation;outputOnly;SFFloat;
	separationRate = separationRate;outputOnly;SFFloat;
	containerField = joints
	componentName = RigidBodyPhysics

[Sound]
	metadata = metadata;inputOutput;SFNode;NULL
	intensity = intensity;inputOutput;SFFloat;1
	spatialize = spatialize;initializeOnly;SFBool;TRUE
	location = location;inputOutput;SFVec3f;0 0 0
	direction = direction;inputOutput;SFVec3f;0 0 1
	minBack = minBack;inputOutput;SFFloat;1
	minFront = minFront;inputOutput;SFFloat;1
	maxBack = maxBack;inputOutput;SFFloat;10
	maxFront = maxFront;inputOutput;SFFloat;10
	priority = priority;inputOutput;SFFloat;0
	source = source;inputOutput;SFNode;NULL
	containerField = children
	componentName = Sound

[Sphere]
	metadata = metadata;inputOutput;SFNode;NULL
	radius = radius;initializeOnly;SFFloat;1
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry3D

[SphereSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	description = description;inputOutput;SFString;""
	autoOffset = autoOffset;inputOutput;SFBool;TRUE
	offset = offset;inputOutput;SFRotation;0 0 1 0
	trackPoint_changed = trackPoint_changed;outputOnly;SFVec3f;
	rotation_changed = rotation_changed;outputOnly;SFRotation;
	isOver = isOver;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	containerField = children
	componentName = PointingDeviceSensor

[SplinePositionInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	closed = closed;inputOutput;SFBool;FALSE
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec3f;[ ]
	keyVelocity = keyVelocity;inputOutput;MFVec3f;[ ]
	normalizeVelocity = normalizeVelocity;inputOutput;SFBool;FALSE
	value_changed = value_changed;outputOnly;SFVec3f;
	containerField = children
	componentName = Interpolation

[SplinePositionInterpolator2D]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	closed = closed;inputOutput;SFBool;FALSE
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFVec2f;[ ]
	keyVelocity = keyVelocity;inputOutput;MFVec2f;[ ]
	normalizeVelocity = normalizeVelocity;inputOutput;SFBool;FALSE
	value_changed = value_changed;outputOnly;SFVec2f;
	containerField = children
	componentName = Interpolation

[SplineScalarInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	closed = closed;inputOutput;SFBool;FALSE
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFFloat;[ ]
	keyVelocity = keyVelocity;inputOutput;MFFloat;[ ]
	normalizeVelocity = normalizeVelocity;inputOutput;SFBool;FALSE
	value_changed = value_changed;outputOnly;SFFloat;
	containerField = children
	componentName = Interpolation

[SpotLight]
	metadata = metadata;inputOutput;SFNode;NULL
	global = global;inputOutput;SFBool;TRUE
	on = on;inputOutput;SFBool;TRUE
	color = color;inputOutput;SFColor;1 1 1
	intensity = intensity;inputOutput;SFFloat;1
	ambientIntensity = ambientIntensity;inputOutput;SFFloat;0
	attenuation = attenuation;inputOutput;SFVec3f;1 0 0
	location = location;inputOutput;SFVec3f;0 0 0
	direction = direction;inputOutput;SFVec3f;0 0 -1
	radius = radius;inputOutput;SFFloat;100
	beamWidth = beamWidth;inputOutput;SFFloat;0.785398
	cutOffAngle = cutOffAngle;inputOutput;SFFloat;1.5708
	shadowIntensity = shadowIntensity;inputOutput;SFFloat;0
	shadowMapSize = shadowMapSize;inputOutput;SFInt32;1024
	containerField = children
	componentName = Lighting

[SquadOrientationInterpolator]
	metadata = metadata;inputOutput;SFNode;NULL
	set_fraction = set_fraction;inputOnly;SFFloat;
	closed = closed;inputOutput;SFBool;FALSE
	key = key;inputOutput;MFFloat;[ ]
	keyValue = keyValue;inputOutput;MFRotation;[ ]
	value_changed = value_changed;outputOnly;SFRotation;
	containerField = children
	componentName = Interpolation

[StaticGroup]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	children = children;initializeOnly;MFNode;[ ]
	containerField = children
	componentName = Grouping

[StringSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	deletionAllowed = deletionAllowed;inputOutput;SFBool;TRUE
	enteredText = enteredText;outputOnly;SFString;
	finalText = finalText;outputOnly;SFString;
	isActive = isActive;outputOnly;SFBool;
	containerField = children
	componentName = KeyDeviceSensor

[SurfaceEmitter]
	metadata = metadata;inputOutput;SFNode;NULL
	speed = speed;inputOutput;SFFloat;0
	variation = variation;inputOutput;SFFloat;0.25
	mass = mass;initializeOnly;SFFloat;0
	surfaceArea = surfaceArea;initializeOnly;SFFloat;0
	surface = surface;initializeOnly;SFNode;NULL
	containerField = emitter
	componentName = ParticleSystems

[Switch]
	metadata = metadata;inputOutput;SFNode;NULL
	whichChoice = whichChoice;inputOutput;SFInt32;-1
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Grouping

[TexCoordChaser2D]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;MFVec2f;
	set_destination = set_destination;inputOnly;MFVec2f;
	initialValue = initialValue;initializeOnly;MFVec2f;[ ]
	initialDestination = initialDestination;initializeOnly;MFVec2f;[ ]
	duration = duration;initializeOnly;SFTime;1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;MFVec2f;
	containerField = children
	componentName = Followers

[TexCoordDamper2D]
	metadata = metadata;inputOutput;SFNode;NULL
	set_value = set_value;inputOnly;MFVec2f;
	set_destination = set_destination;inputOnly;MFVec2f;
	initialValue = initialValue;initializeOnly;MFVec2f;[ ]
	initialDestination = initialDestination;initializeOnly;MFVec2f;[ ]
	order = order;initializeOnly;SFInt32;3
	tau = tau;inputOutput;SFTime;0.3
	tolerance = tolerance;inputOutput;SFFloat;-1
	isActive = isActive;outputOnly;SFBool;
	value_changed = value_changed;outputOnly;MFVec2f;
	containerField = children
	componentName = Followers

[Text]
	metadata = metadata;inputOutput;SFNode;NULL
	string = string;inputOutput;MFString;[ ]
	length = length;inputOutput;MFFloat;[ ]
	maxExtent = maxExtent;inputOutput;SFFloat;0
	solid = solid;initializeOnly;SFBool;FALSE
	origin = origin;outputOnly;SFVec3f;
	textBounds = textBounds;outputOnly;SFVec2f;
	lineBounds = lineBounds;outputOnly;MFVec2f;
	fontStyle = fontStyle;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Text

[TextureBackground]
	metadata = metadata;inputOutput;SFNode;NULL
	set_bind = set_bind;inputOnly;SFBool;
	skyAngle = skyAngle;inputOutput;MFFloat;[ ]
	skyColor = skyColor;inputOutput;MFColor;0 0 0
	groundAngle = groundAngle;inputOutput;MFFloat;[ ]
	groundColor = groundColor;inputOutput;MFColor;[ ]
	transparency = transparency;inputOutput;SFFloat;0
	isBound = isBound;outputOnly;SFBool;
	bindTime = bindTime;outputOnly;SFTime;
	frontTexture = frontTexture;inputOutput;SFNode;NULL
	backTexture = backTexture;inputOutput;SFNode;NULL
	leftTexture = leftTexture;inputOutput;SFNode;NULL
	rightTexture = rightTexture;inputOutput;SFNode;NULL
	topTexture = topTexture;inputOutput;SFNode;NULL
	bottomTexture = bottomTexture;inputOutput;SFNode;NULL
	containerField = children
	componentName = EnvironmentalEffects

[TextureCoordinate]
	metadata = metadata;inputOutput;SFNode;NULL
	point = point;inputOutput;MFVec2f;[ ]
	containerField = texCoord
	componentName = Texturing

[TextureCoordinate3D]
	metadata = metadata;inputOutput;SFNode;NULL
	point = point;inputOutput;MFVec3f;[ ]
	containerField = texCoord
	componentName = Texturing3D

[TextureCoordinate4D]
	metadata = metadata;inputOutput;SFNode;NULL
	point = point;inputOutput;MFVec4f;[ ]
	containerField = texCoord
	componentName = Texturing3D

[TextureCoordinateGenerator]
	metadata = metadata;inputOutput;SFNode;NULL
	mode = mode;inputOutput;SFString;"SPHERE"
	parameter = parameter;inputOutput;MFFloat;[ ]
	containerField = texCoord
	componentName = Texturing

[TextureProperties]
	metadata = metadata;inputOutput;SFNode;NULL
	borderColor = borderColor;inputOutput;SFColorRGBA;0 0 0 0
	borderWidth = borderWidth;inputOutput;SFInt32;0
	anisotropicDegree = anisotropicDegree;inputOutput;SFFloat;1
	generateMipMaps = generateMipMaps;initializeOnly;SFBool;FALSE
	minificationFilter = minificationFilter;inputOutput;SFString;"FASTEST"
	magnificationFilter = magnificationFilter;inputOutput;SFString;"FASTEST"
	boundaryModeS = boundaryModeS;inputOutput;SFString;"REPEAT"
	boundaryModeT = boundaryModeT;inputOutput;SFString;"REPEAT"
	boundaryModeR = boundaryModeR;inputOutput;SFString;"REPEAT"
	textureCompression = textureCompression;inputOutput;SFString;"FASTEST"
	texturePriority = texturePriority;inputOutput;SFFloat;0
	containerField = textureProperties
	componentName = Texturing

[TextureTransform]
	metadata = metadata;inputOutput;SFNode;NULL
	translation = translation;inputOutput;SFVec2f;0 0
	rotation = rotation;inputOutput;SFFloat;0
	scale = scale;inputOutput;SFVec2f;1 1
	center = center;inputOutput;SFVec2f;0 0
	containerField = textureTransform
	componentName = Texturing

[TextureTransform3D]
	metadata = metadata;inputOutput;SFNode;NULL
	translation = translation;inputOutput;SFVec3f;0 0 0
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	center = center;inputOutput;SFVec3f;0 0 0
	containerField = textureTransform
	componentName = Texturing3D

[TextureTransformMatrix3D]
	metadata = metadata;inputOutput;SFNode;NULL
	matrix = matrix;inputOutput;SFMatrix4f;1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
	containerField = textureTransform
	componentName = Texturing3D

[TimeSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	cycleInterval = cycleInterval;inputOutput;SFTime;1
	loop = loop;inputOutput;SFBool;FALSE
	startTime = startTime;inputOutput;SFTime;0
	resumeTime = resumeTime;inputOutput;SFTime;0
	pauseTime = pauseTime;inputOutput;SFTime;0
	stopTime = stopTime;inputOutput;SFTime;0
	isPaused = isPaused;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	cycleTime = cycleTime;outputOnly;SFTime;
	elapsedTime = elapsedTime;outputOnly;SFTime;
	fraction_changed = fraction_changed;outputOnly;SFFloat;
	time = time;outputOnly;SFTime;
	containerField = children
	componentName = Time

[TimeTrigger]
	metadata = metadata;inputOutput;SFNode;NULL
	set_boolean = set_boolean;inputOnly;SFBool;
	triggerTime = triggerTime;outputOnly;SFTime;
	containerField = children
	componentName = EventUtilities

[TouchSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	description = description;inputOutput;SFString;""
	hitTexCoord_changed = hitTexCoord_changed;outputOnly;SFVec2f;
	hitNormal_changed = hitNormal_changed;outputOnly;SFVec3f;
	hitPoint_changed = hitPoint_changed;outputOnly;SFVec3f;
	isOver = isOver;outputOnly;SFBool;
	isActive = isActive;outputOnly;SFBool;
	touchTime = touchTime;outputOnly;SFTime;
	containerField = children
	componentName = PointingDeviceSensor

[Transform]
	metadata = metadata;inputOutput;SFNode;NULL
	translation = translation;inputOutput;SFVec3f;0 0 0
	rotation = rotation;inputOutput;SFRotation;0 0 1 0
	scale = scale;inputOutput;SFVec3f;1 1 1
	scaleOrientation = scaleOrientation;inputOutput;SFRotation;0 0 1 0
	center = center;inputOutput;SFVec3f;0 0 0
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Grouping

[TransformSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	size = size;inputOutput;SFVec3f;0 0 0
	center = center;inputOutput;SFVec3f;0 0 0
	enterTime = enterTime;outputOnly;SFTime;
	exitTime = exitTime;outputOnly;SFTime;
	isActive = isActive;outputOnly;SFBool;
	position_changed = position_changed;outputOnly;SFVec3f;
	orientation_changed = orientation_changed;outputOnly;SFRotation;
	targetObject = targetObject;inputOutput;SFNode;NULL
	containerField = children
	componentName = EnvironmentalSensor

[TransmitterPdu]
	metadata = metadata;inputOutput;SFNode;NULL
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	address = address;inputOutput;SFString;"localhost"
	antennaLocation = antennaLocation;inputOutput;SFVec3f;0 0 0
	antennaPatternLength = antennaPatternLength;inputOutput;SFInt32;0
	antennaPatternType = antennaPatternType;inputOutput;SFInt32;0
	applicationID = applicationID;inputOutput;SFInt32;1
	cryptoKeyID = cryptoKeyID;inputOutput;SFInt32;0
	cryptoSystem = cryptoSystem;inputOutput;SFInt32;0
	entityID = entityID;inputOutput;SFInt32;0
	frequency = frequency;inputOutput;SFInt32;0
	inputSource = inputSource;inputOutput;SFInt32;0
	lengthOfModulationParameters = lengthOfModulationParameters;inputOutput;SFInt32;0
	modulationTypeDetail = modulationTypeDetail;inputOutput;SFInt32;0
	modulationTypeMajor = modulationTypeMajor;inputOutput;SFInt32;0
	modulationTypeSpreadSpectrum = modulationTypeSpreadSpectrum;inputOutput;SFInt32;0
	modulationTypeSystem = modulationTypeSystem;inputOutput;SFInt32;0
	multicastRelayHost = multicastRelayHost;inputOutput;SFString;""
	multicastRelayPort = multicastRelayPort;inputOutput;SFInt32;0
	networkMode = networkMode;inputOutput;SFString;"standAlone"
	port = port;inputOutput;SFInt32;0
	power = power;inputOutput;SFFloat;0
	radioEntityTypeCategory = radioEntityTypeCategory;inputOutput;SFInt32;0
	radioEntityTypeCountry = radioEntityTypeCountry;inputOutput;SFInt32;0
	radioEntityTypeDomain = radioEntityTypeDomain;inputOutput;SFInt32;0
	radioEntityTypeKind = radioEntityTypeKind;inputOutput;SFInt32;0
	radioEntityTypeNomenclature = radioEntityTypeNomenclature;inputOutput;SFInt32;0
	radioEntityTypeNomenclatureVersion = radioEntityTypeNomenclatureVersion;inputOutput;SFInt32;0
	radioID = radioID;inputOutput;SFInt32;0
	readInterval = readInterval;inputOutput;SFFloat;0.1
	relativeAntennaLocation = relativeAntennaLocation;inputOutput;SFVec3f;0 0 0
	rtpHeaderExpected = rtpHeaderExpected;inputOutput;SFBool;FALSE
	siteID = siteID;inputOutput;SFInt32;0
	transmitFrequencyBandwidth = transmitFrequencyBandwidth;inputOutput;SFFloat;0
	transmitState = transmitState;inputOutput;SFInt32;0
	whichGeometry = whichGeometry;inputOutput;SFInt32;1
	writeInterval = writeInterval;inputOutput;SFFloat;1
	isNetworkReader = isNetworkReader;outputOnly;SFBool;
	isNetworkWriter = isNetworkWriter;outputOnly;SFBool;
	isRtpHeaderHeard = isRtpHeaderHeard;outputOnly;SFBool;
	isStandAlone = isStandAlone;outputOnly;SFBool;
	timestamp = timestamp;outputOnly;SFTime;
	containerField = children
	componentName = DIS

[TriangleFanSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	fanCount = fanCount;inputOutput;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[TriangleSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[TriangleSet2D]
	metadata = metadata;inputOutput;SFNode;NULL
	vertices = vertices;inputOutput;MFVec2f;[ ]
	solid = solid;initializeOnly;SFBool;TRUE
	containerField = geometry
	componentName = Geometry2D

[TriangleStripSet]
	metadata = metadata;inputOutput;SFNode;NULL
	solid = solid;initializeOnly;SFBool;TRUE
	ccw = ccw;initializeOnly;SFBool;TRUE
	colorPerVertex = colorPerVertex;initializeOnly;SFBool;TRUE
	normalPerVertex = normalPerVertex;initializeOnly;SFBool;TRUE
	stripCount = stripCount;inputOutput;MFInt32;[ ]
	attrib = attrib;inputOutput;MFNode;[ ]
	fogCoord = fogCoord;inputOutput;SFNode;NULL
	color = color;inputOutput;SFNode;NULL
	texCoord = texCoord;inputOutput;SFNode;NULL
	normal = normal;inputOutput;SFNode;NULL
	coord = coord;inputOutput;SFNode;NULL
	containerField = geometry
	componentName = Rendering

[TwoSidedMaterial]
	metadata = metadata;inputOutput;SFNode;NULL
	separateBackColor = separateBackColor;inputOutput;SFBool;FALSE
	ambientIntensity = ambientIntensity;inputOutput;SFFloat;0.2
	diffuseColor = diffuseColor;inputOutput;SFColor;0.8 0.8 0.8
	specularColor = specularColor;inputOutput;SFColor;0 0 0
	emissiveColor = emissiveColor;inputOutput;SFColor;0 0 0
	shininess = shininess;inputOutput;SFFloat;0.2
	transparency = transparency;inputOutput;SFFloat;0
	backAmbientIntensity = backAmbientIntensity;inputOutput;SFFloat;0.2
	backDiffuseColor = backDiffuseColor;inputOutput;SFColor;0.8 0.8 0.8
	backSpecularColor = backSpecularColor;inputOutput;SFColor;0 0 0
	backEmissiveColor = backEmissiveColor;inputOutput;SFColor;0 0 0
	backShininess = backShininess;inputOutput;SFFloat;0.2
	backTransparency = backTransparency;inputOutput;SFFloat;0
	containerField = material
	componentName = Shape

[UniversalJoint]
	metadata = metadata;inputOutput;SFNode;NULL
	body1 = body1;inputOutput;SFNode;NULL
	body2 = body2;inputOutput;SFNode;NULL
	forceOutput = forceOutput;inputOutput;MFString;"NONE"
	anchorPoint = anchorPoint;inputOutput;SFVec3f;0 0 0
	axis1 = axis1;inputOutput;SFVec3f;0 0 0
	axis2 = axis2;inputOutput;SFVec3f;0 0 0
	stopBounce1 = stopBounce1;inputOutput;SFFloat;0
	stop1ErrorCorrection = stop1ErrorCorrection;inputOutput;SFFloat;0.8
	stop2Bounce = stop2Bounce;inputOutput;SFFloat;0
	stop2ErrorCorrection = stop2ErrorCorrection;inputOutput;SFFloat;0.8
	body1AnchorPoint = body1AnchorPoint;outputOnly;SFVec3f;
	body1Axis = body1Axis;outputOnly;SFVec3f;
	body2AnchorPoint = body2AnchorPoint;outputOnly;SFVec3f;
	body2Axis = body2Axis;outputOnly;SFVec3f;
	containerField = joints
	componentName = RigidBodyPhysics

[Viewpoint]
	metadata = metadata;inputOutput;SFNode;NULL
	set_bind = set_bind;inputOnly;SFBool;
	description = description;inputOutput;SFString;""
	position = position;inputOutput;SFVec3f;0 0 10
	orientation = orientation;inputOutput;SFRotation;0 0 1 0
	centerOfRotation = centerOfRotation;inputOutput;SFVec3f;0 0 0
	fieldOfView = fieldOfView;inputOutput;SFFloat;0.785398
	jump = jump;inputOutput;SFBool;TRUE
	retainUserOffsets = retainUserOffsets;inputOutput;SFBool;FALSE
	isBound = isBound;outputOnly;SFBool;
	bindTime = bindTime;outputOnly;SFTime;
	containerField = children
	componentName = Navigation

[ViewpointGroup]
	metadata = metadata;inputOutput;SFNode;NULL
	displayed = displayed;inputOutput;SFBool;TRUE
	description = description;inputOutput;SFString;""
	retainUserOffsets = retainUserOffsets;inputOutput;SFBool;FALSE
	size = size;inputOutput;SFVec3f;0 0 0
	center = center;inputOutput;SFVec3f;0 0 0
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Navigation

[Viewport]
	metadata = metadata;inputOutput;SFNode;NULL
	clipBoundary = clipBoundary;inputOutput;MFFloat;[ 0, 1, 0, 1 ]
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = viewport
	componentName = Layering

[VisibilitySensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	size = size;inputOutput;SFVec3f;0 0 0
	center = center;inputOutput;SFVec3f;0 0 0
	enterTime = enterTime;outputOnly;SFTime;
	exitTime = exitTime;outputOnly;SFTime;
	isActive = isActive;outputOnly;SFBool;
	containerField = children
	componentName = EnvironmentalSensor

[VolumeEmitter]
	metadata = metadata;inputOutput;SFNode;NULL
	internal = internal;initializeOnly;SFBool;TRUE
	direction = direction;inputOutput;SFVec3f;0 1 0
	speed = speed;inputOutput;SFFloat;0
	variation = variation;inputOutput;SFFloat;0.25
	mass = mass;initializeOnly;SFFloat;0
	surfaceArea = surfaceArea;initializeOnly;SFFloat;0
	coordIndex = coordIndex;inputOutput;MFInt32;-1
	coord = coord;inputOutput;SFNode;NULL
	containerField = emitter
	componentName = ParticleSystems

[VolumePickSensor]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	isActive = isActive;outputOnly;SFBool;
	objectType = objectType;inputOutput;MFString;"ALL"
	pickingGeometry = pickingGeometry;inputOutput;SFNode;NULL
	pickTarget = pickTarget;inputOutput;MFNode;[ ]
	pickedGeometry = pickedGeometry;outputOnly;MFNode;
	intersectionType = intersectionType;initializeOnly;SFString;"BOUNDS"
	sortOrder = sortOrder;initializeOnly;SFString;"CLOSEST"
	containerField = children
	componentName = Picking

[WindPhysicsModel]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	direction = direction;inputOutput;SFVec3f;0 0 0
	speed = speed;inputOutput;SFFloat;0.1
	gustiness = gustiness;inputOutput;SFFloat;0.1
	turbulence = turbulence;inputOutput;SFFloat;0
	containerField = physics
	componentName = ParticleSystems

[WorldInfo]
	metadata = metadata;inputOutput;SFNode;NULL
	title = title;initializeOnly;SFString;""
	info = info;initializeOnly;MFString;[ ]
	containerField = children
	componentName = Core

[TransformMatrix3D]
	metadata = metadata;inputOutput;SFNode;NULL
	matrix = matrix;inputOutput;SFMatrix4d;1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Titania

[TouchGroup]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Titania

[PolygonOffsetGroup]
	metadata = metadata;inputOutput;SFNode;NULL
	type = type;inputOutput;SFString;"POLYGON_OFFSET_FILL"
	factor = factor;inputOutput;SFFloat;0
	units = units;inputOutput;SFFloat;0
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Titania

[DepthBuffer]
	metadata = metadata;inputOutput;SFNode;NULL
	enabled = enabled;inputOutput;SFBool;TRUE
	depthFunction = depthFunction;inputOutput;SFString;"LEQUAL"
	depthOffset = depthOffset;inputOutput;SFDouble;0
	bboxSize = bboxSize;initializeOnly;SFVec3f;-1 -1 -1
	bboxCenter = bboxCenter;initializeOnly;SFVec3f;0 0 0
	addChildren = addChildren;inputOnly;MFNode;
	removeChildren = removeChildren;inputOnly;MFNode;
	children = children;inputOutput;MFNode;[ ]
	containerField = children
	componentName = Titania

