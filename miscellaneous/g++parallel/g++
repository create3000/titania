#!/usr/bin/python

import signal
import os, os .path
import sys
import subprocess
import re
import multiprocessing
import math

import dbus
import dbus .service
import dbus .mainloop .glib

import time

sys .stdlog = open ("/home/holger/.xsession-errors", "a")

# -Wno-pmf-conversions
# See http://www.delorie.com/gnu/docs/gcc/gcc_98.html
# this is used in X3DOutput to obtain the address of a member function as void*.

gcc = ["/usr/bin/g++", "-std=c++11", "-Wno-pmf-conversions"]

parallel = ["-ftree-parallelize-loops=" + str (multiprocessing .cpu_count ()), "-fopenmp"]

# Signal handler.
def receive_signal (signum, stack):
	if signum != 17:
		print 'Signal handler called with signal', signum

# Set the signal handler.
for i in [x for x in dir (signal) if x .startswith ("SIG")]:
	try:
		signum = getattr (signal ,i)
		signal .signal (signum, receive_signal)
	except RuntimeError:
		pass
	except ValueError:
		pass

def get_option_index (option, argv):
	""" get the index of option in argv  """
	""" find -o and return index """
	for i, v in enumerate (argv):
		if v == option:
			return i
	return -1


def get_process_server ():
	try:
		""" try to connect to a ProcessServer instance """
		return dbus .SessionBus () .get_object ("com.ProcessServer", "/com/ProcessServer")
	except dbus.exceptions.DBusException:
		os .system ("process-server >/dev/null 2>&1 &")
		time .sleep (1)
		return get_process_server ()
		pass


def get_command (argv):
	command = gcc + argv [1:]

	if "-D_GLIBCXX_PARALLEL" in argv:
		command += parallel

	return command


def touch (argv):
	subprocess .call (["touch", argv [get_option_index ("-c", argv) + 2]])

def fraction (value, n) :
	return math .trunc (round (value - math .floor (value), n) * math .pow (10, 3))

def main ():
	processServer = get_process_server ()

	command = get_command (sys .argv);

	if "-c" in sys .argv:
		""" compile """
		if processServer .get_value ("startTime", 0, timeout = 600) == 0:
			processServer .set_value ("startTime", time .time (), timeout = 600)

		duration = time .time () - processServer .get_value ("startTime", 0, timeout = 600)
		print >> sys .stdout, "Elapsed time:  %s.%03d seconds." % (time .strftime ("%H:%M:%S", time .gmtime (duration)), fraction (duration, 3))

		touch (sys .argv [1:])
		returncode = processServer .start (command, timeout = 600)
	else:
		""" finish all commands before linking """
		returncode = processServer .join (timeout = 600)
		if max (returncode) == 0:
			if processServer .get_value ("startTime", 0, timeout = 600) == 0:
				processServer .set_value ("startTime", time .time (), timeout = 600)

			""" link now, all commands are finished and the *.o files can be found now """
			returncode = processServer .call (command, timeout = 600)

			duration = time .time () - processServer .get_value ("startTime", 0, timeout = 600)
			print >> sys .stdout, "This unit takes %s.%03d seconds to compile." % (time .strftime ("%H:%M:%S", time .gmtime (duration)), fraction (duration, 3))
			processServer .set_value ("startTime", 0, timeout = 600)


	print >> sys .stdout, processServer .get_stdout (timeout = 600) .encode ('utf-8', 'ignore'),
	print >> sys .stderr, processServer .get_stderr (timeout = 600) .encode ('utf-8', 'ignore'),


	if max (returncode):
		processServer .terminate (timeout = 600)
		processServer .set_value ("startTime", 0, timeout = 600)

	sys .exit (max (returncode))


if __name__ == "__main__":
	main ()




# END ##########################################################################
"""
"-D_GLIBCXX_PARALLEL" "-fopenmp" "-ftree-parallelize-loops"
"-Wextra",
"-std=c++0x"
"-std=c++11"
"-std=gnu++0x"
"-std=gnu++11"

subprocess .call (["zenity", "--info", "--text=" + str (multiprocessing .cpu_count ())])

"""
################################################################################

